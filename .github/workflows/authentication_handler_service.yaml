on: push
name: Authentication Handler Service
jobs:
  checks:
    name: Authentication Service CI Workflow
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/services/authentication_handler_service
    steps:
      - name: Restore Go cache
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - name: Checkout Development Branch
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15.x
      - name: Validate Helm chart
        uses: stefanprodan/kube-tools@v1
        with:
          command: |
            ls -al
            helmv3 template ./src/services/authentication_handler_service/charts/authentication_handler_service | kubeval --strict
      - name: Validate Kustomization
        uses: stefanprodan/kube-tools@v1
        continue-on-error: true
        with:
          command: |
            kustomize build ./src/services/authentication_handler_service/kustomize | kubeval --strict
            kustomize build ./src/services/authentication_handler_service/kustomize | conftest test -p .github/policy -
      - name: Build code base
        working-directory: ./src/services/authentication_handler_service
        run: make build
      - name: Build Helm Charts
        continue-on-error: true
        working-directory: ./src/services/authentication_handler_service
        run: make build-charts
      - name: Run Integration & Unit Test Cases
        working-directory: ./src/services/authentication_handler_service
        continue-on-error: true
        run: make test-suite
      - name: Build Docker Container
        working-directory: ./src/services/authentication_handler_service
        run: make build-container
      - name: Docker Build And Push
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
          docker build . --file Dockerfile --tag blackspaceinc/authentication_handler_service:dev
          docker push blackspaceinc/authentication_handler_service:dev

  cve-scan:
    name: Authentication Service CVE Scan
    env:
      working-directory: ./src/services/authentication_handler_service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build image
        id: build
        working-directory: ${{env.working-directory}}
        run: |
          IMAGE=test/authentication_handler_service:${GITHUB_SHA}
          docker build -t ${IMAGE} .
          echo "::set-output name=image::$IMAGE"
      - name: Scan image
        uses: docker://docker.io/aquasec/trivy:latest
        with:
          args: --cache-dir /var/lib/trivy --no-progress --exit-code 1 --severity MEDIUM,HIGH,CRITICAL ${{ steps.build.outputs.image }}

  kind-helm:
    strategy:
      matrix:
        helm-version:
          - 2.16.12
          - 3.3.4
    runs-on: ubuntu-latest
    env:
      working-directory: ./src/services/authentication_handler_service
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Kubernetes
        uses: engineerd/setup-kind@v0.5.0
      - name: Build container image
        working-directory: ${{env.working-directory}}
        run: |
          ./hack/build.sh
          kind load docker-image test/authentication_handler_service:latest
      - name: Setup Helm
        uses: ./.github/actions/helm
        with:
          helm-version: ${{ matrix.helm-version }}
      - name: Install Tiller
        working-directory: ${{env.working-directory}}
        if: ${{ startsWith(matrix.helm-version, '2') }}
        run: ./hack/tiller.sh
      - name: Deploy
        working-directory: ${{env.working-directory}}
        run: ./hack/deploy.sh
      - name: Run integration tests
        working-directory: ${{env.working-directory}}
        run: ./hack/test.sh
      - name: Debug failure
        if: failure()
        run: |
          kubectl logs -l app=authentication_handler_service || true

  test:
    runs-on: ubuntu-latest
    env:
      working-directory: ./src/services/authentication_handler_service
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Restore Go cache
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15.x
      - name: Run unit tests
        working-directory: ${{env.working-directory}}
        run: make test-suite
      - name: Check if working tree is dirty
        run: |
          if [[ $(git diff --stat) != '' ]]; then
            echo 'run make test and commit changes'
            exit 1
          fi
      - name: Validate Helm chart
        uses: stefanprodan/kube-tools@v1
        with:
          command: |
            helmv3 template ./${{env.working-directory}}/charts/authentication_handler_service | kubeval --strict
      - name: Validate kustomization
        uses: stefanprodan/kube-tools@v1
        with:
          command: |
            kustomize build ./${{env.working-directory}}/kustomize | kubeval --strict
            kustomize build ./${{env.working-directory}}/kustomize | conftest test -p .github/policy -

  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: "--debug"
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Prepare
        id: prep
        run: |
          VERSION=sha-${GITHUB_SHA::8}
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF/refs\/tags\//}
          fi
          echo ::set-output name=BUILD_DATE::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=VERSION::${VERSION}
      - name: Publish multi-arch image
        uses: docker/build-push-action@v2
        with:
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          working-directory: ${{env.working-directory}}
          context: ${{env.working-directory}}
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          tags: |
            docker.io/github.com/blackspaceInc/blackspaceplatform/authentication_handler_service:${{ steps.prep.outputs.VERSION }}
            docker.io/github.com/blackspaceInc/blackspaceplatform/authentication_handler_service:latest
            ghcr.io/github.com/blackspaceInc/blackspaceplatform/authentication_handler_service:${{ steps.prep.outputs.VERSION }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.prep.outputs.VERSION }}
            org.opencontainers.image.created=${{ steps.prep.outputs.BUILD_DATE }}
      - name: Publish base image
        uses: docker/build-push-action@v2
        with:
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          working-directory: ${{env.working-directory}}
          context: ${{env.working-directory}}
          platforms: linux/amd64
          file: ./Dockerfile.base
          tags: docker.io/github.com/blackspaceInc/blackspaceplatform/authentication_handler_service-base:latest
      - name: Publish helm chart
        uses: stefanprodan/helm-gh-pages@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: ./.github/actions/release-notes
      - name: Generate release notes
        run: |
          echo 'CHANGELOG' > /tmp/release.txt
          github-release-notes -org blackspaceInc -repo authentication_handler_service -since-latest-release >> /tmp/release.txt
      - name: Publish release
        uses: goreleaser/goreleaser-action@v1
        with:
          version: latest
          args: release --release-notes=/tmp/release.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
