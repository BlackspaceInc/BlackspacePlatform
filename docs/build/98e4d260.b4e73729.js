(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{169:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(2),o=n(6),r=(n(0),n(244)),i={title:"Common Golang P.R. Reviews"},l={unversionedId:"__guidelines/style_guide/golang/common-review-comments",id:"__guidelines/style_guide/golang/common-review-comments",isDocsHomePage:!1,title:"Common Golang P.R. Reviews",description:"This set of bulletpoints outline common comments made during reviews of Go code, so that a single detailed explanation can be referred to by shorthands.",source:"@site/docs/__guidelines/style_guide/golang/common-review-comments.md",slug:"/__guidelines/style_guide/golang/common-review-comments",permalink:"/docs/__guidelines/style_guide/golang/common-review-comments",version:"current",sidebar:"docs",previous:{title:"Clean Go Code",permalink:"/docs/__guidelines/style_guide/golang/clean-code"},next:{title:"Blackspace Golang Style Guide",permalink:"/docs/__guidelines/style_guide/golang/golang-styleguide"}},s=[{value:"Gofmt",id:"gofmt",children:[]},{value:"Comment Sentences",id:"comment-sentences",children:[]},{value:"Contexts",id:"contexts",children:[]},{value:"Copying",id:"copying",children:[]},{value:"Crypto Rand",id:"crypto-rand",children:[]},{value:"Declaring Empty Slices",id:"declaring-empty-slices",children:[]},{value:"Doc Comments",id:"doc-comments",children:[]},{value:"Don&#39;t Panic",id:"dont-panic",children:[]},{value:"Error Strings",id:"error-strings",children:[]},{value:"Examples",id:"examples",children:[]},{value:"Goroutine Lifetimes",id:"goroutine-lifetimes",children:[]},{value:"Handle Errors",id:"handle-errors",children:[]},{value:"Imports",id:"imports",children:[]},{value:"Import Blank",id:"import-blank",children:[]},{value:"Import Dot",id:"import-dot",children:[]},{value:"In-Band Errors",id:"in-band-errors",children:[]},{value:"Indent Error Flow",id:"indent-error-flow",children:[]},{value:"Initialisms",id:"initialisms",children:[]},{value:"Interfaces",id:"interfaces",children:[]},{value:"Line Length",id:"line-length",children:[]},{value:"Mixed Caps",id:"mixed-caps",children:[]},{value:"Named Result Parameters",id:"named-result-parameters",children:[]},{value:"Naked Returns",id:"naked-returns",children:[]},{value:"Package Comments",id:"package-comments",children:[]},{value:"Package Names",id:"package-names",children:[]},{value:"Pass Values",id:"pass-values",children:[]},{value:"Receiver Names",id:"receiver-names",children:[]},{value:"Receiver Type",id:"receiver-type",children:[]},{value:"Synchronous Functions",id:"synchronous-functions",children:[]},{value:"Useful Test Failures",id:"useful-test-failures",children:[]},{value:"Variable Names",id:"variable-names",children:[]},{value:"Common Mistakes",id:"common-mistakes",children:[{value:"Using reference to loop iterator variable",id:"using-reference-to-loop-iterator-variable",children:[]}]}],c={rightToc:s};function b(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This set of bulletpoints outline common comments made during reviews of Go code, so that a single detailed explanation can be referred to by shorthands.\nThis is a laundry list of common mistakes, not a comprehensive style guide."),Object(r.b)("p",null,"You can view this as a supplement to ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://golang.org/doc/effective_go.html"}),"Effective Go"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Please ",Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"https://golang.org/issue/new?title=wiki%3A+CodeReviewComments+change&body=&labels=Documentation"}),"discuss changes")," before editing this page"),", even ",Object(r.b)("em",{parentName:"p"},"minor")," ones. Many people have opinions and this is not the place for edit wars."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#common-review-comments"}),"Common Review Comments")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#gofmt"}),"Gofmt")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#comment-sentences"}),"Comment Sentences")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#contexts"}),"Contexts")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#copying"}),"Copying")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#crypto-rand"}),"Crypto Rand")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#declaring-empty-slices"}),"Declaring Empty Slices")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#doc-comments"}),"Doc Comments")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#dont-panic"}),"Don't Panic")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#error-strings"}),"Error Strings")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#examples"}),"Examples")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#goroutine-lifetimes"}),"Goroutine Lifetimes")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#handle-errors"}),"Handle Errors")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#imports"}),"Imports")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#import-blank"}),"Import Blank")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#import-dot"}),"Import Dot")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#in-band-errors"}),"In-Band Errors")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#indent-error-flow"}),"Indent Error Flow")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#initialisms"}),"Initialisms")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#interfaces"}),"Interfaces")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#line-length"}),"Line Length")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#mixed-caps"}),"Mixed Caps")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#named-result-parameters"}),"Named Result Parameters")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#naked-returns"}),"Naked Returns")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#package-comments"}),"Package Comments")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#package-names"}),"Package Names")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#pass-values"}),"Pass Values")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#receiver-names"}),"Receiver Names")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#receiver-type"}),"Receiver Type")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#synchronous-functions"}),"Synchronous Functions")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#useful-test-failures"}),"Useful Test Failures")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#variable-names"}),"Variable Names")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#common-mistakes"}),"Common Mistakes"))),Object(r.b)("h2",{id:"gofmt"},"Gofmt"),Object(r.b)("p",null,"Run ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://golang.org/cmd/gofmt/"}),"gofmt")," on your code to automatically fix the majority of mechanical style issues. Almost all Go code in the wild uses ",Object(r.b)("inlineCode",{parentName:"p"},"gofmt"),". The rest of this document addresses non-mechanical style points."),Object(r.b)("p",null,"An alternative is to use ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://godoc.org/golang.org/x/tools/cmd/goimports"}),"goimports"),", a superset of ",Object(r.b)("inlineCode",{parentName:"p"},"gofmt")," which additionally adds (and removes) import lines as necessary."),Object(r.b)("h2",{id:"comment-sentences"},"Comment Sentences"),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://golang.org/doc/effective_go.html#commentary"}),"https://golang.org/doc/effective_go.html#commentary"),".  Comments documenting declarations should be full sentences, even if that seems a little redundant.  This approach makes them format well when extracted into godoc documentation.  Comments should begin with the name of the thing being described and end in a period:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// Request represents a request to run a command.\ntype Request struct { ...\n\n// Encode writes the JSON encoding of req to w.\nfunc Encode(w io.Writer, req *Request) { ...\n")),Object(r.b)("p",null,"and so on."),Object(r.b)("h2",{id:"contexts"},"Contexts"),Object(r.b)("p",null,"Values of the context.Context type carry security credentials,\ntracing information, deadlines, and cancellation signals across API\nand process boundaries. Go programs pass Contexts explicitly along\nthe entire function call chain from incoming RPCs and HTTP requests\nto outgoing requests."),Object(r.b)("p",null,"Most functions that use a Context should accept it as their first parameter:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"func F(ctx context.Context, /* other arguments */) {}\n")),Object(r.b)("p",null,"A function that is never request-specific may use context.Background(),\nbut err on the side of passing a Context even if you think you don't need\nto. The default case is to pass a Context; only use context.Background()\ndirectly if you have a good reason why the alternative is a mistake."),Object(r.b)("p",null,"Don't add a Context member to a struct type; instead add a ctx parameter\nto each method on that type that needs to pass it along. The one exception\nis for methods whose signature must match an interface in the standard library\nor in a third party library."),Object(r.b)("p",null,"Don't create custom Context types or use interfaces other than Context in\nfunction signatures."),Object(r.b)("p",null,"If you have application data to pass around, put it in a parameter,\nin the receiver, in globals, or, if it truly belongs there, in a Context value."),Object(r.b)("p",null,"Contexts are immutable, so it's fine to pass the same ctx to multiple\ncalls that share the same deadline, cancellation signal, credentials,\nparent trace, etc."),Object(r.b)("h2",{id:"copying"},"Copying"),Object(r.b)("p",null,"To avoid unexpected aliasing, be careful when copying a struct from another package.\nFor example, the bytes.Buffer type contains a ",Object(r.b)("inlineCode",{parentName:"p"},"[]byte")," slice. If you copy a ",Object(r.b)("inlineCode",{parentName:"p"},"Buffer"),",\nthe slice in the copy may alias the array in the original, causing subsequent method\ncalls to have surprising effects."),Object(r.b)("p",null,"In general, do not copy a value of type ",Object(r.b)("inlineCode",{parentName:"p"},"T")," if its methods are associated with the\npointer type, ",Object(r.b)("inlineCode",{parentName:"p"},"*T"),"."),Object(r.b)("h2",{id:"crypto-rand"},"Crypto Rand"),Object(r.b)("p",null,"Do not use package ",Object(r.b)("inlineCode",{parentName:"p"},"math/rand")," to generate keys, even throwaway ones.\nUnseeded, the generator is completely predictable. Seeded with ",Object(r.b)("inlineCode",{parentName:"p"},"time.Nanoseconds()"),",\nthere are just a few bits of entropy. Instead, use ",Object(r.b)("inlineCode",{parentName:"p"},"crypto/rand"),"'s Reader,\nand if you need text, print to hexadecimal or base64:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'import (\n    "crypto/rand"\n    // "encoding/base64"\n    // "encoding/hex"\n    "fmt"\n)\n\nfunc Key() string {\n    buf := make([]byte, 16)\n    _, err := rand.Read(buf)\n    if err != nil {\n        panic(err)  // out of randomness, should never happen\n    }\n    return fmt.Sprintf("%x", buf)\n    // or hex.EncodeToString(buf)\n    // or base64.StdEncoding.EncodeToString(buf)\n}\n')),Object(r.b)("h2",{id:"declaring-empty-slices"},"Declaring Empty Slices"),Object(r.b)("p",null,"When declaring an empty slice, prefer"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"var t []string\n")),Object(r.b)("p",null,"over "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"t := []string{}\n")),Object(r.b)("p",null,"The former declares a nil slice value, while the latter is non-nil but zero-length. They are functionally equivalent\u2014their ",Object(r.b)("inlineCode",{parentName:"p"},"len")," and ",Object(r.b)("inlineCode",{parentName:"p"},"cap")," are both zero\u2014but the nil slice is the preferred style."),Object(r.b)("p",null,"Note that there are limited circumstances where a non-nil but zero-length slice is preferred, such as when encoding JSON objects (a ",Object(r.b)("inlineCode",{parentName:"p"},"nil")," slice encodes to ",Object(r.b)("inlineCode",{parentName:"p"},"null"),", while ",Object(r.b)("inlineCode",{parentName:"p"},"[]string{}")," encodes to the JSON array ",Object(r.b)("inlineCode",{parentName:"p"},"[]"),")."),Object(r.b)("p",null,"When designing interfaces, avoid making a distinction between a nil slice and a non-nil, zero-length slice, as this can lead to subtle programming errors."),Object(r.b)("p",null,"For more discussion about nil in Go see Francesc Campoy's talk ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.youtube.com/watch?v=ynoY2xz-F8s"}),"Understanding Nil"),"."),Object(r.b)("h2",{id:"doc-comments"},"Doc Comments"),Object(r.b)("p",null,"All top-level, exported names should have doc comments, as should non-trivial unexported type or function declarations. See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://golang.org/doc/effective_go.html#commentary"}),"https://golang.org/doc/effective_go.html#commentary")," for more information about commentary conventions."),Object(r.b)("h2",{id:"dont-panic"},"Don't Panic"),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://golang.org/doc/effective_go.html#errors"}),"https://golang.org/doc/effective_go.html#errors"),". Don't use panic for normal error handling. Use error and multiple return values."),Object(r.b)("h2",{id:"error-strings"},"Error Strings"),Object(r.b)("p",null,"Error strings should not be capitalized (unless beginning with proper nouns or acronyms) or end with punctuation, since they are usually printed following other context. That is, use ",Object(r.b)("inlineCode",{parentName:"p"},'fmt.Errorf("something bad")')," not ",Object(r.b)("inlineCode",{parentName:"p"},'fmt.Errorf("Something bad")'),", so that ",Object(r.b)("inlineCode",{parentName:"p"},'log.Printf("Reading %s: %v", filename, err)')," formats without a spurious capital letter mid-message. This does not apply to logging, which is implicitly line-oriented and not combined inside other messages."),Object(r.b)("h2",{id:"examples"},"Examples"),Object(r.b)("p",null,"When adding a new package, include examples of intended usage: a runnable Example,\nor a simple test demonstrating a complete call sequence."),Object(r.b)("p",null,"Read more about ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://blog.golang.org/examples"}),"testable Example() functions"),"."),Object(r.b)("h2",{id:"goroutine-lifetimes"},"Goroutine Lifetimes"),Object(r.b)("p",null,"When you spawn goroutines, make it clear when - or whether - they exit."),Object(r.b)("p",null,"Goroutines can leak by blocking on channel sends or receives: the garbage collector\nwill not terminate a goroutine even if the channels it is blocked on are unreachable."),Object(r.b)("p",null,'Even when goroutines do not leak, leaving them in-flight when they are no longer\nneeded can cause other subtle and hard-to-diagnose problems. Sends on closed channels\npanic. Modifying still-in-use inputs "after the result isn\'t needed" can still lead\nto data races. And leaving goroutines in-flight for arbitrarily long can lead to\nunpredictable memory usage.'),Object(r.b)("p",null,"Try to keep concurrent code simple enough that goroutine lifetimes are obvious.\nIf that just isn't feasible, document when and why the goroutines exit."),Object(r.b)("h2",{id:"handle-errors"},"Handle Errors"),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://golang.org/doc/effective_go.html#errors"}),"https://golang.org/doc/effective_go.html#errors"),". Do not discard errors using ",Object(r.b)("inlineCode",{parentName:"p"},"_")," variables. If a function returns an error, check it to make sure the function succeeded. Handle the error, return it, or, in truly exceptional situations, panic."),Object(r.b)("h2",{id:"imports"},"Imports"),Object(r.b)("p",null,"Avoid renaming imports except to avoid a name collision; good package names\nshould not require renaming. In the event of collision, prefer to rename the most\nlocal or project-specific import."),Object(r.b)("p",null,"Imports are organized in groups, with blank lines between them.\nThe standard library packages are always in the first group."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n    "hash/adler32"\n    "os"\n\n    "appengine/foo"\n    "appengine/user"\n\n    "github.com/foo/bar"\n    "rsc.io/goversion/version"\n)\n')),Object(r.b)("a",{href:"https://godoc.org/golang.org/x/tools/cmd/goimports"},"goimports")," will do this for you.",Object(r.b)("h2",{id:"import-blank"},"Import Blank"),Object(r.b)("p",null,"Packages that are imported only for their side effects (using the syntax ",Object(r.b)("inlineCode",{parentName:"p"},'import\n_ "pkg"'),") should only be imported in the main package of a program, or in tests\nthat require them."),Object(r.b)("h2",{id:"import-dot"},"Import Dot"),Object(r.b)("p",null,"The import . form can be useful in tests that, due to circular dependencies, cannot be made part of the package being tested:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package foo_test\n\nimport (\n    "bar/testutil" // also imports "foo"\n    . "foo"\n)\n')),Object(r.b)("p",null,"In this case, the test file cannot be in package foo because it uses bar/testutil, which imports foo.  So we use the 'import .' form to let the file pretend to be part of package foo even though it is not.  Except for this one case, do not use import . in your programs.  It makes the programs much harder to read because it is unclear whether a name like Quux is a top-level identifier in the current package or in an imported package."),Object(r.b)("h2",{id:"in-band-errors"},"In-Band Errors"),Object(r.b)("p",null,"In C and similar languages, it's common for functions to return values like -1\nor null to signal errors or missing results:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'// Lookup returns the value for key or "" if there is no mapping for key.\nfunc Lookup(key string) string\n\n// Failing to check a for an in-band error value can lead to bugs:\nParse(Lookup(key))  // returns "parse failure for value" instead of "no value for key"\n')),Object(r.b)("p",null,"Go's support for multiple return values provides a better solution.\nInstead of requiring clients to check for an in-band error value, a function should return\nan additional value to indicate whether its other return values are valid. This return\nvalue may be an error, or a boolean when no explanation is needed.\nIt should be the final return value."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// Lookup returns the value for key or ok=false if there is no mapping for key.\nfunc Lookup(key string) (value string, ok bool)\n")),Object(r.b)("p",null,"This prevents the caller from using the result incorrectly:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"Parse(Lookup(key))  // compile-time error\n")),Object(r.b)("p",null,"And encourages more robust and readable code:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'value, ok := Lookup(key)\nif !ok {\n    return fmt.Errorf("no value for %q", key)\n}\nreturn Parse(value)\n')),Object(r.b)("p",null,"This rule applies to exported functions but is also useful\nfor unexported functions."),Object(r.b)("p",null,'Return values like nil, "", 0, and -1 are fine when they are\nvalid results for a function, that is, when the caller need not\nhandle them differently from other values.'),Object(r.b)("p",null,'Some standard library functions, like those in package "strings",\nreturn in-band error values. This greatly simplifies string-manipulation\ncode at the cost of requiring more diligence from the programmer.\nIn general, Go code should return additional values for errors.'),Object(r.b)("h2",{id:"indent-error-flow"},"Indent Error Flow"),Object(r.b)("p",null,"Try to keep the normal code path at a minimal indentation, and indent the error handling, dealing with it first. This improves the readability of the code by permitting visually scanning the normal path quickly. For instance, don't write:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"if err != nil {\n    // error handling\n} else {\n    // normal code\n}\n")),Object(r.b)("p",null,"Instead, write:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"if err != nil {\n    // error handling\n    return // or continue, etc.\n}\n// normal code\n")),Object(r.b)("p",null,"If the ",Object(r.b)("inlineCode",{parentName:"p"},"if")," statement has an initialization statement, such as:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"if x, err := f(); err != nil {\n    // error handling\n    return\n} else {\n    // use x\n}\n")),Object(r.b)("p",null,"then this may require moving the short variable declaration to its own line:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"x, err := f()\nif err != nil {\n    // error handling\n    return\n}\n// use x\n")),Object(r.b)("h2",{id:"initialisms"},"Initialisms"),Object(r.b)("p",null,'Words in names that are initialisms or acronyms (e.g. "URL" or "NATO") have a consistent case. For example, "URL" should appear as "URL" or "url" (as in "urlPony", or "URLPony"), never as "Url". As an example: ServeHTTP not ServeHttp. For identifiers with multiple initialized "words", use for example "xmlHTTPRequest" or "XMLHTTPRequest".'),Object(r.b)("p",null,'This rule also applies to "ID" when it is short for "identifier" (which is pretty much all cases when it\'s not the "id" as in "ego", "superego"), so write "appID" instead of "appId".'),Object(r.b)("p",null,"Code generated by the protocol buffer compiler is exempt from this rule. Human-written code is held to a higher standard than machine-written code."),Object(r.b)("h2",{id:"interfaces"},"Interfaces"),Object(r.b)("p",null,"Go interfaces generally belong in the package that uses values of the\ninterface type, not the package that implements those values. The\nimplementing package should return concrete (usually pointer or struct)\ntypes: that way, new methods can be added to implementations without\nrequiring extensive refactoring."),Object(r.b)("p",null,'Do not define interfaces on the implementor side of an API "for mocking";\ninstead, design the API so that it can be tested using the public API of\nthe real implementation.'),Object(r.b)("p",null,"Do not define interfaces before they are used: without a realistic example\nof usage, it is too difficult to see whether an interface is even necessary,\nlet alone what methods it ought to contain."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"package consumer  // consumer.go\n\ntype Thinger interface { Thing() bool }\n\nfunc Foo(t Thinger) string { \u2026 }\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package consumer // consumer_test.go\n\ntype fakeThinger struct{ \u2026 }\nfunc (t fakeThinger) Thing() bool { \u2026 }\n\u2026\nif Foo(fakeThinger{\u2026}) == "x" { \u2026 }\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// DO NOT DO IT!!!\npackage producer\n\ntype Thinger interface { Thing() bool }\n\ntype defaultThinger struct{ \u2026 }\nfunc (t defaultThinger) Thing() bool { \u2026 }\n\nfunc NewThinger() Thinger { return defaultThinger{ \u2026 } }\n")),Object(r.b)("p",null,"Instead return a concrete type and let the consumer mock the producer implementation."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"package producer\n\ntype Thinger struct{ \u2026 }\nfunc (t Thinger) Thing() bool { \u2026 }\n\nfunc NewThinger() Thinger { return Thinger{ \u2026 } }\n")),Object(r.b)("h2",{id:"line-length"},"Line Length"),Object(r.b)("p",null,"There is no rigid line length limit in Go code, but avoid uncomfortably long lines.\nSimilarly, don't add line breaks to keep lines short when they are more readable long--for example,\nif they are repetitive."),Object(r.b)("p",null,'Most of the time when people wrap lines "unnaturally" (in the middle of function calls or\nfunction declarations, more or less, say, though some exceptions are around), the wrapping would be\nunnecessary if they had a reasonable number of parameters and reasonably short variable names.\nLong lines seem to go with long names, and getting rid of the long names helps a lot.'),Object(r.b)("p",null,"In other words, break lines because of the semantics of what you're writing (as a general rule)\nand not because of the length of the line. If you find that this produces lines that are too long,\nthen change the names or the semantics and you'll probably get a good result."),Object(r.b)("p",null,'This is, actually, exactly the same advice about how long a function should be. There\'s no rule\n"never have a function more than N lines long", but there is definitely such a thing as too long\nof a function, and of too stuttery tiny functions, and the solution is to change where the function\nboundaries are, not to start counting lines.'),Object(r.b)("h2",{id:"mixed-caps"},"Mixed Caps"),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://golang.org/doc/effective_go.html#mixed-caps"}),"https://golang.org/doc/effective_go.html#mixed-caps"),". This applies even when it breaks conventions in other languages. For example an unexported constant is ",Object(r.b)("inlineCode",{parentName:"p"},"maxLength")," not ",Object(r.b)("inlineCode",{parentName:"p"},"MaxLength")," or ",Object(r.b)("inlineCode",{parentName:"p"},"MAX_LENGTH"),"."),Object(r.b)("p",null,"Also see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/golang/go/wiki/CodeReviewComments#initialisms"}),"Initialisms"),"."),Object(r.b)("h2",{id:"named-result-parameters"},"Named Result Parameters"),Object(r.b)("p",null,"Consider what it will look like in godoc.  Named result parameters like:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"func (n *Node) Parent1() (node *Node) {}\nfunc (n *Node) Parent2() (node *Node, err error) {}\n")),Object(r.b)("p",null,"will stutter in godoc; better to use:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"func (n *Node) Parent1() *Node {}\nfunc (n *Node) Parent2() (*Node, error) {}\n")),Object(r.b)("p",null,"On the other hand, if a function returns two or three parameters of the same type,\nor if the meaning of a result isn't clear from context, adding names may be useful\nin some contexts. Don't name result parameters just to avoid declaring a var inside\nthe function; that trades off a minor implementation brevity at the cost of\nunnecessary API verbosity."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"func (f *Foo) Location() (float64, float64, error)\n")),Object(r.b)("p",null,"is less clear than:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// Location returns f's latitude and longitude.\n// Negative values mean south and west, respectively.\nfunc (f *Foo) Location() (lat, long float64, err error)\n")),Object(r.b)("p",null,"Naked returns are okay if the function is a handful of lines. Once it's a medium\nsized function, be explicit with your return values. Corollary: it's not worth it\nto name result parameters just because it enables you to use naked returns.\nClarity of docs is always more important than saving a line or two in your function."),Object(r.b)("p",null,"Finally, in some cases you need to name a result parameter in order to change\nit in a deferred closure. That is always OK."),Object(r.b)("h2",{id:"naked-returns"},"Naked Returns"),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#named-result-parameters"}),"Named Result Parameters"),"."),Object(r.b)("h2",{id:"package-comments"},"Package Comments"),Object(r.b)("p",null,"Package comments, like all comments to be presented by godoc, must appear adjacent to the package clause, with no blank line."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// Package math provides basic constants and mathematical functions.\npackage math\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"/*\nPackage template implements data-driven templates for generating textual\noutput such as HTML.\n....\n*/\npackage template\n")),Object(r.b)("p",null,'For "package main" comments, other styles of comment are fine after the binary name (and it may be capitalized if it comes first), For example, for a ',Object(r.b)("inlineCode",{parentName:"p"},"package main")," in the directory ",Object(r.b)("inlineCode",{parentName:"p"},"seedgen")," you could write:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// Binary seedgen ...\npackage main\n")),Object(r.b)("p",null,"or"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// Command seedgen ...\npackage main\n")),Object(r.b)("p",null,"or"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// Program seedgen ...\npackage main\n")),Object(r.b)("p",null,"or"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// The seedgen command ...\npackage main\n")),Object(r.b)("p",null,"or"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// The seedgen program ...\npackage main\n")),Object(r.b)("p",null,"or"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// Seedgen ..\npackage main\n")),Object(r.b)("p",null,"These are examples, and sensible variants of these are acceptable."),Object(r.b)("p",null,"Note that starting the sentence with a lower-case word is not among the\nacceptable options for package comments, as these are publicly-visible and\nshould be written in proper English, including capitalizing the first word\nof the sentence. When the binary name is the first word, capitalizing it is\nrequired even though it does not strictly match the spelling of the\ncommand-line invocation."),Object(r.b)("p",null,"See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://golang.org/doc/effective_go.html#commentary"}),"https://golang.org/doc/effective_go.html#commentary")," for more information about commentary conventions."),Object(r.b)("h2",{id:"package-names"},"Package Names"),Object(r.b)("p",null,"All references to names in your package will be done using the package name,\nso you can omit that name from the identifiers. For example, if you are in package chubby,\nyou don't need type ChubbyFile, which clients will write as ",Object(r.b)("inlineCode",{parentName:"p"},"chubby.ChubbyFile"),".\nInstead, name the type ",Object(r.b)("inlineCode",{parentName:"p"},"File"),", which clients will write as ",Object(r.b)("inlineCode",{parentName:"p"},"chubby.File"),".\nAvoid meaningless package names like util, common, misc, api, types, and interfaces. See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://golang.org/doc/effective_go.html#package-names"}),"http://golang.org/doc/effective_go.html#package-names")," and\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://blog.golang.org/package-names"}),"http://blog.golang.org/package-names")," for more."),Object(r.b)("h2",{id:"pass-values"},"Pass Values"),Object(r.b)("p",null,"Don't pass pointers as function arguments just to save a few bytes.  If a function refers to its argument ",Object(r.b)("inlineCode",{parentName:"p"},"x")," only as ",Object(r.b)("inlineCode",{parentName:"p"},"*x")," throughout, then the argument shouldn't be a pointer.  Common instances of this include passing a pointer to a string (",Object(r.b)("inlineCode",{parentName:"p"},"*string"),") or a pointer to an interface value (",Object(r.b)("inlineCode",{parentName:"p"},"*io.Reader"),").  In both cases the value itself is a fixed size and can be passed directly.  This advice does not apply to large structs, or even small structs that might grow."),Object(r.b)("h2",{id:"receiver-names"},"Receiver Names"),Object(r.b)("p",null,'The name of a method\'s receiver should be a reflection of its identity; often a one or two letter abbreviation of its type suffices (such as "c" or "cl" for "Client"). Don\'t use generic names such as "me", "this" or "self", identifiers typical of object-oriented languages that gives the method a special meaning. In Go, the receiver of a method is just another parameter and therefore, should be named accordingly. The name need not be as descriptive as that of a method argument, as its role is obvious and serves no documentary purpose. It can be very short as it will appear on almost every line of every method of the type; familiarity admits brevity. Be consistent, too: if you call the receiver "c" in one method, don\'t call it "cl" in another.'),Object(r.b)("h2",{id:"receiver-type"},"Receiver Type"),Object(r.b)("p",null,"Choosing whether to use a value or pointer receiver on methods can be difficult, especially to new Go programmers.  If in doubt, use a pointer, but there are times when a value receiver makes sense, usually for reasons of efficiency, such as for small unchanging structs or values of basic type. Some useful guidelines:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"If the receiver is a map, func or chan, don't use a pointer to them. If the receiver is a slice and the method doesn't reslice or reallocate the slice, don't use a pointer to it."),Object(r.b)("li",{parentName:"ul"},"If the method needs to mutate the receiver, the receiver must be a pointer."),Object(r.b)("li",{parentName:"ul"},"If the receiver is a struct that contains a sync.Mutex or similar synchronizing field, the receiver must be a pointer to avoid copying."),Object(r.b)("li",{parentName:"ul"},"If the receiver is a large struct or array, a pointer receiver is more efficient.  How large is large?  Assume it's equivalent to passing all its elements as arguments to the method.  If that feels too large, it's also too large for the receiver."),Object(r.b)("li",{parentName:"ul"},"Can function or methods, either concurrently or when called from this method, be mutating the receiver? A value type creates a copy of the receiver when the method is invoked, so outside updates will not be applied to this receiver. If changes must be visible in the original receiver, the receiver must be a pointer."),Object(r.b)("li",{parentName:"ul"},"If the receiver is a struct, array or slice and any of its elements is a pointer to something that might be mutating, prefer a pointer receiver, as it will make the intention more clear to the reader."),Object(r.b)("li",{parentName:"ul"},"If the receiver is a small array or struct that is naturally a value type (for instance, something like the time.Time type), with no mutable fields and no pointers, or is just a simple basic type such as int or string, a value receiver makes sense.  A value receiver can reduce the amount of garbage that can be generated; if a value is passed to a value method, an on-stack copy can be used instead of allocating on the heap. (The compiler tries to be smart about avoiding this allocation, but it can't always succeed.) Don't choose a value receiver type for this reason without profiling first."),Object(r.b)("li",{parentName:"ul"},"Finally, when in doubt, use a pointer receiver.")),Object(r.b)("h2",{id:"synchronous-functions"},"Synchronous Functions"),Object(r.b)("p",null,"Prefer synchronous functions - functions which return their results directly or finish any callbacks or channel ops before returning - over asynchronous ones."),Object(r.b)("p",null,"Synchronous functions keep goroutines localized within a call, making it easier to reason about their lifetimes and avoid leaks and data races. They're also easier to test: the caller can pass an input and check the output without the need for polling or synchronization."),Object(r.b)("p",null,"If callers need more concurrency, they can add it easily by calling the function from a separate goroutine. But it is quite difficult - sometimes impossible - to remove unnecessary concurrency at the caller side."),Object(r.b)("h2",{id:"useful-test-failures"},"Useful Test Failures"),Object(r.b)("p",null,"Tests should fail with helpful messages saying what was wrong, with what inputs, what was actually got, and what was expected.  It may be tempting to write a bunch of assertFoo helpers, but be sure your helpers produce useful error messages.  Assume that the person debugging your failing test is not you, and is not your team.  A typical Go test fails like:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'if got != tt.want {\n    t.Errorf("Foo(%q) = %d; want %d", tt.in, got, tt.want) // or Fatalf, if test can\'t test anything more past this point\n}\n')),Object(r.b)("p",null,'Note that the order here is actual != expected, and the message uses that order too. Some test frameworks encourage writing these backwards: 0 != x, "expected 0, got x", and so on. Go does not.'),Object(r.b)("p",null,"If that seems like a lot of typing, you may want to write a [","[table-driven test|TableDrivenTests]","]."),Object(r.b)("p",null,"Another common technique to disambiguate failing tests when using a test helper with different input is to wrap each caller with a different TestFoo function, so the test fails with that name:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"func TestSingleValue(t *testing.T) { testHelper(t, []int{80}) }\nfunc TestNoValues(t *testing.T)    { testHelper(t, []int{}) }\n")),Object(r.b)("p",null,"In any case, the onus is on you to fail with a helpful message to whoever's debugging your code in the future."),Object(r.b)("h2",{id:"variable-names"},"Variable Names"),Object(r.b)("p",null,"Variable names in Go should be short rather than long.  This is especially true for local variables with limited scope.  Prefer ",Object(r.b)("inlineCode",{parentName:"p"},"c")," to ",Object(r.b)("inlineCode",{parentName:"p"},"lineCount"),".  Prefer ",Object(r.b)("inlineCode",{parentName:"p"},"i")," to ",Object(r.b)("inlineCode",{parentName:"p"},"sliceIndex"),"."),Object(r.b)("p",null,"The basic rule: the further from its declaration that a name is used, the more descriptive the name must be. For a method receiver, one or two letters is sufficient. Common variables such as loop indices and readers can be a single letter (",Object(r.b)("inlineCode",{parentName:"p"},"i"),", ",Object(r.b)("inlineCode",{parentName:"p"},"r"),"). More unusual things and global variables need more descriptive names."),Object(r.b)("h2",{id:"common-mistakes"},"Common Mistakes"),Object(r.b)("h3",{id:"using-reference-to-loop-iterator-variable"},"Using reference to loop iterator variable"),Object(r.b)("p",null,"In Go, the loop iterator variable is a single variable that takes different values in each loop iteration. This is very efficient, but might lead to unintended behavior when used incorrectly. For example, see the following program:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'func main() {\n    var out []*int\n    for i := 0; i < 3; i++ {\n        out = append(out, &i)\n    }\n    fmt.Println("Values:", *out[0], *out[1], *out[2])\n    fmt.Println("Addresses:", out[0], out[1], out[2])\n}\n')),Object(r.b)("p",null,"It will output unexpected results:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"Values: 3 3 3\nAddresses: 0x40e020 0x40e020 0x40e020\n")),Object(r.b)("p",null,"Explanation: in each iteration we append the address of ",Object(r.b)("inlineCode",{parentName:"p"},"i")," to the ",Object(r.b)("inlineCode",{parentName:"p"},"out")," slice, but since it is the same variable, we append the same address which eventually contains the last value that was assigned to ",Object(r.b)("inlineCode",{parentName:"p"},"i"),". One of the solutions is to copy the loop variable into a new variable:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"})," for i := 0; i < 3; i++ {\n+   i := i // Copy i into a new variable.\n    out = append(out, &i)\n }\n")),Object(r.b)("p",null,"The new output of the program is what was expected:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"Values: 0 1 2\nAddresses: 0x40e020 0x40e024 0x40e028\n")),Object(r.b)("p",null,"Explanation: the line ",Object(r.b)("inlineCode",{parentName:"p"},"i := i")," copies the loop variable ",Object(r.b)("inlineCode",{parentName:"p"},"i")," into a new variable scoped to the for loop body block, also called ",Object(r.b)("inlineCode",{parentName:"p"},"i"),". The address of the new variable is the one that is appended to the array, which makes it outlive the for loop body block. In each loop iteration a new variable is created."),Object(r.b)("p",null,"While this example might look a bit obvious, the same unexpected behavior could be more hidden in some other cases. For example, the loop variable can be an array and the reference can be a slice:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'func main() {\n    var out [][]int\n    for _, i := range [][1]int{{1}, {2}, {3}} {\n        out = append(out, i[:])\n    }\n    fmt.Println("Values:", out)\n}\n')),Object(r.b)("p",null,"Output:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"Values: [[3] [3] [3]]\n")),Object(r.b)("p",null,"The same issue can be demonstrated also when the loop variable is being used in a Goroutine (see the following section)."),Object(r.b)("h1",{id:"using-goroutines-on-loop-iterator-variables"},"Using goroutines on loop iterator variables"),Object(r.b)("p",null,"When iterating in Go, one might attempt to use goroutines to process data in parallel. For example, you might write something like this, using a closure:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"for _, val := range values {\n    go func() {\n        fmt.Println(val)\n    }()\n}\n")),Object(r.b)("p",null,"The above for loops might not do what you expect because their ",Object(r.b)("inlineCode",{parentName:"p"},"val")," variable is actually a single variable that takes on the value of each slice element. Because the closures are all only bound to that one variable, there is a very good chance that when you run this code you will see the last element printed for every iteration instead of each value in sequence, because the goroutines will probably not begin executing until after the loop."),Object(r.b)("p",null,"The proper way to write that closure loop is:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"for _, val := range values {\n    go func(val interface{}) {\n        fmt.Println(val)\n    }(val)\n}\n")),Object(r.b)("p",null,"By adding val as a parameter to the closure, ",Object(r.b)("inlineCode",{parentName:"p"},"val")," is evaluated at each iteration and placed on the stack for the goroutine, so each slice element is available to the goroutine when it is eventually executed."),Object(r.b)("p",null,"It is also important to note that variables declared within the body of a loop are not shared between iterations, and thus can be used separately in a closure.  The following code uses a common index variable ",Object(r.b)("inlineCode",{parentName:"p"},"i")," to create separate ",Object(r.b)("inlineCode",{parentName:"p"},"val"),"s, which results in the expected behavior:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"for i := range valslice {\n    val := valslice[i]\n    go func() {\n        fmt.Println(val)\n    }()\n}\n")),Object(r.b)("p",null,"Note that without executing this closure as a goroutine, the code runs as expected.  The following example prints out the integers between 1 and 10."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"for i := 1; i <= 10; i++ {\n    func() {\n        fmt.Println(i)\n    }()\n}\n")),Object(r.b)("p",null,"Even though the closures all still close over the same variable (in this case, ",Object(r.b)("inlineCode",{parentName:"p"},"i"),"), they are executed before the variable changes, resulting in the desired behavior.\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://golang.org/doc/go_faq.html#closures_and_goroutines"}),"http://golang.org/doc/go_faq.html#closures_and_goroutines")),Object(r.b)("p",null,"You may find another, similar situation like the following:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"for _, val := range values {\n    go val.MyMethod()\n}\n\nfunc (v *val) MyMethod() {\n        fmt.Println(v)\n}\n")),Object(r.b)("p",null,"The above example also will print last element of values, the reason is same as closure. To fix the issue declare another variable inside the loop. "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"for _, val := range values {\n        newVal := val\n    go newVal.MyMethod()\n}\n\nfunc (v *val) MyMethod() {\n        fmt.Println(v)\n}\n")))}b.isMDXComponent=!0}}]);