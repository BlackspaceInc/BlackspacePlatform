// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: models/schema.proto

package models

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ServicesManagedByBlackspace int32

const (
	// create items or services to speed up checkout and enhance reports
	ServicesManagedByBlackspace_ItemCatalog ServicesManagedByBlackspace = 0
	// sell gift cards in store or online to boost sales
	ServicesManagedByBlackspace_GiftCards ServicesManagedByBlackspace = 1
	// provide discounts to boost visibility and sales
	ServicesManagedByBlackspace_Discounts ServicesManagedByBlackspace = 2
	// email your customers to tell them about promotions or special events
	ServicesManagedByBlackspace_MarketingCampaigns ServicesManagedByBlackspace = 3
	// keep your customers coming back with customized rewards program
	ServicesManagedByBlackspace_LoyaltyProgram ServicesManagedByBlackspace = 4
	// get access to financing by running your business on blackspace
	ServicesManagedByBlackspace_FundingYourBusiness ServicesManagedByBlackspace = 5
	// access analytics (indepth) data on buying trends
	ServicesManagedByBlackspace_Analytics ServicesManagedByBlackspace = 6
)

// Enum value maps for ServicesManagedByBlackspace.
var (
	ServicesManagedByBlackspace_name = map[int32]string{
		0: "ItemCatalog",
		1: "GiftCards",
		2: "Discounts",
		3: "MarketingCampaigns",
		4: "LoyaltyProgram",
		5: "FundingYourBusiness",
		6: "Analytics",
	}
	ServicesManagedByBlackspace_value = map[string]int32{
		"ItemCatalog":         0,
		"GiftCards":           1,
		"Discounts":           2,
		"MarketingCampaigns":  3,
		"LoyaltyProgram":      4,
		"FundingYourBusiness": 5,
		"Analytics":           6,
	}
)

func (x ServicesManagedByBlackspace) Enum() *ServicesManagedByBlackspace {
	p := new(ServicesManagedByBlackspace)
	*p = x
	return p
}

func (x ServicesManagedByBlackspace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServicesManagedByBlackspace) Descriptor() protoreflect.EnumDescriptor {
	return file_models_schema_proto_enumTypes[0].Descriptor()
}

func (ServicesManagedByBlackspace) Type() protoreflect.EnumType {
	return &file_models_schema_proto_enumTypes[0]
}

func (x ServicesManagedByBlackspace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServicesManagedByBlackspace.Descriptor instead.
func (ServicesManagedByBlackspace) EnumDescriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{0}
}

type PaymentMedium int32

const (
	PaymentMedium_MobilePhone PaymentMedium = 0
	PaymentMedium_Tablet      PaymentMedium = 1
	PaymentMedium_Computer    PaymentMedium = 2
)

// Enum value maps for PaymentMedium.
var (
	PaymentMedium_name = map[int32]string{
		0: "MobilePhone",
		1: "Tablet",
		2: "Computer",
	}
	PaymentMedium_value = map[string]int32{
		"MobilePhone": 0,
		"Tablet":      1,
		"Computer":    2,
	}
)

func (x PaymentMedium) Enum() *PaymentMedium {
	p := new(PaymentMedium)
	*p = x
	return p
}

func (x PaymentMedium) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMedium) Descriptor() protoreflect.EnumDescriptor {
	return file_models_schema_proto_enumTypes[1].Descriptor()
}

func (PaymentMedium) Type() protoreflect.EnumType {
	return &file_models_schema_proto_enumTypes[1]
}

func (x PaymentMedium) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMedium.Descriptor instead.
func (PaymentMedium) EnumDescriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{1}
}

type PaymentOptions int32

const (
	PaymentOptions_BrickAndMortar  PaymentOptions = 0
	PaymentOptions_OnTheGo         PaymentOptions = 1
	PaymentOptions_Online          PaymentOptions = 2
	PaymentOptions_ThroughInvoices PaymentOptions = 3
)

// Enum value maps for PaymentOptions.
var (
	PaymentOptions_name = map[int32]string{
		0: "BrickAndMortar",
		1: "OnTheGo",
		2: "Online",
		3: "ThroughInvoices",
	}
	PaymentOptions_value = map[string]int32{
		"BrickAndMortar":  0,
		"OnTheGo":         1,
		"Online":          2,
		"ThroughInvoices": 3,
	}
)

func (x PaymentOptions) Enum() *PaymentOptions {
	p := new(PaymentOptions)
	*p = x
	return p
}

func (x PaymentOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_models_schema_proto_enumTypes[2].Descriptor()
}

func (PaymentOptions) Type() protoreflect.EnumType {
	return &file_models_schema_proto_enumTypes[2]
}

func (x PaymentOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentOptions.Descriptor instead.
func (PaymentOptions) EnumDescriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{2}
}

type BusinessCategory int32

const (
	BusinessCategory_BeautyAndPersonalCare        BusinessCategory = 0
	BusinessCategory_Tech                         BusinessCategory = 1
	BusinessCategory_CharitiesEducationMembership BusinessCategory = 2
	BusinessCategory_FoodAndDrink                 BusinessCategory = 3
	BusinessCategory_HealthCareAndFitness         BusinessCategory = 4
	BusinessCategory_HomeAndRepair                BusinessCategory = 5
	BusinessCategory_LeisureAndEntertainment      BusinessCategory = 6
	BusinessCategory_ProfessionalServices         BusinessCategory = 7
	BusinessCategory_Retail                       BusinessCategory = 8
	BusinessCategory_Transportation               BusinessCategory = 9
)

// Enum value maps for BusinessCategory.
var (
	BusinessCategory_name = map[int32]string{
		0: "BeautyAndPersonalCare",
		1: "Tech",
		2: "CharitiesEducationMembership",
		3: "FoodAndDrink",
		4: "HealthCareAndFitness",
		5: "HomeAndRepair",
		6: "LeisureAndEntertainment",
		7: "ProfessionalServices",
		8: "Retail",
		9: "Transportation",
	}
	BusinessCategory_value = map[string]int32{
		"BeautyAndPersonalCare":        0,
		"Tech":                         1,
		"CharitiesEducationMembership": 2,
		"FoodAndDrink":                 3,
		"HealthCareAndFitness":         4,
		"HomeAndRepair":                5,
		"LeisureAndEntertainment":      6,
		"ProfessionalServices":         7,
		"Retail":                       8,
		"Transportation":               9,
	}
)

func (x BusinessCategory) Enum() *BusinessCategory {
	p := new(BusinessCategory)
	*p = x
	return p
}

func (x BusinessCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_models_schema_proto_enumTypes[3].Descriptor()
}

func (BusinessCategory) Type() protoreflect.EnumType {
	return &file_models_schema_proto_enumTypes[3]
}

func (x BusinessCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessCategory.Descriptor instead.
func (BusinessCategory) EnumDescriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{3}
}

type BusinessSubCategory int32

const (
	// art, marketing, travel, interior design, music, technology, food, restaurants, politics, health & beauty,
	// design, non-profit, jewelry, gaming, magazine, photography, fitness, consulting, fashion, services
	BusinessSubCategory_Art               BusinessSubCategory = 0
	BusinessSubCategory_Marketing         BusinessSubCategory = 1
	BusinessSubCategory_Travel            BusinessSubCategory = 2
	BusinessSubCategory_Interior_Design   BusinessSubCategory = 3
	BusinessSubCategory_Music             BusinessSubCategory = 4
	BusinessSubCategory_Technology        BusinessSubCategory = 5
	BusinessSubCategory_Food              BusinessSubCategory = 6
	BusinessSubCategory_Restaurants       BusinessSubCategory = 7
	BusinessSubCategory_Polictics         BusinessSubCategory = 8
	BusinessSubCategory_Health_And_Beauty BusinessSubCategory = 9
	BusinessSubCategory_Design            BusinessSubCategory = 10
	BusinessSubCategory_Non_Profit        BusinessSubCategory = 11
	BusinessSubCategory_Jewelry           BusinessSubCategory = 12
	BusinessSubCategory_Gaming            BusinessSubCategory = 13
	BusinessSubCategory_Magazine          BusinessSubCategory = 14
	BusinessSubCategory_Photography       BusinessSubCategory = 15
	BusinessSubCategory_Fitenss           BusinessSubCategory = 16
	BusinessSubCategory_Consulting        BusinessSubCategory = 17
	BusinessSubCategory_Fashion           BusinessSubCategory = 18
	BusinessSubCategory_Services          BusinessSubCategory = 19
)

// Enum value maps for BusinessSubCategory.
var (
	BusinessSubCategory_name = map[int32]string{
		0:  "Art",
		1:  "Marketing",
		2:  "Travel",
		3:  "Interior_Design",
		4:  "Music",
		5:  "Technology",
		6:  "Food",
		7:  "Restaurants",
		8:  "Polictics",
		9:  "Health_And_Beauty",
		10: "Design",
		11: "Non_Profit",
		12: "Jewelry",
		13: "Gaming",
		14: "Magazine",
		15: "Photography",
		16: "Fitenss",
		17: "Consulting",
		18: "Fashion",
		19: "Services",
	}
	BusinessSubCategory_value = map[string]int32{
		"Art":               0,
		"Marketing":         1,
		"Travel":            2,
		"Interior_Design":   3,
		"Music":             4,
		"Technology":        5,
		"Food":              6,
		"Restaurants":       7,
		"Polictics":         8,
		"Health_And_Beauty": 9,
		"Design":            10,
		"Non_Profit":        11,
		"Jewelry":           12,
		"Gaming":            13,
		"Magazine":          14,
		"Photography":       15,
		"Fitenss":           16,
		"Consulting":        17,
		"Fashion":           18,
		"Services":          19,
	}
)

func (x BusinessSubCategory) Enum() *BusinessSubCategory {
	p := new(BusinessSubCategory)
	*p = x
	return p
}

func (x BusinessSubCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessSubCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_models_schema_proto_enumTypes[4].Descriptor()
}

func (BusinessSubCategory) Type() protoreflect.EnumType {
	return &file_models_schema_proto_enumTypes[4]
}

func (x BusinessSubCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessSubCategory.Descriptor instead.
func (BusinessSubCategory) EnumDescriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{4}
}

type MerchantType int32

const (
	MerchantType_OnePersonBusiness     MerchantType = 0
	MerchantType_SoleProprietor        MerchantType = 1
	MerchantType_SideProject           MerchantType = 2
	MerchantType_CasualUse             MerchantType = 3
	MerchantType_LLCCorporation        MerchantType = 4
	MerchantType_Partnership           MerchantType = 5
	MerchantType_Charity               MerchantType = 6
	MerchantType_ReligiousOrganization MerchantType = 7
)

// Enum value maps for MerchantType.
var (
	MerchantType_name = map[int32]string{
		0: "OnePersonBusiness",
		1: "SoleProprietor",
		2: "SideProject",
		3: "CasualUse",
		4: "LLCCorporation",
		5: "Partnership",
		6: "Charity",
		7: "ReligiousOrganization",
	}
	MerchantType_value = map[string]int32{
		"OnePersonBusiness":     0,
		"SoleProprietor":        1,
		"SideProject":           2,
		"CasualUse":             3,
		"LLCCorporation":        4,
		"Partnership":           5,
		"Charity":               6,
		"ReligiousOrganization": 7,
	}
)

func (x MerchantType) Enum() *MerchantType {
	p := new(MerchantType)
	*p = x
	return p
}

func (x MerchantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MerchantType) Descriptor() protoreflect.EnumDescriptor {
	return file_models_schema_proto_enumTypes[5].Descriptor()
}

func (MerchantType) Type() protoreflect.EnumType {
	return &file_models_schema_proto_enumTypes[5]
}

func (x MerchantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MerchantType.Descriptor instead.
func (MerchantType) EnumDescriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{5}
}

type PhoneType int32

const (
	PhoneType_MOBILE PhoneType = 0
	PhoneType_HOME   PhoneType = 1
	PhoneType_WORK   PhoneType = 2
)

// Enum value maps for PhoneType.
var (
	PhoneType_name = map[int32]string{
		0: "MOBILE",
		1: "HOME",
		2: "WORK",
	}
	PhoneType_value = map[string]int32{
		"MOBILE": 0,
		"HOME":   1,
		"WORK":   2,
	}
)

func (x PhoneType) Enum() *PhoneType {
	p := new(PhoneType)
	*p = x
	return p
}

func (x PhoneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneType) Descriptor() protoreflect.EnumDescriptor {
	return file_models_schema_proto_enumTypes[6].Descriptor()
}

func (PhoneType) Type() protoreflect.EnumType {
	return &file_models_schema_proto_enumTypes[6]
}

func (x PhoneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhoneType.Descriptor instead.
func (PhoneType) EnumDescriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{6}
}

type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CompanyName    string       `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName,omitempty"`
	CompanyAddress string       `protobuf:"bytes,3,opt,name=companyAddress,proto3" json:"companyAddress,omitempty"`
	PhoneNumber    *PhoneNumber `protobuf:"bytes,4,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	Category       string       `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	Media          *Media       `protobuf:"bytes,6,opt,name=media,proto3" json:"media,omitempty"`
	Password       string       `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	Email          string       `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	IsActive       bool         `protobuf:"varint,9,opt,name=isActive,proto3" json:"isActive,omitempty"`
	// define the types of businesses available
	TypeOfBusiness *BusinessType `protobuf:"bytes,10,opt,name=typeOfBusiness,proto3" json:"typeOfBusiness,omitempty"`
	// defines business top goals
	// sell products, market business, sell services, sell memberships, build community
	BusinessGoals []string `protobuf:"bytes,11,rep,name=businessGoals,proto3" json:"businessGoals,omitempty"`
	// the stage at which the business is at
	// collecting inspiration, formalizing an idea or personal project, project or hobby to business,
	// growing existing business
	BusinessStage string `protobuf:"bytes,12,opt,name=businessStage,proto3" json:"businessStage,omitempty"`
	// type of merchant
	MerchantType MerchantType `protobuf:"varint,13,opt,name=merchantType,proto3,enum=MerchantType" json:"merchantType,omitempty"`
	// processing method details
	PaymentDetails *PaymentProcessingMethods `protobuf:"bytes,14,opt,name=paymentDetails,proto3" json:"paymentDetails,omitempty"`
	// types of services blackspace can manage on the business' behalf
	ServicesManagedByBlackspace ServicesManagedByBlackspace `protobuf:"varint,15,opt,name=servicesManagedByBlackspace,proto3,enum=ServicesManagedByBlackspace" json:"servicesManagedByBlackspace,omitempty"`
	// business address
	FounderAddress *Address `protobuf:"bytes,16,opt,name=founderAddress,proto3" json:"founderAddress,omitempty"`
	// Business Interests
	SubscribedTopics *Topics `protobuf:"bytes,17,opt,name=subscribedTopics,proto3" json:"subscribedTopics,omitempty"`
}

func (x *Company) Reset() {
	*x = Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_models_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Company) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Company) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *Company) GetCompanyAddress() string {
	if x != nil {
		return x.CompanyAddress
	}
	return ""
}

func (x *Company) GetPhoneNumber() *PhoneNumber {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *Company) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Company) GetMedia() *Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *Company) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Company) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Company) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Company) GetTypeOfBusiness() *BusinessType {
	if x != nil {
		return x.TypeOfBusiness
	}
	return nil
}

func (x *Company) GetBusinessGoals() []string {
	if x != nil {
		return x.BusinessGoals
	}
	return nil
}

func (x *Company) GetBusinessStage() string {
	if x != nil {
		return x.BusinessStage
	}
	return ""
}

func (x *Company) GetMerchantType() MerchantType {
	if x != nil {
		return x.MerchantType
	}
	return MerchantType_OnePersonBusiness
}

func (x *Company) GetPaymentDetails() *PaymentProcessingMethods {
	if x != nil {
		return x.PaymentDetails
	}
	return nil
}

func (x *Company) GetServicesManagedByBlackspace() ServicesManagedByBlackspace {
	if x != nil {
		return x.ServicesManagedByBlackspace
	}
	return ServicesManagedByBlackspace_ItemCatalog
}

func (x *Company) GetFounderAddress() *Address {
	if x != nil {
		return x.FounderAddress
	}
	return nil
}

func (x *Company) GetSubscribedTopics() *Topics {
	if x != nil {
		return x.SubscribedTopics
	}
	return nil
}

type Topics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Technology      bool   `protobuf:"varint,2,opt,name=Technology,proto3" json:"Technology,omitempty"`
	Health          bool   `protobuf:"varint,3,opt,name=Health,proto3" json:"Health,omitempty"`
	Food            bool   `protobuf:"varint,4,opt,name=Food,proto3" json:"Food,omitempty"`
	Science         bool   `protobuf:"varint,5,opt,name=Science,proto3" json:"Science,omitempty"`
	Music           bool   `protobuf:"varint,6,opt,name=Music,proto3" json:"Music,omitempty"`
	Travel          bool   `protobuf:"varint,7,opt,name=Travel,proto3" json:"Travel,omitempty"`
	Business        bool   `protobuf:"varint,8,opt,name=Business,proto3" json:"Business,omitempty"`
	Cooking         bool   `protobuf:"varint,9,opt,name=Cooking,proto3" json:"Cooking,omitempty"`
	FashionAndStyle bool   `protobuf:"varint,10,opt,name=FashionAndStyle,proto3" json:"FashionAndStyle,omitempty"`
	Design          bool   `protobuf:"varint,11,opt,name=Design,proto3" json:"Design,omitempty"`
	Art             bool   `protobuf:"varint,12,opt,name=Art,proto3" json:"Art,omitempty"`
}

func (x *Topics) Reset() {
	*x = Topics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topics) ProtoMessage() {}

func (x *Topics) ProtoReflect() protoreflect.Message {
	mi := &file_models_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topics.ProtoReflect.Descriptor instead.
func (*Topics) Descriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Topics) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Topics) GetTechnology() bool {
	if x != nil {
		return x.Technology
	}
	return false
}

func (x *Topics) GetHealth() bool {
	if x != nil {
		return x.Health
	}
	return false
}

func (x *Topics) GetFood() bool {
	if x != nil {
		return x.Food
	}
	return false
}

func (x *Topics) GetScience() bool {
	if x != nil {
		return x.Science
	}
	return false
}

func (x *Topics) GetMusic() bool {
	if x != nil {
		return x.Music
	}
	return false
}

func (x *Topics) GetTravel() bool {
	if x != nil {
		return x.Travel
	}
	return false
}

func (x *Topics) GetBusiness() bool {
	if x != nil {
		return x.Business
	}
	return false
}

func (x *Topics) GetCooking() bool {
	if x != nil {
		return x.Cooking
	}
	return false
}

func (x *Topics) GetFashionAndStyle() bool {
	if x != nil {
		return x.FashionAndStyle
	}
	return false
}

func (x *Topics) GetDesign() bool {
	if x != nil {
		return x.Design
	}
	return false
}

func (x *Topics) GetArt() bool {
	if x != nil {
		return x.Art
	}
	return false
}

type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Website   string `protobuf:"bytes,2,opt,name=website,proto3" json:"website,omitempty"`
	Instagram string `protobuf:"bytes,3,opt,name=instagram,proto3" json:"instagram,omitempty"`
	Facebook  string `protobuf:"bytes,4,opt,name=facebook,proto3" json:"facebook,omitempty"`
	LinkedIn  string `protobuf:"bytes,5,opt,name=linkedIn,proto3" json:"linkedIn,omitempty"`
	Pinterest string `protobuf:"bytes,6,opt,name=pinterest,proto3" json:"pinterest,omitempty"`
}

func (x *Media) Reset() {
	*x = Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_models_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{2}
}

func (x *Media) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Media) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Media) GetInstagram() string {
	if x != nil {
		return x.Instagram
	}
	return ""
}

func (x *Media) GetFacebook() string {
	if x != nil {
		return x.Facebook
	}
	return ""
}

func (x *Media) GetLinkedIn() string {
	if x != nil {
		return x.LinkedIn
	}
	return ""
}

func (x *Media) GetPinterest() string {
	if x != nil {
		return x.Pinterest
	}
	return ""
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       string       `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	ApartmentUnit string       `protobuf:"bytes,2,opt,name=ApartmentUnit,proto3" json:"ApartmentUnit,omitempty"`
	ZipCode       string       `protobuf:"bytes,3,opt,name=ZipCode,proto3" json:"ZipCode,omitempty"`
	City          string       `protobuf:"bytes,4,opt,name=City,proto3" json:"City,omitempty"`
	State         string       `protobuf:"bytes,5,opt,name=State,proto3" json:"State,omitempty"`
	Birthdate     *DateOfBirth `protobuf:"bytes,6,opt,name=birthdate,proto3" json:"birthdate,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_models_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{3}
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Address) GetApartmentUnit() string {
	if x != nil {
		return x.ApartmentUnit
	}
	return ""
}

func (x *Address) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetBirthdate() *DateOfBirth {
	if x != nil {
		return x.Birthdate
	}
	return nil
}

type DateOfBirth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month string `protobuf:"bytes,1,opt,name=Month,proto3" json:"Month,omitempty"`
	Day   string `protobuf:"bytes,2,opt,name=Day,proto3" json:"Day,omitempty"`
	Year  string `protobuf:"bytes,3,opt,name=Year,proto3" json:"Year,omitempty"`
}

func (x *DateOfBirth) Reset() {
	*x = DateOfBirth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateOfBirth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateOfBirth) ProtoMessage() {}

func (x *DateOfBirth) ProtoReflect() protoreflect.Message {
	mi := &file_models_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateOfBirth.ProtoReflect.Descriptor instead.
func (*DateOfBirth) Descriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{4}
}

func (x *DateOfBirth) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *DateOfBirth) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *DateOfBirth) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

type PaymentProcessingMethods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentOptions []PaymentOptions `protobuf:"varint,1,rep,packed,name=paymentOptions,proto3,enum=PaymentOptions" json:"paymentOptions,omitempty"`
	Medium         []PaymentMedium  `protobuf:"varint,2,rep,packed,name=medium,proto3,enum=PaymentMedium" json:"medium,omitempty"`
}

func (x *PaymentProcessingMethods) Reset() {
	*x = PaymentProcessingMethods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentProcessingMethods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentProcessingMethods) ProtoMessage() {}

func (x *PaymentProcessingMethods) ProtoReflect() protoreflect.Message {
	mi := &file_models_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentProcessingMethods.ProtoReflect.Descriptor instead.
func (*PaymentProcessingMethods) Descriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{5}
}

func (x *PaymentProcessingMethods) GetPaymentOptions() []PaymentOptions {
	if x != nil {
		return x.PaymentOptions
	}
	return nil
}

func (x *PaymentProcessingMethods) GetMedium() []PaymentMedium {
	if x != nil {
		return x.Medium
	}
	return nil
}

type BusinessType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category    BusinessCategory    `protobuf:"varint,1,opt,name=category,proto3,enum=BusinessCategory" json:"category,omitempty"`
	SubCategory BusinessSubCategory `protobuf:"varint,2,opt,name=subCategory,proto3,enum=BusinessSubCategory" json:"subCategory,omitempty"`
}

func (x *BusinessType) Reset() {
	*x = BusinessType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessType) ProtoMessage() {}

func (x *BusinessType) ProtoReflect() protoreflect.Message {
	mi := &file_models_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessType.ProtoReflect.Descriptor instead.
func (*BusinessType) Descriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{6}
}

func (x *BusinessType) GetCategory() BusinessCategory {
	if x != nil {
		return x.Category
	}
	return BusinessCategory_BeautyAndPersonalCare
}

func (x *BusinessType) GetSubCategory() BusinessSubCategory {
	if x != nil {
		return x.SubCategory
	}
	return BusinessSubCategory_Art
}

type PhoneNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number string    `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Type   PhoneType `protobuf:"varint,2,opt,name=type,proto3,enum=PhoneType" json:"type,omitempty"`
}

func (x *PhoneNumber) Reset() {
	*x = PhoneNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneNumber) ProtoMessage() {}

func (x *PhoneNumber) ProtoReflect() protoreflect.Message {
	mi := &file_models_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneNumber.ProtoReflect.Descriptor instead.
func (*PhoneNumber) Descriptor() ([]byte, []int) {
	return file_models_schema_proto_rawDescGZIP(), []int{7}
}

func (x *PhoneNumber) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *PhoneNumber) GetType() PhoneType {
	if x != nil {
		return x.Type
	}
	return PhoneType_MOBILE
}

var File_models_schema_proto protoreflect.FileDescriptor

var file_models_schema_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78,
	0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x67, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x06, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x12, 0xba, 0xb9, 0x19, 0x0e, 0x0a, 0x0c, 0x12, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x28, 0x01, 0x48, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26,
	0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x74, 0x79, 0x70,
	0x65, 0x4f, 0x66, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x6f, 0x61, 0x6c,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x0e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5e, 0x0a,
	0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x42, 0x79, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x42, 0x79, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x42, 0x79, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x30, 0x0a,
	0x0e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x3d, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x10, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xd2, 0x02, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0xba,
	0xb9, 0x19, 0x0e, 0x0a, 0x0c, 0x12, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x28, 0x01, 0x48,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x46, 0x6f, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x46, 0x6f, 0x6f,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x4d, 0x75, 0x73, 0x69,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x28, 0x0a, 0x0f, 0x46, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x46, 0x61, 0x73, 0x68, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x44, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x41, 0x72, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x05,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x12, 0xba, 0xb9, 0x19, 0x0e, 0x0a, 0x0c, 0x12, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x28, 0x01, 0x48, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22,
	0xb9, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x5a,
	0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x5a, 0x69,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x0b, 0x44,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44,
	0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x22, 0x7b, 0x0a, 0x18, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x6d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x22, 0x75, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x45, 0x0a, 0x0b, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x2a, 0xa0, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x42, 0x79, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x69, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13,
	0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x59, 0x6f, 0x75, 0x72, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x10, 0x06, 0x2a, 0x3a, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x10, 0x02,
	0x2a, 0x52, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x4d, 0x6f,
	0x72, 0x74, 0x61, 0x72, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x6e, 0x54, 0x68, 0x65, 0x47,
	0x6f, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x10, 0x03, 0x2a, 0xef, 0x01, 0x0a, 0x10, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x65, 0x61,
	0x75, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61,
	0x72, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x63, 0x68, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x68, 0x61, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x6f, 0x6f, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x72, 0x69, 0x6e, 0x6b,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x61, 0x72, 0x65,
	0x41, 0x6e, 0x64, 0x46, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x48, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x10, 0x05, 0x12,
	0x1b, 0x0a, 0x17, 0x4c, 0x65, 0x69, 0x73, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x09, 0x2a, 0xb6, 0x02, 0x0a, 0x13, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x72, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x44,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x75, 0x73, 0x69, 0x63,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x6f, 0x6f, 0x64, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x10, 0x07, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x74, 0x69, 0x63, 0x73, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x41, 0x6e, 0x64, 0x5f, 0x42, 0x65, 0x61, 0x75, 0x74,
	0x79, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x10, 0x0a, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x6e, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x10, 0x0b, 0x12,
	0x0b, 0x0a, 0x07, 0x4a, 0x65, 0x77, 0x65, 0x6c, 0x72, 0x79, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x61, 0x67, 0x61,
	0x7a, 0x69, 0x6e, 0x65, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x79, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x69, 0x74, 0x65, 0x6e,
	0x73, 0x73, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x67, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x10,
	0x12, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x10, 0x13, 0x2a,
	0xa6, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x4f, 0x6e, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x6f, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4c,
	0x4c, 0x43, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0x05,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x72, 0x69, 0x74, 0x79, 0x10, 0x06, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x75, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x2a, 0x2b, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57,
	0x4f, 0x52, 0x4b, 0x10, 0x02, 0x42, 0x0c, 0x5a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0xc0,
	0xa2, 0x1f, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_models_schema_proto_rawDescOnce sync.Once
	file_models_schema_proto_rawDescData = file_models_schema_proto_rawDesc
)

func file_models_schema_proto_rawDescGZIP() []byte {
	file_models_schema_proto_rawDescOnce.Do(func() {
		file_models_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_models_schema_proto_rawDescData)
	})
	return file_models_schema_proto_rawDescData
}

var file_models_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_models_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_models_schema_proto_goTypes = []interface{}{
	(ServicesManagedByBlackspace)(0), // 0: ServicesManagedByBlackspace
	(PaymentMedium)(0),               // 1: PaymentMedium
	(PaymentOptions)(0),              // 2: PaymentOptions
	(BusinessCategory)(0),            // 3: BusinessCategory
	(BusinessSubCategory)(0),         // 4: BusinessSubCategory
	(MerchantType)(0),                // 5: MerchantType
	(PhoneType)(0),                   // 6: PhoneType
	(*Company)(nil),                  // 7: Company
	(*Topics)(nil),                   // 8: Topics
	(*Media)(nil),                    // 9: Media
	(*Address)(nil),                  // 10: Address
	(*DateOfBirth)(nil),              // 11: DateOfBirth
	(*PaymentProcessingMethods)(nil), // 12: PaymentProcessingMethods
	(*BusinessType)(nil),             // 13: BusinessType
	(*PhoneNumber)(nil),              // 14: PhoneNumber
}
var file_models_schema_proto_depIdxs = []int32{
	14, // 0: Company.phoneNumber:type_name -> PhoneNumber
	9,  // 1: Company.media:type_name -> Media
	13, // 2: Company.typeOfBusiness:type_name -> BusinessType
	5,  // 3: Company.merchantType:type_name -> MerchantType
	12, // 4: Company.paymentDetails:type_name -> PaymentProcessingMethods
	0,  // 5: Company.servicesManagedByBlackspace:type_name -> ServicesManagedByBlackspace
	10, // 6: Company.founderAddress:type_name -> Address
	8,  // 7: Company.subscribedTopics:type_name -> Topics
	11, // 8: Address.birthdate:type_name -> DateOfBirth
	2,  // 9: PaymentProcessingMethods.paymentOptions:type_name -> PaymentOptions
	1,  // 10: PaymentProcessingMethods.medium:type_name -> PaymentMedium
	3,  // 11: BusinessType.category:type_name -> BusinessCategory
	4,  // 12: BusinessType.subCategory:type_name -> BusinessSubCategory
	6,  // 13: PhoneNumber.type:type_name -> PhoneType
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_models_schema_proto_init() }
func file_models_schema_proto_init() {
	if File_models_schema_proto != nil {
		return
	}
	file_models_graphql_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_models_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateOfBirth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentProcessingMethods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_schema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_schema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_models_schema_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_models_schema_proto_goTypes,
		DependencyIndexes: file_models_schema_proto_depIdxs,
		EnumInfos:         file_models_schema_proto_enumTypes,
		MessageInfos:      file_models_schema_proto_msgTypes,
	}.Build()
	File_models_schema_proto = out.File
	file_models_schema_proto_rawDesc = nil
	file_models_schema_proto_goTypes = nil
	file_models_schema_proto_depIdxs = nil
}
