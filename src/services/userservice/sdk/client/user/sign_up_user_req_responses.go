// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// SignUpUserReqReader is a Reader for the SignUpUserReq structure.
type SignUpUserReqReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SignUpUserReqReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSignUpUserReqOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSignUpUserReqBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSignUpUserReqForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSignUpUserReqNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewSignUpUserReqNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSignUpUserReqInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSignUpUserReqOK creates a SignUpUserReqOK with default headers values
func NewSignUpUserReqOK() *SignUpUserReqOK {
	return &SignUpUserReqOK{}
}

/*SignUpUserReqOK handles this case with default header values.

User Successfully signed up
*/
type SignUpUserReqOK struct {
	Payload *SignUpUserReqOKBody
}

func (o *SignUpUserReqOK) Error() string {
	return fmt.Sprintf("[POST /v1/user/signup][%d] signUpUserReqOK  %+v", 200, o.Payload)
}

func (o *SignUpUserReqOK) GetPayload() *SignUpUserReqOKBody {
	return o.Payload
}

func (o *SignUpUserReqOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SignUpUserReqOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSignUpUserReqBadRequest creates a SignUpUserReqBadRequest with default headers values
func NewSignUpUserReqBadRequest() *SignUpUserReqBadRequest {
	return &SignUpUserReqBadRequest{}
}

/*SignUpUserReqBadRequest handles this case with default header values.

Bad Request
*/
type SignUpUserReqBadRequest struct {
	Payload *SignUpUserReqBadRequestBody
}

func (o *SignUpUserReqBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/user/signup][%d] signUpUserReqBadRequest  %+v", 400, o.Payload)
}

func (o *SignUpUserReqBadRequest) GetPayload() *SignUpUserReqBadRequestBody {
	return o.Payload
}

func (o *SignUpUserReqBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SignUpUserReqBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSignUpUserReqForbidden creates a SignUpUserReqForbidden with default headers values
func NewSignUpUserReqForbidden() *SignUpUserReqForbidden {
	return &SignUpUserReqForbidden{}
}

/*SignUpUserReqForbidden handles this case with default header values.

Forbidden Request
*/
type SignUpUserReqForbidden struct {
	Payload *SignUpUserReqForbiddenBody
}

func (o *SignUpUserReqForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/user/signup][%d] signUpUserReqForbidden  %+v", 403, o.Payload)
}

func (o *SignUpUserReqForbidden) GetPayload() *SignUpUserReqForbiddenBody {
	return o.Payload
}

func (o *SignUpUserReqForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SignUpUserReqForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSignUpUserReqNotFound creates a SignUpUserReqNotFound with default headers values
func NewSignUpUserReqNotFound() *SignUpUserReqNotFound {
	return &SignUpUserReqNotFound{}
}

/*SignUpUserReqNotFound handles this case with default header values.

Request Not Found
*/
type SignUpUserReqNotFound struct {
	Payload *SignUpUserReqNotFoundBody
}

func (o *SignUpUserReqNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/user/signup][%d] signUpUserReqNotFound  %+v", 404, o.Payload)
}

func (o *SignUpUserReqNotFound) GetPayload() *SignUpUserReqNotFoundBody {
	return o.Payload
}

func (o *SignUpUserReqNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SignUpUserReqNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSignUpUserReqNotAcceptable creates a SignUpUserReqNotAcceptable with default headers values
func NewSignUpUserReqNotAcceptable() *SignUpUserReqNotAcceptable {
	return &SignUpUserReqNotAcceptable{}
}

/*SignUpUserReqNotAcceptable handles this case with default header values.

Error occured during request lifecycle
*/
type SignUpUserReqNotAcceptable struct {
	Payload *SignUpUserReqNotAcceptableBody
}

func (o *SignUpUserReqNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /v1/user/signup][%d] signUpUserReqNotAcceptable  %+v", 406, o.Payload)
}

func (o *SignUpUserReqNotAcceptable) GetPayload() *SignUpUserReqNotAcceptableBody {
	return o.Payload
}

func (o *SignUpUserReqNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SignUpUserReqNotAcceptableBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSignUpUserReqInternalServerError creates a SignUpUserReqInternalServerError with default headers values
func NewSignUpUserReqInternalServerError() *SignUpUserReqInternalServerError {
	return &SignUpUserReqInternalServerError{}
}

/*SignUpUserReqInternalServerError handles this case with default header values.

Internal Server Error
*/
type SignUpUserReqInternalServerError struct {
	Payload *SignUpUserReqInternalServerErrorBody
}

func (o *SignUpUserReqInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/user/signup][%d] signUpUserReqInternalServerError  %+v", 500, o.Payload)
}

func (o *SignUpUserReqInternalServerError) GetPayload() *SignUpUserReqInternalServerErrorBody {
	return o.Payload
}

func (o *SignUpUserReqInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SignUpUserReqInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SignUpUserReqBadRequestBody sign up user req bad request body
swagger:model SignUpUserReqBadRequestBody
*/
type SignUpUserReqBadRequestBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this sign up user req bad request body
func (o *SignUpUserReqBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SignUpUserReqBadRequestBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("signUpUserReqBadRequest"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SignUpUserReqBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SignUpUserReqBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SignUpUserReqBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SignUpUserReqBody sign up user req body
swagger:model SignUpUserReqBody
*/
type SignUpUserReqBody struct {

	// user email address to create
	// Required: true
	Email *string `json:"email"`

	// user first name
	// Required: true
	FirstName *string `json:"firstname"`

	// user last name
	// Required: true
	LastName *string `json:"lastname"`

	// user password to create
	// Required: true
	Password *string `json:"password"`

	// user username to create
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this sign up user req body
func (o *SignUpUserReqBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SignUpUserReqBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

func (o *SignUpUserReqBody) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"firstname", "body", o.FirstName); err != nil {
		return err
	}

	return nil
}

func (o *SignUpUserReqBody) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"lastname", "body", o.LastName); err != nil {
		return err
	}

	return nil
}

func (o *SignUpUserReqBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

func (o *SignUpUserReqBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SignUpUserReqBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SignUpUserReqBody) UnmarshalBinary(b []byte) error {
	var res SignUpUserReqBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SignUpUserReqForbiddenBody sign up user req forbidden body
swagger:model SignUpUserReqForbiddenBody
*/
type SignUpUserReqForbiddenBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this sign up user req forbidden body
func (o *SignUpUserReqForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SignUpUserReqForbiddenBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("signUpUserReqForbidden"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SignUpUserReqForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SignUpUserReqForbiddenBody) UnmarshalBinary(b []byte) error {
	var res SignUpUserReqForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SignUpUserReqInternalServerErrorBody sign up user req internal server error body
swagger:model SignUpUserReqInternalServerErrorBody
*/
type SignUpUserReqInternalServerErrorBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this sign up user req internal server error body
func (o *SignUpUserReqInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SignUpUserReqInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("signUpUserReqInternalServerError"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SignUpUserReqInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SignUpUserReqInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res SignUpUserReqInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SignUpUserReqNotAcceptableBody sign up user req not acceptable body
swagger:model SignUpUserReqNotAcceptableBody
*/
type SignUpUserReqNotAcceptableBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this sign up user req not acceptable body
func (o *SignUpUserReqNotAcceptableBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SignUpUserReqNotAcceptableBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("signUpUserReqNotAcceptable"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SignUpUserReqNotAcceptableBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SignUpUserReqNotAcceptableBody) UnmarshalBinary(b []byte) error {
	var res SignUpUserReqNotAcceptableBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SignUpUserReqNotFoundBody sign up user req not found body
swagger:model SignUpUserReqNotFoundBody
*/
type SignUpUserReqNotFoundBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this sign up user req not found body
func (o *SignUpUserReqNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SignUpUserReqNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("signUpUserReqNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SignUpUserReqNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SignUpUserReqNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SignUpUserReqNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SignUpUserReqOKBody sign up user req o k body
swagger:model SignUpUserReqOKBody
*/
type SignUpUserReqOKBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// user account id
	// Required: true
	ID *uint32 `json:"id"`

	// JWT Token
	// Required: true
	JwtToken *string `json:"jwt"`
}

// Validate validates this sign up user req o k body
func (o *SignUpUserReqOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateJwtToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SignUpUserReqOKBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("signUpUserReqOK"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *SignUpUserReqOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("signUpUserReqOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *SignUpUserReqOKBody) validateJwtToken(formats strfmt.Registry) error {

	if err := validate.Required("signUpUserReqOK"+"."+"jwt", "body", o.JwtToken); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SignUpUserReqOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SignUpUserReqOKBody) UnmarshalBinary(b []byte) error {
	var res SignUpUserReqOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
