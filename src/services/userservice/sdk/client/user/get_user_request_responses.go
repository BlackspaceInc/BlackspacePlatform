// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
)

// GetUserRequestReader is a Reader for the GetUserRequest structure.
type GetUserRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetUserRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetUserRequestNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUserRequestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetUserRequestOK creates a GetUserRequestOK with default headers values
func NewGetUserRequestOK() *GetUserRequestOK {
	return &GetUserRequestOK{}
}

/*GetUserRequestOK handles this case with default header values.

Common operation response
*/
type GetUserRequestOK struct {
	Payload *GetUserRequestOKBody
}

func (o *GetUserRequestOK) Error() string {
	return fmt.Sprintf("[GET /v1/user/{id}][%d] getUserRequestOK  %+v", 200, o.Payload)
}

func (o *GetUserRequestOK) GetPayload() *GetUserRequestOKBody {
	return o.Payload
}

func (o *GetUserRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUserRequestOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRequestBadRequest creates a GetUserRequestBadRequest with default headers values
func NewGetUserRequestBadRequest() *GetUserRequestBadRequest {
	return &GetUserRequestBadRequest{}
}

/*GetUserRequestBadRequest handles this case with default header values.

Bad Request
*/
type GetUserRequestBadRequest struct {
	Payload *GetUserRequestBadRequestBody
}

func (o *GetUserRequestBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/user/{id}][%d] getUserRequestBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserRequestBadRequest) GetPayload() *GetUserRequestBadRequestBody {
	return o.Payload
}

func (o *GetUserRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUserRequestBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRequestUnauthorized creates a GetUserRequestUnauthorized with default headers values
func NewGetUserRequestUnauthorized() *GetUserRequestUnauthorized {
	return &GetUserRequestUnauthorized{}
}

/*GetUserRequestUnauthorized handles this case with default header values.

UnAuthorized Request
*/
type GetUserRequestUnauthorized struct {
	Payload *GetUserRequestUnauthorizedBody
}

func (o *GetUserRequestUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/user/{id}][%d] getUserRequestUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserRequestUnauthorized) GetPayload() *GetUserRequestUnauthorizedBody {
	return o.Payload
}

func (o *GetUserRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUserRequestUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRequestForbidden creates a GetUserRequestForbidden with default headers values
func NewGetUserRequestForbidden() *GetUserRequestForbidden {
	return &GetUserRequestForbidden{}
}

/*GetUserRequestForbidden handles this case with default header values.

Forbidden Request
*/
type GetUserRequestForbidden struct {
	Payload *GetUserRequestForbiddenBody
}

func (o *GetUserRequestForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/user/{id}][%d] getUserRequestForbidden  %+v", 403, o.Payload)
}

func (o *GetUserRequestForbidden) GetPayload() *GetUserRequestForbiddenBody {
	return o.Payload
}

func (o *GetUserRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUserRequestForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRequestNotFound creates a GetUserRequestNotFound with default headers values
func NewGetUserRequestNotFound() *GetUserRequestNotFound {
	return &GetUserRequestNotFound{}
}

/*GetUserRequestNotFound handles this case with default header values.

Request Not Found
*/
type GetUserRequestNotFound struct {
	Payload *GetUserRequestNotFoundBody
}

func (o *GetUserRequestNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/user/{id}][%d] getUserRequestNotFound  %+v", 404, o.Payload)
}

func (o *GetUserRequestNotFound) GetPayload() *GetUserRequestNotFoundBody {
	return o.Payload
}

func (o *GetUserRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUserRequestNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRequestNotAcceptable creates a GetUserRequestNotAcceptable with default headers values
func NewGetUserRequestNotAcceptable() *GetUserRequestNotAcceptable {
	return &GetUserRequestNotAcceptable{}
}

/*GetUserRequestNotAcceptable handles this case with default header values.

Error occured during request lifecycle
*/
type GetUserRequestNotAcceptable struct {
	Payload *GetUserRequestNotAcceptableBody
}

func (o *GetUserRequestNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /v1/user/{id}][%d] getUserRequestNotAcceptable  %+v", 406, o.Payload)
}

func (o *GetUserRequestNotAcceptable) GetPayload() *GetUserRequestNotAcceptableBody {
	return o.Payload
}

func (o *GetUserRequestNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUserRequestNotAcceptableBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRequestInternalServerError creates a GetUserRequestInternalServerError with default headers values
func NewGetUserRequestInternalServerError() *GetUserRequestInternalServerError {
	return &GetUserRequestInternalServerError{}
}

/*GetUserRequestInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetUserRequestInternalServerError struct {
	Payload *GetUserRequestInternalServerErrorBody
}

func (o *GetUserRequestInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/user/{id}][%d] getUserRequestInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUserRequestInternalServerError) GetPayload() *GetUserRequestInternalServerErrorBody {
	return o.Payload
}

func (o *GetUserRequestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUserRequestInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetUserRequestBadRequestBody get user request bad request body
swagger:model GetUserRequestBadRequestBody
*/
type GetUserRequestBadRequestBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this get user request bad request body
func (o *GetUserRequestBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserRequestBadRequestBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("getUserRequestBadRequest"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserRequestBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserRequestBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetUserRequestBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserRequestBody get user request body
swagger:model GetUserRequestBody
*/
type GetUserRequestBody struct {

	// id of the user account to get
	// in: query
	// Required: true
	ID *uint32 `json:"result"`
}

// Validate validates this get user request body
func (o *GetUserRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserRequestBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"result", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserRequestBody) UnmarshalBinary(b []byte) error {
	var res GetUserRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserRequestForbiddenBody get user request forbidden body
swagger:model GetUserRequestForbiddenBody
*/
type GetUserRequestForbiddenBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this get user request forbidden body
func (o *GetUserRequestForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserRequestForbiddenBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("getUserRequestForbidden"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserRequestForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserRequestForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetUserRequestForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserRequestInternalServerErrorBody get user request internal server error body
swagger:model GetUserRequestInternalServerErrorBody
*/
type GetUserRequestInternalServerErrorBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this get user request internal server error body
func (o *GetUserRequestInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserRequestInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("getUserRequestInternalServerError"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserRequestInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserRequestInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetUserRequestInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserRequestNotAcceptableBody get user request not acceptable body
swagger:model GetUserRequestNotAcceptableBody
*/
type GetUserRequestNotAcceptableBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this get user request not acceptable body
func (o *GetUserRequestNotAcceptableBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserRequestNotAcceptableBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("getUserRequestNotAcceptable"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserRequestNotAcceptableBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserRequestNotAcceptableBody) UnmarshalBinary(b []byte) error {
	var res GetUserRequestNotAcceptableBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserRequestNotFoundBody get user request not found body
swagger:model GetUserRequestNotFoundBody
*/
type GetUserRequestNotFoundBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this get user request not found body
func (o *GetUserRequestNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserRequestNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("getUserRequestNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserRequestNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserRequestNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetUserRequestNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserRequestOKBody get user request o k body
swagger:model GetUserRequestOKBody
*/
type GetUserRequestOKBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// user
	// Required: true
	User *models.UserORM `json:"user"`
}

// Validate validates this get user request o k body
func (o *GetUserRequestOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserRequestOKBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("getUserRequestOK"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *GetUserRequestOKBody) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("getUserRequestOK"+"."+"user", "body", o.User); err != nil {
		return err
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getUserRequestOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserRequestOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserRequestOKBody) UnmarshalBinary(b []byte) error {
	var res GetUserRequestOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetUserRequestUnauthorizedBody get user request unauthorized body
swagger:model GetUserRequestUnauthorizedBody
*/
type GetUserRequestUnauthorizedBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this get user request unauthorized body
func (o *GetUserRequestUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserRequestUnauthorizedBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("getUserRequestUnauthorized"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserRequestUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserRequestUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetUserRequestUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
