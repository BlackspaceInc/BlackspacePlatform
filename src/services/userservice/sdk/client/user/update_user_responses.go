// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
)

// UpdateUserReader is a Reader for the UpdateUser structure.
type UpdateUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewUpdateUserNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateUserOK creates a UpdateUserOK with default headers values
func NewUpdateUserOK() *UpdateUserOK {
	return &UpdateUserOK{}
}

/*UpdateUserOK handles this case with default header values.

Common operation response
*/
type UpdateUserOK struct {
	Payload *UpdateUserOKBody
}

func (o *UpdateUserOK) Error() string {
	return fmt.Sprintf("[PUT /v1/user/{id}][%d] updateUserOK  %+v", 200, o.Payload)
}

func (o *UpdateUserOK) GetPayload() *UpdateUserOKBody {
	return o.Payload
}

func (o *UpdateUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserBadRequest creates a UpdateUserBadRequest with default headers values
func NewUpdateUserBadRequest() *UpdateUserBadRequest {
	return &UpdateUserBadRequest{}
}

/*UpdateUserBadRequest handles this case with default header values.

Bad Request
*/
type UpdateUserBadRequest struct {
	Payload *UpdateUserBadRequestBody
}

func (o *UpdateUserBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/user/{id}][%d] updateUserBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserBadRequest) GetPayload() *UpdateUserBadRequestBody {
	return o.Payload
}

func (o *UpdateUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserUnauthorized creates a UpdateUserUnauthorized with default headers values
func NewUpdateUserUnauthorized() *UpdateUserUnauthorized {
	return &UpdateUserUnauthorized{}
}

/*UpdateUserUnauthorized handles this case with default header values.

UnAuthorized Request
*/
type UpdateUserUnauthorized struct {
	Payload *UpdateUserUnauthorizedBody
}

func (o *UpdateUserUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/user/{id}][%d] updateUserUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateUserUnauthorized) GetPayload() *UpdateUserUnauthorizedBody {
	return o.Payload
}

func (o *UpdateUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserForbidden creates a UpdateUserForbidden with default headers values
func NewUpdateUserForbidden() *UpdateUserForbidden {
	return &UpdateUserForbidden{}
}

/*UpdateUserForbidden handles this case with default header values.

Forbidden Request
*/
type UpdateUserForbidden struct {
	Payload *UpdateUserForbiddenBody
}

func (o *UpdateUserForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/user/{id}][%d] updateUserForbidden  %+v", 403, o.Payload)
}

func (o *UpdateUserForbidden) GetPayload() *UpdateUserForbiddenBody {
	return o.Payload
}

func (o *UpdateUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserNotFound creates a UpdateUserNotFound with default headers values
func NewUpdateUserNotFound() *UpdateUserNotFound {
	return &UpdateUserNotFound{}
}

/*UpdateUserNotFound handles this case with default header values.

Request Not Found
*/
type UpdateUserNotFound struct {
	Payload *UpdateUserNotFoundBody
}

func (o *UpdateUserNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/user/{id}][%d] updateUserNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUserNotFound) GetPayload() *UpdateUserNotFoundBody {
	return o.Payload
}

func (o *UpdateUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserNotAcceptable creates a UpdateUserNotAcceptable with default headers values
func NewUpdateUserNotAcceptable() *UpdateUserNotAcceptable {
	return &UpdateUserNotAcceptable{}
}

/*UpdateUserNotAcceptable handles this case with default header values.

Error occured during request lifecycle
*/
type UpdateUserNotAcceptable struct {
	Payload *UpdateUserNotAcceptableBody
}

func (o *UpdateUserNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /v1/user/{id}][%d] updateUserNotAcceptable  %+v", 406, o.Payload)
}

func (o *UpdateUserNotAcceptable) GetPayload() *UpdateUserNotAcceptableBody {
	return o.Payload
}

func (o *UpdateUserNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserNotAcceptableBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserInternalServerError creates a UpdateUserInternalServerError with default headers values
func NewUpdateUserInternalServerError() *UpdateUserInternalServerError {
	return &UpdateUserInternalServerError{}
}

/*UpdateUserInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateUserInternalServerError struct {
	Payload *UpdateUserInternalServerErrorBody
}

func (o *UpdateUserInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/user/{id}][%d] updateUserInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateUserInternalServerError) GetPayload() *UpdateUserInternalServerErrorBody {
	return o.Payload
}

func (o *UpdateUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateUserBadRequestBody update user bad request body
swagger:model UpdateUserBadRequestBody
*/
type UpdateUserBadRequestBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this update user bad request body
func (o *UpdateUserBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserBadRequestBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("updateUserBadRequest"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserBody update user body
swagger:model UpdateUserBody
*/
type UpdateUserBody struct {

	// result
	// Required: true
	Result *models.User `json:"result"`
}

// Validate validates this update user body
func (o *UpdateUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserBody) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"result", "body", o.Result); err != nil {
		return err
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Body" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserForbiddenBody update user forbidden body
swagger:model UpdateUserForbiddenBody
*/
type UpdateUserForbiddenBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this update user forbidden body
func (o *UpdateUserForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserForbiddenBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("updateUserForbidden"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserInternalServerErrorBody update user internal server error body
swagger:model UpdateUserInternalServerErrorBody
*/
type UpdateUserInternalServerErrorBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this update user internal server error body
func (o *UpdateUserInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("updateUserInternalServerError"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserNotAcceptableBody update user not acceptable body
swagger:model UpdateUserNotAcceptableBody
*/
type UpdateUserNotAcceptableBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this update user not acceptable body
func (o *UpdateUserNotAcceptableBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserNotAcceptableBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("updateUserNotAcceptable"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserNotAcceptableBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserNotAcceptableBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserNotAcceptableBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserNotFoundBody update user not found body
swagger:model UpdateUserNotFoundBody
*/
type UpdateUserNotFoundBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this update user not found body
func (o *UpdateUserNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("updateUserNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserNotFoundBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserOKBody update user o k body
swagger:model UpdateUserOKBody
*/
type UpdateUserOKBody struct {

	// error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this update user o k body
func (o *UpdateUserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserOKBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("updateUserOK"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserUnauthorizedBody update user unauthorized body
swagger:model UpdateUserUnauthorizedBody
*/
type UpdateUserUnauthorizedBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this update user unauthorized body
func (o *UpdateUserUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserUnauthorizedBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("updateUserUnauthorized"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
