// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateSwaggerUserParams creates a new UpdateSwaggerUserParams object
// with the default values initialized.
func NewUpdateSwaggerUserParams() *UpdateSwaggerUserParams {
	var ()
	return &UpdateSwaggerUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSwaggerUserParamsWithTimeout creates a new UpdateSwaggerUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateSwaggerUserParamsWithTimeout(timeout time.Duration) *UpdateSwaggerUserParams {
	var ()
	return &UpdateSwaggerUserParams{

		timeout: timeout,
	}
}

// NewUpdateSwaggerUserParamsWithContext creates a new UpdateSwaggerUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateSwaggerUserParamsWithContext(ctx context.Context) *UpdateSwaggerUserParams {
	var ()
	return &UpdateSwaggerUserParams{

		Context: ctx,
	}
}

// NewUpdateSwaggerUserParamsWithHTTPClient creates a new UpdateSwaggerUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateSwaggerUserParamsWithHTTPClient(client *http.Client) *UpdateSwaggerUserParams {
	var ()
	return &UpdateSwaggerUserParams{
		HTTPClient: client,
	}
}

/*UpdateSwaggerUserParams contains all the parameters to send to the API endpoint
for the update swagger user operation typically these are written to a http.Request
*/
type UpdateSwaggerUserParams struct {

	/*Body
	  user account to create

	*/
	Body UpdateSwaggerUserBody
	/*UserAccountID
	  user id of account to update

	*/
	UserAccountID *uint32
	/*ID
	  The id of the product for which the operation relates

	*/
	ID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update swagger user params
func (o *UpdateSwaggerUserParams) WithTimeout(timeout time.Duration) *UpdateSwaggerUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update swagger user params
func (o *UpdateSwaggerUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update swagger user params
func (o *UpdateSwaggerUserParams) WithContext(ctx context.Context) *UpdateSwaggerUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update swagger user params
func (o *UpdateSwaggerUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update swagger user params
func (o *UpdateSwaggerUserParams) WithHTTPClient(client *http.Client) *UpdateSwaggerUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update swagger user params
func (o *UpdateSwaggerUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update swagger user params
func (o *UpdateSwaggerUserParams) WithBody(body UpdateSwaggerUserBody) *UpdateSwaggerUserParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update swagger user params
func (o *UpdateSwaggerUserParams) SetBody(body UpdateSwaggerUserBody) {
	o.Body = body
}

// WithUserAccountID adds the userAccountID to the update swagger user params
func (o *UpdateSwaggerUserParams) WithUserAccountID(userAccountID *uint32) *UpdateSwaggerUserParams {
	o.SetUserAccountID(userAccountID)
	return o
}

// SetUserAccountID adds the userAccountId to the update swagger user params
func (o *UpdateSwaggerUserParams) SetUserAccountID(userAccountID *uint32) {
	o.UserAccountID = userAccountID
}

// WithID adds the id to the update swagger user params
func (o *UpdateSwaggerUserParams) WithID(id int64) *UpdateSwaggerUserParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update swagger user params
func (o *UpdateSwaggerUserParams) SetID(id int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSwaggerUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.UserAccountID != nil {

		// query param UserAccountId
		var qrUserAccountID uint32
		if o.UserAccountID != nil {
			qrUserAccountID = *o.UserAccountID
		}
		qUserAccountID := swag.FormatUint32(qrUserAccountID)
		if qUserAccountID != "" {
			if err := r.SetQueryParam("UserAccountId", qUserAccountID); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
