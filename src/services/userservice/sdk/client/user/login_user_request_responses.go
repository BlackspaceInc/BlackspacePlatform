// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// LoginUserRequestReader is a Reader for the LoginUserRequest structure.
type LoginUserRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginUserRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginUserRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLoginUserRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLoginUserRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLoginUserRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewLoginUserRequestNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLoginUserRequestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewLoginUserRequestOK creates a LoginUserRequestOK with default headers values
func NewLoginUserRequestOK() *LoginUserRequestOK {
	return &LoginUserRequestOK{}
}

/*LoginUserRequestOK handles this case with default header values.

Log in user response
*/
type LoginUserRequestOK struct {
	Payload *LoginUserRequestOKBody
}

func (o *LoginUserRequestOK) Error() string {
	return fmt.Sprintf("[POST /v1/user/login][%d] loginUserRequestOK  %+v", 200, o.Payload)
}

func (o *LoginUserRequestOK) GetPayload() *LoginUserRequestOKBody {
	return o.Payload
}

func (o *LoginUserRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LoginUserRequestOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUserRequestBadRequest creates a LoginUserRequestBadRequest with default headers values
func NewLoginUserRequestBadRequest() *LoginUserRequestBadRequest {
	return &LoginUserRequestBadRequest{}
}

/*LoginUserRequestBadRequest handles this case with default header values.

Bad Request
*/
type LoginUserRequestBadRequest struct {
	Payload *LoginUserRequestBadRequestBody
}

func (o *LoginUserRequestBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/user/login][%d] loginUserRequestBadRequest  %+v", 400, o.Payload)
}

func (o *LoginUserRequestBadRequest) GetPayload() *LoginUserRequestBadRequestBody {
	return o.Payload
}

func (o *LoginUserRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LoginUserRequestBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUserRequestForbidden creates a LoginUserRequestForbidden with default headers values
func NewLoginUserRequestForbidden() *LoginUserRequestForbidden {
	return &LoginUserRequestForbidden{}
}

/*LoginUserRequestForbidden handles this case with default header values.

Forbidden Request
*/
type LoginUserRequestForbidden struct {
	Payload *LoginUserRequestForbiddenBody
}

func (o *LoginUserRequestForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/user/login][%d] loginUserRequestForbidden  %+v", 403, o.Payload)
}

func (o *LoginUserRequestForbidden) GetPayload() *LoginUserRequestForbiddenBody {
	return o.Payload
}

func (o *LoginUserRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LoginUserRequestForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUserRequestNotFound creates a LoginUserRequestNotFound with default headers values
func NewLoginUserRequestNotFound() *LoginUserRequestNotFound {
	return &LoginUserRequestNotFound{}
}

/*LoginUserRequestNotFound handles this case with default header values.

Request Not Found
*/
type LoginUserRequestNotFound struct {
	Payload *LoginUserRequestNotFoundBody
}

func (o *LoginUserRequestNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/user/login][%d] loginUserRequestNotFound  %+v", 404, o.Payload)
}

func (o *LoginUserRequestNotFound) GetPayload() *LoginUserRequestNotFoundBody {
	return o.Payload
}

func (o *LoginUserRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LoginUserRequestNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUserRequestNotAcceptable creates a LoginUserRequestNotAcceptable with default headers values
func NewLoginUserRequestNotAcceptable() *LoginUserRequestNotAcceptable {
	return &LoginUserRequestNotAcceptable{}
}

/*LoginUserRequestNotAcceptable handles this case with default header values.

Error occured during request lifecycle
*/
type LoginUserRequestNotAcceptable struct {
	Payload *LoginUserRequestNotAcceptableBody
}

func (o *LoginUserRequestNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /v1/user/login][%d] loginUserRequestNotAcceptable  %+v", 406, o.Payload)
}

func (o *LoginUserRequestNotAcceptable) GetPayload() *LoginUserRequestNotAcceptableBody {
	return o.Payload
}

func (o *LoginUserRequestNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LoginUserRequestNotAcceptableBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUserRequestInternalServerError creates a LoginUserRequestInternalServerError with default headers values
func NewLoginUserRequestInternalServerError() *LoginUserRequestInternalServerError {
	return &LoginUserRequestInternalServerError{}
}

/*LoginUserRequestInternalServerError handles this case with default header values.

Internal Server Error
*/
type LoginUserRequestInternalServerError struct {
	Payload *LoginUserRequestInternalServerErrorBody
}

func (o *LoginUserRequestInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/user/login][%d] loginUserRequestInternalServerError  %+v", 500, o.Payload)
}

func (o *LoginUserRequestInternalServerError) GetPayload() *LoginUserRequestInternalServerErrorBody {
	return o.Payload
}

func (o *LoginUserRequestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LoginUserRequestInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*LoginUserRequestBadRequestBody login user request bad request body
swagger:model LoginUserRequestBadRequestBody
*/
type LoginUserRequestBadRequestBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this login user request bad request body
func (o *LoginUserRequestBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginUserRequestBadRequestBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("loginUserRequestBadRequest"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *LoginUserRequestBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginUserRequestBadRequestBody) UnmarshalBinary(b []byte) error {
	var res LoginUserRequestBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LoginUserRequestBody login user request body
swagger:model LoginUserRequestBody
*/
type LoginUserRequestBody struct {

	// password
	// Required: true
	Password *string `json:"password"`

	// user name
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this login user request body
func (o *LoginUserRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginUserRequestBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

func (o *LoginUserRequestBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *LoginUserRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginUserRequestBody) UnmarshalBinary(b []byte) error {
	var res LoginUserRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LoginUserRequestForbiddenBody login user request forbidden body
swagger:model LoginUserRequestForbiddenBody
*/
type LoginUserRequestForbiddenBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this login user request forbidden body
func (o *LoginUserRequestForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginUserRequestForbiddenBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("loginUserRequestForbidden"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *LoginUserRequestForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginUserRequestForbiddenBody) UnmarshalBinary(b []byte) error {
	var res LoginUserRequestForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LoginUserRequestInternalServerErrorBody login user request internal server error body
swagger:model LoginUserRequestInternalServerErrorBody
*/
type LoginUserRequestInternalServerErrorBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this login user request internal server error body
func (o *LoginUserRequestInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginUserRequestInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("loginUserRequestInternalServerError"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *LoginUserRequestInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginUserRequestInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res LoginUserRequestInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LoginUserRequestNotAcceptableBody login user request not acceptable body
swagger:model LoginUserRequestNotAcceptableBody
*/
type LoginUserRequestNotAcceptableBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this login user request not acceptable body
func (o *LoginUserRequestNotAcceptableBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginUserRequestNotAcceptableBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("loginUserRequestNotAcceptable"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *LoginUserRequestNotAcceptableBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginUserRequestNotAcceptableBody) UnmarshalBinary(b []byte) error {
	var res LoginUserRequestNotAcceptableBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LoginUserRequestNotFoundBody login user request not found body
swagger:model LoginUserRequestNotFoundBody
*/
type LoginUserRequestNotFoundBody struct {

	// description of the error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this login user request not found body
func (o *LoginUserRequestNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginUserRequestNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("loginUserRequestNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *LoginUserRequestNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginUserRequestNotFoundBody) UnmarshalBinary(b []byte) error {
	var res LoginUserRequestNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LoginUserRequestOKBody login user request o k body
swagger:model LoginUserRequestOKBody
*/
type LoginUserRequestOKBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// Jwt Token
	// Required: true
	JwtToken *string `json:"token"`
}

// Validate validates this login user request o k body
func (o *LoginUserRequestOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateJwtToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginUserRequestOKBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("loginUserRequestOK"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *LoginUserRequestOKBody) validateJwtToken(formats strfmt.Registry) error {

	if err := validate.Required("loginUserRequestOK"+"."+"token", "body", o.JwtToken); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *LoginUserRequestOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginUserRequestOKBody) UnmarshalBinary(b []byte) error {
	var res LoginUserRequestOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
