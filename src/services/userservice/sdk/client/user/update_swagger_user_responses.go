// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
)

// UpdateSwaggerUserReader is a Reader for the UpdateSwaggerUser structure.
type UpdateSwaggerUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSwaggerUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSwaggerUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateSwaggerUserOK creates a UpdateSwaggerUserOK with default headers values
func NewUpdateSwaggerUserOK() *UpdateSwaggerUserOK {
	return &UpdateSwaggerUserOK{}
}

/*UpdateSwaggerUserOK handles this case with default header values.

Common operation response
*/
type UpdateSwaggerUserOK struct {
	Payload *UpdateSwaggerUserOKBody
}

func (o *UpdateSwaggerUserOK) Error() string {
	return fmt.Sprintf("[PUT /v1/user/{id}][%d] updateSwaggerUserOK  %+v", 200, o.Payload)
}

func (o *UpdateSwaggerUserOK) GetPayload() *UpdateSwaggerUserOKBody {
	return o.Payload
}

func (o *UpdateSwaggerUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateSwaggerUserOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateSwaggerUserBody update swagger user body
swagger:model UpdateSwaggerUserBody
*/
type UpdateSwaggerUserBody struct {

	// result
	// Required: true
	Result *models.User `json:"result"`
}

// Validate validates this update swagger user body
func (o *UpdateSwaggerUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSwaggerUserBody) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("Body"+"."+"result", "body", o.Result); err != nil {
		return err
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Body" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSwaggerUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSwaggerUserBody) UnmarshalBinary(b []byte) error {
	var res UpdateSwaggerUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateSwaggerUserOKBody update swagger user o k body
swagger:model UpdateSwaggerUserOKBody
*/
type UpdateSwaggerUserOKBody struct {

	// error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this update swagger user o k body
func (o *UpdateSwaggerUserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateSwaggerUserOKBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("updateSwaggerUserOK"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateSwaggerUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateSwaggerUserOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateSwaggerUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
