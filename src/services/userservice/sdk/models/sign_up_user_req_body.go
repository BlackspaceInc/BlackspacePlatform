// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignUpUserReqBody SignUpUserReqBody sign up user req body
// swagger:model SignUpUserReqBody
type SignUpUserReqBody struct {

	// user email address to create
	// Required: true
	Email *string `json:"email"`

	// user first name
	// Required: true
	FirstName *string `json:"firstname"`

	// user last name
	// Required: true
	LastName *string `json:"lastname"`

	// user password to create
	// Required: true
	Password *string `json:"password"`

	// user username to create
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this sign up user req body
func (m *SignUpUserReqBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignUpUserReqBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *SignUpUserReqBody) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstname", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *SignUpUserReqBody) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastname", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *SignUpUserReqBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *SignUpUserReqBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SignUpUserReqBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SignUpUserReqBody) UnmarshalBinary(b []byte) error {
	var res SignUpUserReqBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
