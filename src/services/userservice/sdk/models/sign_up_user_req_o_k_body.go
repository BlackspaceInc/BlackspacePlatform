// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignUpUserReqOKBody SignUpUserReqOKBody SignUpUserReqOKBody sign up user req o k body
// swagger:model SignUpUserReqOKBody
type SignUpUserReqOKBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// user account id
	// Required: true
	ID *uint32 `json:"id"`

	// JWT Token
	// Required: true
	JwtToken *string `json:"jwt"`
}

// Validate validates this sign up user req o k body
func (m *SignUpUserReqOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJwtToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignUpUserReqOKBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

func (m *SignUpUserReqOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SignUpUserReqOKBody) validateJwtToken(formats strfmt.Registry) error {

	if err := validate.Required("jwt", "body", m.JwtToken); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SignUpUserReqOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SignUpUserReqOKBody) UnmarshalBinary(b []byte) error {
	var res SignUpUserReqOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
