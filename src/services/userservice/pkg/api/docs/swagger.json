{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This serves as the user's microservice api definition for the BlackSpace Platform",
    "title": "Backend API.",
    "termsOfService": "there are no TOS at this moment, use at your own risk we take no responsibility",
    "contact": {
      "name": "Yoan Yomba",
      "url": "http://BlackSpace.com",
      "email": "yoanyombapro@gmail.com.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/v1",
  "paths": {
    "/v1/user/login": {
      "post": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Logs in a user into the system",
        "consumes": [
          "application/json",
          "application/x-protobuf"
        ],
        "produces": [
          "application/json",
          "application/x-protobuf"
        ],
        "schemes": [
          "http",
          "https",
          "ws",
          "wss"
        ],
        "tags": [
          "User"
        ],
        "summary": "Log in user",
        "operationId": "loginUserRequest",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "username",
                "password"
              ],
              "properties": {
                "password": {
                  "description": "password",
                  "type": "string",
                  "x-go-name": "Password",
                  "example": "test-password"
                },
                "username": {
                  "description": "user name",
                  "type": "string",
                  "x-go-name": "Username",
                  "example": "test-username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/loginUserResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "406": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/v1/user/signup": {
      "post": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": [
              "read",
              "write"
            ]
          }
        ],
        "description": "creates a user account object in the backend database",
        "consumes": [
          "application/json",
          "application/x-protobuf"
        ],
        "produces": [
          "application/json",
          "application/x-protobuf"
        ],
        "schemes": [
          "http",
          "https",
          "ws",
          "wss"
        ],
        "tags": [
          "User"
        ],
        "summary": "Sign Up User",
        "operationId": "signUpUserReq",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "email",
                "firstname",
                "lastname",
                "username",
                "password"
              ],
              "properties": {
                "email": {
                  "description": "user email address to create",
                  "type": "string",
                  "x-go-name": "Email"
                },
                "firstname": {
                  "description": "user first name",
                  "type": "string",
                  "x-go-name": "FirstName"
                },
                "lastname": {
                  "description": "user last name",
                  "type": "string",
                  "x-go-name": "LastName"
                },
                "password": {
                  "description": "user password to create",
                  "type": "string",
                  "x-go-name": "Password"
                },
                "username": {
                  "description": "user username to create",
                  "type": "string",
                  "x-go-name": "Username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/signUpUserResp"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "406": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/v1/user/{id}": {
      "get": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Returns a user account by id",
        "consumes": [
          "application/json",
          "application/x-protobuf"
        ],
        "produces": [
          "application/json",
          "application/x-protobuf"
        ],
        "schemes": [
          "http",
          "https",
          "ws",
          "wss"
        ],
        "tags": [
          "User"
        ],
        "summary": "Get User Account By ID",
        "operationId": "getUserRequest",
        "parameters": [
          {
            "description": "user account to create",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "result"
              ],
              "properties": {
                "result": {
                  "description": "id of the user account to get\nin: query",
                  "type": "integer",
                  "format": "uint32",
                  "x-go-name": "Id"
                }
              }
            }
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The id of the product for which the operation relates",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getUserResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unAuthorizedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "406": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "put": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Updates a user account present in the backend database",
        "consumes": [
          "application/json",
          "application/x-protobuf"
        ],
        "produces": [
          "application/json",
          "application/x-protobuf"
        ],
        "schemes": [
          "http",
          "https",
          "ws",
          "wss"
        ],
        "tags": [
          "User"
        ],
        "summary": "Update User Account",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "user account to create",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "result"
              ],
              "properties": {
                "result": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          {
            "type": "integer",
            "format": "uint32",
            "description": "user id of account to update",
            "name": "UserAccountId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The id of the product for which the operation relates",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/operationResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unAuthorizedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "406": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "api_key": []
          },
          {
            "oauth": [
              "read",
              "write"
            ]
          }
        ],
        "description": "Deletes a user account present in the backend database",
        "consumes": [
          "application/json",
          "application/x-protobuf"
        ],
        "produces": [
          "application/json",
          "application/x-protobuf"
        ],
        "schemes": [
          "http",
          "https",
          "ws",
          "wss"
        ],
        "tags": [
          "User"
        ],
        "summary": "Delete User Account",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "integer",
            "format": "uint32",
            "x-go-name": "Id",
            "description": "id of the user account to delete",
            "name": "result",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The id of the product for which the operation relates",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/operationResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unAuthorizedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "406": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    }
  },
  "definitions": {
    "DateTime": {
      "description": "DateTime is a time but it serializes to ISO8601 format with millis\nIt knows how to read 3 different variations of a RFC3339 date time.\nMost APIs we encounter want either millisecond or second precision times.\nThis just tries to make it worry-free.",
      "type": "string",
      "format": "date-time",
      "x-go-package": "github.com/go-openapi/strfmt"
    },
    "DeleteUserBadRequestBody": {
      "description": "DeleteUserBadRequestBody DeleteUserBadRequestBody DeleteUserBadRequestBody DeleteUserBadRequestBody delete user bad request body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "DeleteUserForbiddenBody": {
      "description": "DeleteUserForbiddenBody delete user forbidden body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "DeleteUserInternalServerErrorBody": {
      "description": "DeleteUserInternalServerErrorBody delete user internal server error body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "DeleteUserNotAcceptableBody": {
      "description": "DeleteUserNotAcceptableBody DeleteUserNotAcceptableBody DeleteUserNotAcceptableBody delete user not acceptable body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "DeleteUserNotFoundBody": {
      "description": "DeleteUserNotFoundBody delete user not found body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "DeleteUserOKBody": {
      "description": "DeleteUserOKBody delete user o k body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "DeleteUserUnauthorizedBody": {
      "description": "DeleteUserUnauthorizedBody delete user unauthorized body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "Gender": {
      "description": "Gender Gender Gender Gender Gender Gender Gender Gender Gender gender",
      "type": "object",
      "properties": {
        "female": {
          "description": "female",
          "type": "boolean",
          "x-go-name": "Female"
        },
        "genderNonBinary": {
          "description": "gender non binary",
          "type": "boolean",
          "x-go-name": "GenderNonBinary"
        },
        "male": {
          "description": "male",
          "type": "boolean",
          "x-go-name": "Male"
        },
        "transgender": {
          "description": "transgender",
          "type": "boolean",
          "x-go-name": "Transgender"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "GetUserRequestBadRequestBody": {
      "description": "GetUserRequestBadRequestBody GetUserRequestBadRequestBody get user request bad request body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "GetUserRequestBody": {
      "description": "GetUserRequestBody get user request body",
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "description": "id of the user account to get\nin: query",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "GetUserRequestForbiddenBody": {
      "description": "GetUserRequestForbiddenBody GetUserRequestForbiddenBody get user request forbidden body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "GetUserRequestInternalServerErrorBody": {
      "description": "GetUserRequestInternalServerErrorBody GetUserRequestInternalServerErrorBody get user request internal server error body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "GetUserRequestNotAcceptableBody": {
      "description": "GetUserRequestNotAcceptableBody get user request not acceptable body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "GetUserRequestNotFoundBody": {
      "description": "GetUserRequestNotFoundBody GetUserRequestNotFoundBody GetUserRequestNotFoundBody GetUserRequestNotFoundBody get user request not found body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "GetUserRequestOKBody": {
      "description": "GetUserRequestOKBody GetUserRequestOKBody GetUserRequestOKBody GetUserRequestOKBody get user request o k body",
      "type": "object",
      "required": [
        "error",
        "user"
      ],
      "properties": {
        "error": {
          "description": "error",
          "type": "string",
          "x-go-name": "Error"
        },
        "user": {
          "$ref": "#/definitions/UserORM"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "GetUserRequestUnauthorizedBody": {
      "description": "GetUserRequestUnauthorizedBody get user request unauthorized body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "LoginUserRequestBadRequestBody": {
      "description": "LoginUserRequestBadRequestBody LoginUserRequestBadRequestBody LoginUserRequestBadRequestBody login user request bad request body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "LoginUserRequestBody": {
      "description": "LoginUserRequestBody LoginUserRequestBody login user request body",
      "type": "object",
      "required": [
        "password",
        "username"
      ],
      "properties": {
        "password": {
          "description": "password",
          "type": "string",
          "x-go-name": "Password"
        },
        "username": {
          "description": "user name",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "LoginUserRequestForbiddenBody": {
      "description": "LoginUserRequestForbiddenBody login user request forbidden body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "LoginUserRequestInternalServerErrorBody": {
      "description": "LoginUserRequestInternalServerErrorBody LoginUserRequestInternalServerErrorBody login user request internal server error body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "LoginUserRequestNotAcceptableBody": {
      "description": "LoginUserRequestNotAcceptableBody login user request not acceptable body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "LoginUserRequestNotFoundBody": {
      "description": "LoginUserRequestNotFoundBody login user request not found body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "LoginUserRequestOKBody": {
      "description": "LoginUserRequestOKBody login user request o k body",
      "type": "object",
      "required": [
        "error",
        "token"
      ],
      "properties": {
        "error": {
          "description": "error",
          "type": "string",
          "x-go-name": "Error"
        },
        "token": {
          "description": "Jwt Token",
          "type": "string",
          "x-go-name": "JwtToken"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "LoginUserRequestUnauthorizedBody": {
      "description": "LoginUserRequestUnauthorizedBody LoginUserRequestUnauthorizedBody LoginUserRequestUnauthorizedBody LoginUserRequestUnauthorizedBody LoginUserRequestUnauthorizedBody login user request unauthorized body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "SignUpUserReqBadRequestBody": {
      "description": "SignUpUserReqBadRequestBody sign up user req bad request body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "SignUpUserReqBody": {
      "description": "SignUpUserReqBody SignUpUserReqBody sign up user req body",
      "type": "object",
      "required": [
        "email",
        "firstname",
        "lastname",
        "password",
        "username"
      ],
      "properties": {
        "email": {
          "description": "user email address to create",
          "type": "string",
          "x-go-name": "Email"
        },
        "firstname": {
          "description": "user first name",
          "type": "string",
          "x-go-name": "FirstName"
        },
        "lastname": {
          "description": "user last name",
          "type": "string",
          "x-go-name": "LastName"
        },
        "password": {
          "description": "user password to create",
          "type": "string",
          "x-go-name": "Password"
        },
        "username": {
          "description": "user username to create",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "SignUpUserReqForbiddenBody": {
      "description": "SignUpUserReqForbiddenBody SignUpUserReqForbiddenBody SignUpUserReqForbiddenBody SignUpUserReqForbiddenBody SignUpUserReqForbiddenBody SignUpUserReqForbiddenBody SignUpUserReqForbiddenBody sign up user req forbidden body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "SignUpUserReqInternalServerErrorBody": {
      "description": "SignUpUserReqInternalServerErrorBody sign up user req internal server error body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "SignUpUserReqNotAcceptableBody": {
      "description": "SignUpUserReqNotAcceptableBody sign up user req not acceptable body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "SignUpUserReqNotFoundBody": {
      "description": "SignUpUserReqNotFoundBody SignUpUserReqNotFoundBody sign up user req not found body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "SignUpUserReqOKBody": {
      "description": "SignUpUserReqOKBody sign up user req o k body",
      "type": "object",
      "required": [
        "error",
        "id",
        "jwt"
      ],
      "properties": {
        "error": {
          "description": "error",
          "type": "string",
          "x-go-name": "Error"
        },
        "id": {
          "description": "user account id",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ID"
        },
        "jwt": {
          "description": "JWT Token",
          "type": "string",
          "x-go-name": "JwtToken"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "SignUpUserReqUnauthorizedBody": {
      "description": "SignUpUserReqUnauthorizedBody SignUpUserReqUnauthorizedBody SignUpUserReqUnauthorizedBody SignUpUserReqUnauthorizedBody SignUpUserReqUnauthorizedBody sign up user req unauthorized body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "Timestamp": {
      "description": "All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\nsecond table is needed for interpretation, using a [24-hour linear\nsmear](https://developers.google.com/time/smear).\n\nThe range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\nrestricting to that range, we ensure that we can convert to and from [RFC\n3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n\n# Examples\n\nExample 1: Compute Timestamp from POSIX `time()`.\n\nTimestamp timestamp;\ntimestamp.set_seconds(time(NULL));\ntimestamp.set_nanos(0);\n\nExample 2: Compute Timestamp from POSIX `gettimeofday()`.\n\nstruct timeval tv;\ngettimeofday(\u0026tv, NULL);\n\nTimestamp timestamp;\ntimestamp.set_seconds(tv.tv_sec);\ntimestamp.set_nanos(tv.tv_usec * 1000);\n\nExample 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n\nFILETIME ft;\nGetSystemTimeAsFileTime(\u0026ft);\nUINT64 ticks = (((UINT64)ft.dwHighDateTime) \u003c\u003c 32) | ft.dwLowDateTime;\n\nA Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\nis 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\nTimestamp timestamp;\ntimestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\ntimestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n\nExample 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n\nlong millis = System.currentTimeMillis();\n\nTimestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n.setNanos((int) ((millis % 1000) * 1000000)).build();\n\n\nExample 5: Compute Timestamp from current time in Python.\n\ntimestamp = Timestamp()\ntimestamp.GetCurrentTime()\n\n# JSON Mapping\n\nIn JSON format, the Timestamp type is encoded as a string in the\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\nformat is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\nwhere {year} is always expressed using four digits while {month}, {day},\n{hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\nseconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\nare optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\nis required. A proto3 JSON serializer should always use UTC (as indicated by\n\"Z\") when printing the Timestamp type and a proto3 JSON parser should be\nable to accept both UTC and other timezones (as indicated by an offset).\n\nFor example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n01:30 UTC on January 15, 2017.\n\nIn JavaScript, one can convert a Date object to this format using the\nstandard\n[toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\nmethod. In Python, a standard `datetime.datetime` object can be converted\nto this format using\n[`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\nthe time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\nthe Joda Time's [`ISODateTimeFormat.dateTime()`](\nhttp://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D\n) to obtain a formatter capable of generating timestamps in this format.",
      "type": "object",
      "title": "Timestamp Timestamp Timestamp Timestamp Timestamp Timestamp Timestamp Timestamp Timestamp A Timestamp represents a point in time independent of any time zone or local\ncalendar, encoded as a count of seconds and fractions of seconds at\nnanosecond resolution. The count is relative to an epoch at UTC midnight on\nJanuary 1, 1970, in the proleptic Gregorian calendar which extends the\nGregorian calendar backwards to year one.",
      "properties": {
        "nanos": {
          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Nanos"
        },
        "seconds": {
          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Seconds"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "UpdateSwaggerUserBody": {
      "description": "UpdateSwaggerUserBody UpdateSwaggerUserBody UpdateSwaggerUserBody update swagger user body",
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "UpdateSwaggerUserOKBody": {
      "description": "UpdateSwaggerUserOKBody UpdateSwaggerUserOKBody update swagger user o k body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "UpdateUserBadRequestBody": {
      "description": "UpdateUserBadRequestBody UpdateUserBadRequestBody update user bad request body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "UpdateUserBody": {
      "description": "UpdateUserBody UpdateUserBody UpdateUserBody update user body",
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "UpdateUserForbiddenBody": {
      "description": "UpdateUserForbiddenBody update user forbidden body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "UpdateUserInternalServerErrorBody": {
      "description": "UpdateUserInternalServerErrorBody update user internal server error body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "UpdateUserNotAcceptableBody": {
      "description": "UpdateUserNotAcceptableBody update user not acceptable body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "UpdateUserNotFoundBody": {
      "description": "UpdateUserNotFoundBody update user not found body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "UpdateUserOKBody": {
      "description": "UpdateUserOKBody UpdateUserOKBody UpdateUserOKBody update user o k body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "UpdateUserUnauthorizedBody": {
      "description": "UpdateUserUnauthorizedBody update user unauthorized body",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "description": "description of the error",
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/client/user"
    },
    "User": {
      "description": "User User User User User User User User User user",
      "type": "object",
      "properties": {
        "authnid": {
          "description": "authnid",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Authnid"
        },
        "birthDate": {
          "description": "birth date",
          "type": "string",
          "x-go-name": "BirthDate"
        },
        "created_at": {
          "$ref": "#/definitions/Timestamp"
        },
        "deleted_at": {
          "$ref": "#/definitions/Timestamp"
        },
        "email": {
          "description": "email",
          "type": "string",
          "x-go-name": "Email"
        },
        "firstName": {
          "description": "first name",
          "type": "string",
          "x-go-name": "FirstName"
        },
        "gender": {
          "$ref": "#/definitions/Gender"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ID"
        },
        "isActive": {
          "description": "is active",
          "type": "boolean",
          "x-go-name": "IsActive"
        },
        "isOnline": {
          "description": "is online",
          "type": "boolean",
          "x-go-name": "IsOnline"
        },
        "lastName": {
          "description": "last name",
          "type": "string",
          "x-go-name": "LastName"
        },
        "password": {
          "description": "password",
          "type": "string",
          "x-go-name": "Password"
        },
        "updated_at": {
          "$ref": "#/definitions/Timestamp"
        },
        "username": {
          "description": "username",
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    },
    "UserORM": {
      "description": "UserORM UserORM UserORM UserORM UserORM UserORM UserORM UserORM UserORM user o r m",
      "type": "object",
      "properties": {
        "Authnid": {
          "description": "authnid",
          "type": "integer",
          "format": "uint32"
        },
        "BirthDate": {
          "description": "birth date",
          "type": "string"
        },
        "CreatedAt": {
          "description": "created at\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time",
          "type": "string",
          "format": "date-time"
        },
        "DeletedAt": {
          "description": "deleted at\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time",
          "type": "string",
          "format": "date-time"
        },
        "Email": {
          "description": "email",
          "type": "string"
        },
        "FirstName": {
          "description": "first name",
          "type": "string"
        },
        "Id": {
          "description": "Id",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "ID"
        },
        "IsActive": {
          "description": "is active",
          "type": "boolean"
        },
        "IsOnline": {
          "description": "is online",
          "type": "boolean"
        },
        "LastName": {
          "description": "last name",
          "type": "string"
        },
        "Password": {
          "description": "password",
          "type": "string"
        },
        "UpdatedAt": {
          "description": "updated at\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time\nFormat: date-time",
          "type": "string",
          "format": "date-time"
        },
        "Username": {
          "description": "username",
          "type": "string"
        }
      },
      "x-go-package": "github.com/BlackspaceInc/Backend/user-management-service/sdk/models"
    }
  },
  "responses": {
    "badRequestError": {
      "description": "Bad Request",
      "schema": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "description": "description of the error",
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "forbiddenError": {
      "description": "Forbidden Request",
      "schema": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "description": "description of the error",
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "genericError": {
      "description": "Error occured during request lifecycle",
      "schema": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "description": "description of the error",
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "getUserResponse": {
      "description": "Common operation response",
      "schema": {
        "type": "object",
        "required": [
          "error",
          "user"
        ],
        "properties": {
          "error": {
            "description": "error",
            "type": "string",
            "x-go-name": "Error",
            "example": "error occured while processing request"
          },
          "user": {
            "$ref": "#/definitions/UserORM"
          }
        }
      }
    },
    "internalServerError": {
      "description": "Internal Server Error",
      "schema": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "description": "description of the error",
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "loginUserResponse": {
      "description": "Log in user response",
      "schema": {
        "type": "object",
        "required": [
          "token",
          "refresh_token",
          "error"
        ],
        "properties": {
          "error": {
            "description": "error",
            "type": "string",
            "x-go-name": "Error",
            "example": "unable to get token"
          },
          "refresh_token": {
            "description": "Refresh Token",
            "type": "string",
            "x-go-name": "RefreshToken",
            "example": "kBxbjzKVDjvasgvds.askdhjaskjdgsagjcdgc.asjdjkasfgdas"
          },
          "token": {
            "description": "Jwt Token",
            "type": "string",
            "x-go-name": "JwtToken",
            "example": "kBxbjzKVDjvasgvds.askdhjaskjdgsagjcdgc.asjdjkasfgdas"
          }
        }
      }
    },
    "notFoundError": {
      "description": "Request Not Found",
      "schema": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "description": "description of the error",
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "operationResponse": {
      "description": "OperationResponseSwagger Defines a common operation response",
      "schema": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "description": "error",
            "type": "string",
            "x-go-name": "Error",
            "example": "error occured while processing request"
          }
        }
      }
    },
    "signUpUserResp": {
      "description": "User Successfully signed up",
      "schema": {
        "type": "object",
        "required": [
          "id",
          "error"
        ],
        "properties": {
          "error": {
            "description": "error",
            "type": "string",
            "x-go-name": "Error",
            "example": "user already exists"
          },
          "id": {
            "description": "user account id",
            "type": "integer",
            "format": "uint32",
            "x-go-name": "Id",
            "example": 20
          }
        }
      }
    },
    "unAuthorizedError": {
      "description": "UnAuthorized Request",
      "schema": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "description": "description of the error",
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    }
  },
  "security": [
    {
      "api_key": []
    }
  ],
  "x-meta-array": [
    "value1",
    "value2"
  ],
  "x-meta-array-obj": [
    {
      "name": "obj",
      "value": "field"
    }
  ],
  "x-meta-value": "value"
}