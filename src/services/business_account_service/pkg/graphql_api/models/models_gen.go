// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"

	"github.com/BlackspaceInc/BlackspacePlatform/src/services/business_account_service/pkg/graphql_api/proto"
)

type Address struct {
	Address       *string      `json:"Address"`
	ApartmentUnit *string      `json:"ApartmentUnit"`
	ZipCode       *string      `json:"ZipCode"`
	City          *string      `json:"City"`
	State         *string      `json:"State"`
	Birthdate     *DateOfBirth `json:"birthdate"`
}

type BusinessType struct {
	Category    *BusinessCategory    `json:"category"`
	SubCategory *BusinessSubCategory `json:"subCategory"`
}

type CreateBusinessAccountRequest struct {
	BusinessAccount *proto.BusinessAccount `json:"businessAccount"`
	AuthnID         *int                   `json:"authnId"`
}

type DateOfBirth struct {
	Month *string `json:"Month"`
	Day   *string `json:"Day"`
	Year  *string `json:"Year"`
}

type DeleteBusinessAccountRequest struct {
	ID *int `json:"id"`
}

type DeleteBusinessAccountsRequest struct {
	ID []*int `json:"id"`
}

type GetBusinessAccountRequest struct {
	ID *int `json:"id"`
}

type GetBusinessAccountsRequest struct {
	Limit *int `json:"limit"`
}

type Media struct {
	ID        *int    `json:"id"`
	Website   *string `json:"website"`
	Instagram *string `json:"instagram"`
	Facebook  *string `json:"facebook"`
	LinkedIn  *string `json:"linkedIn"`
	Pinterest *string `json:"pinterest"`
}

type PaymentProcessingMethods struct {
	PaymentOptions []*PaymentOptions `json:"paymentOptions"`
	Medium         []*PaymentMedium  `json:"medium"`
}

type PhoneNumber struct {
	Number *string    `json:"number"`
	Type   *PhoneType `json:"type"`
}

type Topics struct {
	ID              *int  `json:"id"`
	Technology      *bool `json:"Technology"`
	Health          *bool `json:"Health"`
	Food            *bool `json:"Food"`
	Science         *bool `json:"Science"`
	Music           *bool `json:"Music"`
	Travel          *bool `json:"Travel"`
	Business        *bool `json:"Business"`
	Cooking         *bool `json:"Cooking"`
	FashionAndStyle *bool `json:"FashionAndStyle"`
	Design          *bool `json:"Design"`
	Art             *bool `json:"Art"`
}

type UpdateBusinessAccountRequest struct {
	ID              *int                   `json:"id"`
	BusinessAccount *proto.BusinessAccount `json:"businessAccount"`
}

type BusinessCategory string

const (
	BusinessCategoryBeautyAndPersonalCare        BusinessCategory = "BeautyAndPersonalCare"
	BusinessCategoryTech                         BusinessCategory = "Tech"
	BusinessCategoryCharitiesEducationMembership BusinessCategory = "CharitiesEducationMembership"
	BusinessCategoryFoodAndDrink                 BusinessCategory = "FoodAndDrink"
	BusinessCategoryHealthCareAndFitness         BusinessCategory = "HealthCareAndFitness"
	BusinessCategoryHomeAndRepair                BusinessCategory = "HomeAndRepair"
	BusinessCategoryLeisureAndEntertainment      BusinessCategory = "LeisureAndEntertainment"
	BusinessCategoryProfessionalServices         BusinessCategory = "ProfessionalServices"
	BusinessCategoryRetail                       BusinessCategory = "Retail"
	BusinessCategoryTransportation               BusinessCategory = "Transportation"
)

var AllBusinessCategory = []BusinessCategory{
	BusinessCategoryBeautyAndPersonalCare,
	BusinessCategoryTech,
	BusinessCategoryCharitiesEducationMembership,
	BusinessCategoryFoodAndDrink,
	BusinessCategoryHealthCareAndFitness,
	BusinessCategoryHomeAndRepair,
	BusinessCategoryLeisureAndEntertainment,
	BusinessCategoryProfessionalServices,
	BusinessCategoryRetail,
	BusinessCategoryTransportation,
}

func (e BusinessCategory) IsValid() bool {
	switch e {
	case BusinessCategoryBeautyAndPersonalCare, BusinessCategoryTech, BusinessCategoryCharitiesEducationMembership, BusinessCategoryFoodAndDrink, BusinessCategoryHealthCareAndFitness, BusinessCategoryHomeAndRepair, BusinessCategoryLeisureAndEntertainment, BusinessCategoryProfessionalServices, BusinessCategoryRetail, BusinessCategoryTransportation:
		return true
	}
	return false
}

func (e BusinessCategory) String() string {
	return string(e)
}

func (e *BusinessCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BusinessCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BusinessCategory", str)
	}
	return nil
}

func (e BusinessCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BusinessSubCategory string

const (
	BusinessSubCategoryArt             BusinessSubCategory = "Art"
	BusinessSubCategoryMarketing       BusinessSubCategory = "Marketing"
	BusinessSubCategoryTravel          BusinessSubCategory = "Travel"
	BusinessSubCategoryInteriorDesign  BusinessSubCategory = "Interior_Design"
	BusinessSubCategoryMusic           BusinessSubCategory = "Music"
	BusinessSubCategoryTechnology      BusinessSubCategory = "Technology"
	BusinessSubCategoryFood            BusinessSubCategory = "Food"
	BusinessSubCategoryRestaurants     BusinessSubCategory = "Restaurants"
	BusinessSubCategoryPolictics       BusinessSubCategory = "Polictics"
	BusinessSubCategoryHealthAndBeauty BusinessSubCategory = "Health_And_Beauty"
	BusinessSubCategoryDesign          BusinessSubCategory = "Design"
	BusinessSubCategoryNonProfit       BusinessSubCategory = "Non_Profit"
	BusinessSubCategoryJewelry         BusinessSubCategory = "Jewelry"
	BusinessSubCategoryGaming          BusinessSubCategory = "Gaming"
	BusinessSubCategoryMagazine        BusinessSubCategory = "Magazine"
	BusinessSubCategoryPhotography     BusinessSubCategory = "Photography"
	BusinessSubCategoryFitenss         BusinessSubCategory = "Fitenss"
	BusinessSubCategoryConsulting      BusinessSubCategory = "Consulting"
	BusinessSubCategoryFashion         BusinessSubCategory = "Fashion"
	BusinessSubCategoryServices        BusinessSubCategory = "Services"
)

var AllBusinessSubCategory = []BusinessSubCategory{
	BusinessSubCategoryArt,
	BusinessSubCategoryMarketing,
	BusinessSubCategoryTravel,
	BusinessSubCategoryInteriorDesign,
	BusinessSubCategoryMusic,
	BusinessSubCategoryTechnology,
	BusinessSubCategoryFood,
	BusinessSubCategoryRestaurants,
	BusinessSubCategoryPolictics,
	BusinessSubCategoryHealthAndBeauty,
	BusinessSubCategoryDesign,
	BusinessSubCategoryNonProfit,
	BusinessSubCategoryJewelry,
	BusinessSubCategoryGaming,
	BusinessSubCategoryMagazine,
	BusinessSubCategoryPhotography,
	BusinessSubCategoryFitenss,
	BusinessSubCategoryConsulting,
	BusinessSubCategoryFashion,
	BusinessSubCategoryServices,
}

func (e BusinessSubCategory) IsValid() bool {
	switch e {
	case BusinessSubCategoryArt, BusinessSubCategoryMarketing, BusinessSubCategoryTravel, BusinessSubCategoryInteriorDesign, BusinessSubCategoryMusic, BusinessSubCategoryTechnology, BusinessSubCategoryFood, BusinessSubCategoryRestaurants, BusinessSubCategoryPolictics, BusinessSubCategoryHealthAndBeauty, BusinessSubCategoryDesign, BusinessSubCategoryNonProfit, BusinessSubCategoryJewelry, BusinessSubCategoryGaming, BusinessSubCategoryMagazine, BusinessSubCategoryPhotography, BusinessSubCategoryFitenss, BusinessSubCategoryConsulting, BusinessSubCategoryFashion, BusinessSubCategoryServices:
		return true
	}
	return false
}

func (e BusinessSubCategory) String() string {
	return string(e)
}

func (e *BusinessSubCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BusinessSubCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BusinessSubCategory", str)
	}
	return nil
}

func (e BusinessSubCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MerchantType string

const (
	MerchantTypeOnePersonBusiness     MerchantType = "OnePersonBusiness"
	MerchantTypeSoleProprietor        MerchantType = "SoleProprietor"
	MerchantTypeSideProject           MerchantType = "SideProject"
	MerchantTypeCasualUse             MerchantType = "CasualUse"
	MerchantTypeLLCCorporation        MerchantType = "LLCCorporation"
	MerchantTypePartnership           MerchantType = "Partnership"
	MerchantTypeCharity               MerchantType = "Charity"
	MerchantTypeReligiousOrganization MerchantType = "ReligiousOrganization"
)

var AllMerchantType = []MerchantType{
	MerchantTypeOnePersonBusiness,
	MerchantTypeSoleProprietor,
	MerchantTypeSideProject,
	MerchantTypeCasualUse,
	MerchantTypeLLCCorporation,
	MerchantTypePartnership,
	MerchantTypeCharity,
	MerchantTypeReligiousOrganization,
}

func (e MerchantType) IsValid() bool {
	switch e {
	case MerchantTypeOnePersonBusiness, MerchantTypeSoleProprietor, MerchantTypeSideProject, MerchantTypeCasualUse, MerchantTypeLLCCorporation, MerchantTypePartnership, MerchantTypeCharity, MerchantTypeReligiousOrganization:
		return true
	}
	return false
}

func (e MerchantType) String() string {
	return string(e)
}

func (e *MerchantType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MerchantType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MerchantType", str)
	}
	return nil
}

func (e MerchantType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentMedium string

const (
	PaymentMediumMobilePhone PaymentMedium = "MobilePhone"
	PaymentMediumTablet      PaymentMedium = "Tablet"
	PaymentMediumComputer    PaymentMedium = "Computer"
)

var AllPaymentMedium = []PaymentMedium{
	PaymentMediumMobilePhone,
	PaymentMediumTablet,
	PaymentMediumComputer,
}

func (e PaymentMedium) IsValid() bool {
	switch e {
	case PaymentMediumMobilePhone, PaymentMediumTablet, PaymentMediumComputer:
		return true
	}
	return false
}

func (e PaymentMedium) String() string {
	return string(e)
}

func (e *PaymentMedium) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentMedium(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentMedium", str)
	}
	return nil
}

func (e PaymentMedium) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentOptions string

const (
	PaymentOptionsBrickAndMortar  PaymentOptions = "BrickAndMortar"
	PaymentOptionsOnTheGo         PaymentOptions = "OnTheGo"
	PaymentOptionsOnline          PaymentOptions = "Online"
	PaymentOptionsThroughInvoices PaymentOptions = "ThroughInvoices"
)

var AllPaymentOptions = []PaymentOptions{
	PaymentOptionsBrickAndMortar,
	PaymentOptionsOnTheGo,
	PaymentOptionsOnline,
	PaymentOptionsThroughInvoices,
}

func (e PaymentOptions) IsValid() bool {
	switch e {
	case PaymentOptionsBrickAndMortar, PaymentOptionsOnTheGo, PaymentOptionsOnline, PaymentOptionsThroughInvoices:
		return true
	}
	return false
}

func (e PaymentOptions) String() string {
	return string(e)
}

func (e *PaymentOptions) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentOptions(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentOptions", str)
	}
	return nil
}

func (e PaymentOptions) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PhoneType string

const (
	PhoneTypeMobile PhoneType = "MOBILE"
	PhoneTypeHome   PhoneType = "HOME"
	PhoneTypeWork   PhoneType = "WORK"
)

var AllPhoneType = []PhoneType{
	PhoneTypeMobile,
	PhoneTypeHome,
	PhoneTypeWork,
}

func (e PhoneType) IsValid() bool {
	switch e {
	case PhoneTypeMobile, PhoneTypeHome, PhoneTypeWork:
		return true
	}
	return false
}

func (e PhoneType) String() string {
	return string(e)
}

func (e *PhoneType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PhoneType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PhoneType", str)
	}
	return nil
}

func (e PhoneType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ServicesManagedByBlackspace string

const (
	ServicesManagedByBlackspaceItemCatalog         ServicesManagedByBlackspace = "ItemCatalog"
	ServicesManagedByBlackspaceGiftCards           ServicesManagedByBlackspace = "GiftCards"
	ServicesManagedByBlackspaceDiscounts           ServicesManagedByBlackspace = "Discounts"
	ServicesManagedByBlackspaceMarketingCampaigns  ServicesManagedByBlackspace = "MarketingCampaigns"
	ServicesManagedByBlackspaceLoyaltyProgram      ServicesManagedByBlackspace = "LoyaltyProgram"
	ServicesManagedByBlackspaceFundingYourBusiness ServicesManagedByBlackspace = "FundingYourBusiness"
	ServicesManagedByBlackspaceAnalytics           ServicesManagedByBlackspace = "Analytics"
)

var AllServicesManagedByBlackspace = []ServicesManagedByBlackspace{
	ServicesManagedByBlackspaceItemCatalog,
	ServicesManagedByBlackspaceGiftCards,
	ServicesManagedByBlackspaceDiscounts,
	ServicesManagedByBlackspaceMarketingCampaigns,
	ServicesManagedByBlackspaceLoyaltyProgram,
	ServicesManagedByBlackspaceFundingYourBusiness,
	ServicesManagedByBlackspaceAnalytics,
}

func (e ServicesManagedByBlackspace) IsValid() bool {
	switch e {
	case ServicesManagedByBlackspaceItemCatalog, ServicesManagedByBlackspaceGiftCards, ServicesManagedByBlackspaceDiscounts, ServicesManagedByBlackspaceMarketingCampaigns, ServicesManagedByBlackspaceLoyaltyProgram, ServicesManagedByBlackspaceFundingYourBusiness, ServicesManagedByBlackspaceAnalytics:
		return true
	}
	return false
}

func (e ServicesManagedByBlackspace) String() string {
	return string(e)
}

func (e *ServicesManagedByBlackspace) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServicesManagedByBlackspace(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServicesManagedByBlackspace", str)
	}
	return nil
}

func (e ServicesManagedByBlackspace) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
