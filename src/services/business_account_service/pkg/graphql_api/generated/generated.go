// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/BlackspaceInc/BlackspacePlatform/src/services/business_account_service/pkg/graphql_api/model"
	"github.com/BlackspaceInc/BlackspacePlatform/src/services/business_account_service/pkg/graphql_api/proto"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	BusinessAccount() BusinessAccountResolver
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Address struct {
		Address       func(childComplexity int) int
		ApartmentUnit func(childComplexity int) int
		Birthdate     func(childComplexity int) int
		City          func(childComplexity int) int
		State         func(childComplexity int) int
		ZipCode       func(childComplexity int) int
	}

	BusinessAccount struct {
		AuthnID                     func(childComplexity int) int
		BusinessGoals               func(childComplexity int) int
		BusinessStage               func(childComplexity int) int
		Category                    func(childComplexity int) int
		CompanyAddress              func(childComplexity int) int
		CompanyName                 func(childComplexity int) int
		Email                       func(childComplexity int) int
		FounderAddress              func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsActive                    func(childComplexity int) int
		Media                       func(childComplexity int) int
		MerchantType                func(childComplexity int) int
		Password                    func(childComplexity int) int
		PaymentDetails              func(childComplexity int) int
		PhoneNumber                 func(childComplexity int) int
		ServicesManagedByBlackspace func(childComplexity int) int
		SubscribedTopics            func(childComplexity int) int
		TypeOfBusiness              func(childComplexity int) int
	}

	BusinessCategory struct {
		BeautyAndPersonalCare        func(childComplexity int) int
		CharitiesEducationMembership func(childComplexity int) int
		FoodAndDrink                 func(childComplexity int) int
		HealthCareAndFitness         func(childComplexity int) int
		HomeAndRepair                func(childComplexity int) int
		LeisureAndEntertainment      func(childComplexity int) int
		ProfessionalServices         func(childComplexity int) int
		Retail                       func(childComplexity int) int
		Tech                         func(childComplexity int) int
		Transportation               func(childComplexity int) int
	}

	BusinessSubCategory struct {
		Art             func(childComplexity int) int
		Consulting      func(childComplexity int) int
		Design          func(childComplexity int) int
		Fashion         func(childComplexity int) int
		Fitenss         func(childComplexity int) int
		Food            func(childComplexity int) int
		Gaming          func(childComplexity int) int
		HealthAndBeauty func(childComplexity int) int
		InteriorDesign  func(childComplexity int) int
		Jewelry         func(childComplexity int) int
		Magazine        func(childComplexity int) int
		Marketing       func(childComplexity int) int
		Music           func(childComplexity int) int
		NonProfit       func(childComplexity int) int
		Photography     func(childComplexity int) int
		Polictics       func(childComplexity int) int
		Restaurants     func(childComplexity int) int
		Services        func(childComplexity int) int
		Technology      func(childComplexity int) int
		Travel          func(childComplexity int) int
	}

	BusinessType struct {
		Category    func(childComplexity int) int
		SubCategory func(childComplexity int) int
	}

	DateOfBirth struct {
		Day   func(childComplexity int) int
		Month func(childComplexity int) int
		Year  func(childComplexity int) int
	}

	DeleteBusinessAccountResponse struct {
		Result func(childComplexity int) int
	}

	Media struct {
		Facebook  func(childComplexity int) int
		ID        func(childComplexity int) int
		Instagram func(childComplexity int) int
		LinkedIn  func(childComplexity int) int
		Pinterest func(childComplexity int) int
		Website   func(childComplexity int) int
	}

	MerchantType struct {
		CasualUse             func(childComplexity int) int
		Charity               func(childComplexity int) int
		LLCCorporation        func(childComplexity int) int
		OnePersonBusiness     func(childComplexity int) int
		Partnership           func(childComplexity int) int
		ReligiousOrganization func(childComplexity int) int
		SideProject           func(childComplexity int) int
		SoleProprietor        func(childComplexity int) int
	}

	Mutation struct {
		CreateBusinessAccount func(childComplexity int, input proto.CreateBusinessAccountRequest) int
		DeleteBusinessAccount func(childComplexity int, id proto.DeleteBusinessAccountRequest) int
		UpdateBusinessAccount func(childComplexity int, input proto.UpdateBusinessAccountRequest) int
	}

	PaymentMedium struct {
		Computer    func(childComplexity int) int
		MobilePhone func(childComplexity int) int
		Tablet      func(childComplexity int) int
	}

	PaymentOptions struct {
		BrickAndMortar  func(childComplexity int) int
		OnTheGo         func(childComplexity int) int
		Online          func(childComplexity int) int
		ThroughInvoices func(childComplexity int) int
	}

	PaymentProcessingMethods struct {
		Medium         func(childComplexity int) int
		PaymentOptions func(childComplexity int) int
	}

	PhoneNumber struct {
		Number func(childComplexity int) int
		Type   func(childComplexity int) int
	}

	PhoneType struct {
		Home   func(childComplexity int) int
		Mobile func(childComplexity int) int
		Work   func(childComplexity int) int
	}

	Query struct {
		GetBusinessAccount  func(childComplexity int, input proto.GetBusinessAccountRequest) int
		GetBusinessAccounts func(childComplexity int, limit proto.GetBusinessAccountsRequest) int
	}

	ServicesManagedByBlackspace struct {
		Analytics           func(childComplexity int) int
		Discounts           func(childComplexity int) int
		FundingYourBusiness func(childComplexity int) int
		GiftCards           func(childComplexity int) int
		ItemCatalog         func(childComplexity int) int
		LoyaltyProgram      func(childComplexity int) int
		MarketingCampaigns  func(childComplexity int) int
	}

	Topics struct {
		Art             func(childComplexity int) int
		Business        func(childComplexity int) int
		Cooking         func(childComplexity int) int
		Design          func(childComplexity int) int
		FashionAndStyle func(childComplexity int) int
		Food            func(childComplexity int) int
		Health          func(childComplexity int) int
		ID              func(childComplexity int) int
		Music           func(childComplexity int) int
		Science         func(childComplexity int) int
		Technology      func(childComplexity int) int
		Travel          func(childComplexity int) int
	}
}

type BusinessAccountResolver interface {
	ID(ctx context.Context, obj *model.BusinessAccount) (*int, error)

	PhoneNumber(ctx context.Context, obj *model.BusinessAccount) (*proto.PhoneNumber, error)

	Media(ctx context.Context, obj *model.BusinessAccount) (*proto.Media, error)

	TypeOfBusiness(ctx context.Context, obj *model.BusinessAccount) (*proto.BusinessType, error)

	MerchantType(ctx context.Context, obj *model.BusinessAccount) (*proto.MerchantType, error)
	PaymentDetails(ctx context.Context, obj *model.BusinessAccount) (*proto.PaymentProcessingMethods, error)
	ServicesManagedByBlackspace(ctx context.Context, obj *model.BusinessAccount) (*proto.ServicesManagedByBlackspace, error)
	FounderAddress(ctx context.Context, obj *model.BusinessAccount) (*proto.Address, error)
	SubscribedTopics(ctx context.Context, obj *model.BusinessAccount) (*proto.Topics, error)
	AuthnID(ctx context.Context, obj *model.BusinessAccount) (*int, error)
}
type MutationResolver interface {
	CreateBusinessAccount(ctx context.Context, input proto.CreateBusinessAccountRequest) (*model.BusinessAccount, error)
	UpdateBusinessAccount(ctx context.Context, input proto.UpdateBusinessAccountRequest) (*model.BusinessAccount, error)
	DeleteBusinessAccount(ctx context.Context, id proto.DeleteBusinessAccountRequest) (*proto.DeleteBusinessAccountResponse, error)
}
type QueryResolver interface {
	GetBusinessAccount(ctx context.Context, input proto.GetBusinessAccountRequest) (*model.BusinessAccount, error)
	GetBusinessAccounts(ctx context.Context, limit proto.GetBusinessAccountsRequest) ([]*model.BusinessAccount, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Address.Address":
		if e.complexity.Address.Address == nil {
			break
		}

		return e.complexity.Address.Address(childComplexity), true

	case "Address.ApartmentUnit":
		if e.complexity.Address.ApartmentUnit == nil {
			break
		}

		return e.complexity.Address.ApartmentUnit(childComplexity), true

	case "Address.birthdate":
		if e.complexity.Address.Birthdate == nil {
			break
		}

		return e.complexity.Address.Birthdate(childComplexity), true

	case "Address.City":
		if e.complexity.Address.City == nil {
			break
		}

		return e.complexity.Address.City(childComplexity), true

	case "Address.State":
		if e.complexity.Address.State == nil {
			break
		}

		return e.complexity.Address.State(childComplexity), true

	case "Address.ZipCode":
		if e.complexity.Address.ZipCode == nil {
			break
		}

		return e.complexity.Address.ZipCode(childComplexity), true

	case "BusinessAccount.authnId":
		if e.complexity.BusinessAccount.AuthnID == nil {
			break
		}

		return e.complexity.BusinessAccount.AuthnID(childComplexity), true

	case "BusinessAccount.businessGoals":
		if e.complexity.BusinessAccount.BusinessGoals == nil {
			break
		}

		return e.complexity.BusinessAccount.BusinessGoals(childComplexity), true

	case "BusinessAccount.businessStage":
		if e.complexity.BusinessAccount.BusinessStage == nil {
			break
		}

		return e.complexity.BusinessAccount.BusinessStage(childComplexity), true

	case "BusinessAccount.category":
		if e.complexity.BusinessAccount.Category == nil {
			break
		}

		return e.complexity.BusinessAccount.Category(childComplexity), true

	case "BusinessAccount.companyAddress":
		if e.complexity.BusinessAccount.CompanyAddress == nil {
			break
		}

		return e.complexity.BusinessAccount.CompanyAddress(childComplexity), true

	case "BusinessAccount.companyName":
		if e.complexity.BusinessAccount.CompanyName == nil {
			break
		}

		return e.complexity.BusinessAccount.CompanyName(childComplexity), true

	case "BusinessAccount.email":
		if e.complexity.BusinessAccount.Email == nil {
			break
		}

		return e.complexity.BusinessAccount.Email(childComplexity), true

	case "BusinessAccount.founderAddress":
		if e.complexity.BusinessAccount.FounderAddress == nil {
			break
		}

		return e.complexity.BusinessAccount.FounderAddress(childComplexity), true

	case "BusinessAccount.id":
		if e.complexity.BusinessAccount.ID == nil {
			break
		}

		return e.complexity.BusinessAccount.ID(childComplexity), true

	case "BusinessAccount.isActive":
		if e.complexity.BusinessAccount.IsActive == nil {
			break
		}

		return e.complexity.BusinessAccount.IsActive(childComplexity), true

	case "BusinessAccount.media":
		if e.complexity.BusinessAccount.Media == nil {
			break
		}

		return e.complexity.BusinessAccount.Media(childComplexity), true

	case "BusinessAccount.merchantType":
		if e.complexity.BusinessAccount.MerchantType == nil {
			break
		}

		return e.complexity.BusinessAccount.MerchantType(childComplexity), true

	case "BusinessAccount.password":
		if e.complexity.BusinessAccount.Password == nil {
			break
		}

		return e.complexity.BusinessAccount.Password(childComplexity), true

	case "BusinessAccount.paymentDetails":
		if e.complexity.BusinessAccount.PaymentDetails == nil {
			break
		}

		return e.complexity.BusinessAccount.PaymentDetails(childComplexity), true

	case "BusinessAccount.phoneNumber":
		if e.complexity.BusinessAccount.PhoneNumber == nil {
			break
		}

		return e.complexity.BusinessAccount.PhoneNumber(childComplexity), true

	case "BusinessAccount.servicesManagedByBlackspace":
		if e.complexity.BusinessAccount.ServicesManagedByBlackspace == nil {
			break
		}

		return e.complexity.BusinessAccount.ServicesManagedByBlackspace(childComplexity), true

	case "BusinessAccount.subscribedTopics":
		if e.complexity.BusinessAccount.SubscribedTopics == nil {
			break
		}

		return e.complexity.BusinessAccount.SubscribedTopics(childComplexity), true

	case "BusinessAccount.typeOfBusiness":
		if e.complexity.BusinessAccount.TypeOfBusiness == nil {
			break
		}

		return e.complexity.BusinessAccount.TypeOfBusiness(childComplexity), true

	case "BusinessCategory.BeautyAndPersonalCare":
		if e.complexity.BusinessCategory.BeautyAndPersonalCare == nil {
			break
		}

		return e.complexity.BusinessCategory.BeautyAndPersonalCare(childComplexity), true

	case "BusinessCategory.CharitiesEducationMembership":
		if e.complexity.BusinessCategory.CharitiesEducationMembership == nil {
			break
		}

		return e.complexity.BusinessCategory.CharitiesEducationMembership(childComplexity), true

	case "BusinessCategory.FoodAndDrink":
		if e.complexity.BusinessCategory.FoodAndDrink == nil {
			break
		}

		return e.complexity.BusinessCategory.FoodAndDrink(childComplexity), true

	case "BusinessCategory.HealthCareAndFitness":
		if e.complexity.BusinessCategory.HealthCareAndFitness == nil {
			break
		}

		return e.complexity.BusinessCategory.HealthCareAndFitness(childComplexity), true

	case "BusinessCategory.HomeAndRepair":
		if e.complexity.BusinessCategory.HomeAndRepair == nil {
			break
		}

		return e.complexity.BusinessCategory.HomeAndRepair(childComplexity), true

	case "BusinessCategory.LeisureAndEntertainment":
		if e.complexity.BusinessCategory.LeisureAndEntertainment == nil {
			break
		}

		return e.complexity.BusinessCategory.LeisureAndEntertainment(childComplexity), true

	case "BusinessCategory.ProfessionalServices":
		if e.complexity.BusinessCategory.ProfessionalServices == nil {
			break
		}

		return e.complexity.BusinessCategory.ProfessionalServices(childComplexity), true

	case "BusinessCategory.Retail":
		if e.complexity.BusinessCategory.Retail == nil {
			break
		}

		return e.complexity.BusinessCategory.Retail(childComplexity), true

	case "BusinessCategory.Tech":
		if e.complexity.BusinessCategory.Tech == nil {
			break
		}

		return e.complexity.BusinessCategory.Tech(childComplexity), true

	case "BusinessCategory.Transportation":
		if e.complexity.BusinessCategory.Transportation == nil {
			break
		}

		return e.complexity.BusinessCategory.Transportation(childComplexity), true

	case "BusinessSubCategory.Art":
		if e.complexity.BusinessSubCategory.Art == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Art(childComplexity), true

	case "BusinessSubCategory.Consulting":
		if e.complexity.BusinessSubCategory.Consulting == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Consulting(childComplexity), true

	case "BusinessSubCategory.Design":
		if e.complexity.BusinessSubCategory.Design == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Design(childComplexity), true

	case "BusinessSubCategory.Fashion":
		if e.complexity.BusinessSubCategory.Fashion == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Fashion(childComplexity), true

	case "BusinessSubCategory.Fitenss":
		if e.complexity.BusinessSubCategory.Fitenss == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Fitenss(childComplexity), true

	case "BusinessSubCategory.Food":
		if e.complexity.BusinessSubCategory.Food == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Food(childComplexity), true

	case "BusinessSubCategory.Gaming":
		if e.complexity.BusinessSubCategory.Gaming == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Gaming(childComplexity), true

	case "BusinessSubCategory.Health_And_Beauty":
		if e.complexity.BusinessSubCategory.HealthAndBeauty == nil {
			break
		}

		return e.complexity.BusinessSubCategory.HealthAndBeauty(childComplexity), true

	case "BusinessSubCategory.Interior_Design":
		if e.complexity.BusinessSubCategory.InteriorDesign == nil {
			break
		}

		return e.complexity.BusinessSubCategory.InteriorDesign(childComplexity), true

	case "BusinessSubCategory.Jewelry":
		if e.complexity.BusinessSubCategory.Jewelry == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Jewelry(childComplexity), true

	case "BusinessSubCategory.Magazine":
		if e.complexity.BusinessSubCategory.Magazine == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Magazine(childComplexity), true

	case "BusinessSubCategory.Marketing":
		if e.complexity.BusinessSubCategory.Marketing == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Marketing(childComplexity), true

	case "BusinessSubCategory.Music":
		if e.complexity.BusinessSubCategory.Music == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Music(childComplexity), true

	case "BusinessSubCategory.Non_Profit":
		if e.complexity.BusinessSubCategory.NonProfit == nil {
			break
		}

		return e.complexity.BusinessSubCategory.NonProfit(childComplexity), true

	case "BusinessSubCategory.Photography":
		if e.complexity.BusinessSubCategory.Photography == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Photography(childComplexity), true

	case "BusinessSubCategory.Polictics":
		if e.complexity.BusinessSubCategory.Polictics == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Polictics(childComplexity), true

	case "BusinessSubCategory.Restaurants":
		if e.complexity.BusinessSubCategory.Restaurants == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Restaurants(childComplexity), true

	case "BusinessSubCategory.Services":
		if e.complexity.BusinessSubCategory.Services == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Services(childComplexity), true

	case "BusinessSubCategory.Technology":
		if e.complexity.BusinessSubCategory.Technology == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Technology(childComplexity), true

	case "BusinessSubCategory.Travel":
		if e.complexity.BusinessSubCategory.Travel == nil {
			break
		}

		return e.complexity.BusinessSubCategory.Travel(childComplexity), true

	case "BusinessType.category":
		if e.complexity.BusinessType.Category == nil {
			break
		}

		return e.complexity.BusinessType.Category(childComplexity), true

	case "BusinessType.subCategory":
		if e.complexity.BusinessType.SubCategory == nil {
			break
		}

		return e.complexity.BusinessType.SubCategory(childComplexity), true

	case "DateOfBirth.Day":
		if e.complexity.DateOfBirth.Day == nil {
			break
		}

		return e.complexity.DateOfBirth.Day(childComplexity), true

	case "DateOfBirth.Month":
		if e.complexity.DateOfBirth.Month == nil {
			break
		}

		return e.complexity.DateOfBirth.Month(childComplexity), true

	case "DateOfBirth.Year":
		if e.complexity.DateOfBirth.Year == nil {
			break
		}

		return e.complexity.DateOfBirth.Year(childComplexity), true

	case "DeleteBusinessAccountResponse.result":
		if e.complexity.DeleteBusinessAccountResponse.Result == nil {
			break
		}

		return e.complexity.DeleteBusinessAccountResponse.Result(childComplexity), true

	case "Media.facebook":
		if e.complexity.Media.Facebook == nil {
			break
		}

		return e.complexity.Media.Facebook(childComplexity), true

	case "Media.id":
		if e.complexity.Media.ID == nil {
			break
		}

		return e.complexity.Media.ID(childComplexity), true

	case "Media.instagram":
		if e.complexity.Media.Instagram == nil {
			break
		}

		return e.complexity.Media.Instagram(childComplexity), true

	case "Media.linkedIn":
		if e.complexity.Media.LinkedIn == nil {
			break
		}

		return e.complexity.Media.LinkedIn(childComplexity), true

	case "Media.pinterest":
		if e.complexity.Media.Pinterest == nil {
			break
		}

		return e.complexity.Media.Pinterest(childComplexity), true

	case "Media.website":
		if e.complexity.Media.Website == nil {
			break
		}

		return e.complexity.Media.Website(childComplexity), true

	case "MerchantType.CasualUse":
		if e.complexity.MerchantType.CasualUse == nil {
			break
		}

		return e.complexity.MerchantType.CasualUse(childComplexity), true

	case "MerchantType.Charity":
		if e.complexity.MerchantType.Charity == nil {
			break
		}

		return e.complexity.MerchantType.Charity(childComplexity), true

	case "MerchantType.LLCCorporation":
		if e.complexity.MerchantType.LLCCorporation == nil {
			break
		}

		return e.complexity.MerchantType.LLCCorporation(childComplexity), true

	case "MerchantType.OnePersonBusiness":
		if e.complexity.MerchantType.OnePersonBusiness == nil {
			break
		}

		return e.complexity.MerchantType.OnePersonBusiness(childComplexity), true

	case "MerchantType.Partnership":
		if e.complexity.MerchantType.Partnership == nil {
			break
		}

		return e.complexity.MerchantType.Partnership(childComplexity), true

	case "MerchantType.ReligiousOrganization":
		if e.complexity.MerchantType.ReligiousOrganization == nil {
			break
		}

		return e.complexity.MerchantType.ReligiousOrganization(childComplexity), true

	case "MerchantType.SideProject":
		if e.complexity.MerchantType.SideProject == nil {
			break
		}

		return e.complexity.MerchantType.SideProject(childComplexity), true

	case "MerchantType.SoleProprietor":
		if e.complexity.MerchantType.SoleProprietor == nil {
			break
		}

		return e.complexity.MerchantType.SoleProprietor(childComplexity), true

	case "Mutation.CreateBusinessAccount":
		if e.complexity.Mutation.CreateBusinessAccount == nil {
			break
		}

		args, err := ec.field_Mutation_CreateBusinessAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBusinessAccount(childComplexity, args["input"].(proto.CreateBusinessAccountRequest)), true

	case "Mutation.DeleteBusinessAccount":
		if e.complexity.Mutation.DeleteBusinessAccount == nil {
			break
		}

		args, err := ec.field_Mutation_DeleteBusinessAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBusinessAccount(childComplexity, args["id"].(proto.DeleteBusinessAccountRequest)), true

	case "Mutation.UpdateBusinessAccount":
		if e.complexity.Mutation.UpdateBusinessAccount == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateBusinessAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBusinessAccount(childComplexity, args["input"].(proto.UpdateBusinessAccountRequest)), true

	case "PaymentMedium.Computer":
		if e.complexity.PaymentMedium.Computer == nil {
			break
		}

		return e.complexity.PaymentMedium.Computer(childComplexity), true

	case "PaymentMedium.MobilePhone":
		if e.complexity.PaymentMedium.MobilePhone == nil {
			break
		}

		return e.complexity.PaymentMedium.MobilePhone(childComplexity), true

	case "PaymentMedium.Tablet":
		if e.complexity.PaymentMedium.Tablet == nil {
			break
		}

		return e.complexity.PaymentMedium.Tablet(childComplexity), true

	case "PaymentOptions.BrickAndMortar":
		if e.complexity.PaymentOptions.BrickAndMortar == nil {
			break
		}

		return e.complexity.PaymentOptions.BrickAndMortar(childComplexity), true

	case "PaymentOptions.OnTheGo":
		if e.complexity.PaymentOptions.OnTheGo == nil {
			break
		}

		return e.complexity.PaymentOptions.OnTheGo(childComplexity), true

	case "PaymentOptions.Online":
		if e.complexity.PaymentOptions.Online == nil {
			break
		}

		return e.complexity.PaymentOptions.Online(childComplexity), true

	case "PaymentOptions.ThroughInvoices":
		if e.complexity.PaymentOptions.ThroughInvoices == nil {
			break
		}

		return e.complexity.PaymentOptions.ThroughInvoices(childComplexity), true

	case "PaymentProcessingMethods.medium":
		if e.complexity.PaymentProcessingMethods.Medium == nil {
			break
		}

		return e.complexity.PaymentProcessingMethods.Medium(childComplexity), true

	case "PaymentProcessingMethods.paymentOptions":
		if e.complexity.PaymentProcessingMethods.PaymentOptions == nil {
			break
		}

		return e.complexity.PaymentProcessingMethods.PaymentOptions(childComplexity), true

	case "PhoneNumber.number":
		if e.complexity.PhoneNumber.Number == nil {
			break
		}

		return e.complexity.PhoneNumber.Number(childComplexity), true

	case "PhoneNumber.type":
		if e.complexity.PhoneNumber.Type == nil {
			break
		}

		return e.complexity.PhoneNumber.Type(childComplexity), true

	case "PhoneType.home":
		if e.complexity.PhoneType.Home == nil {
			break
		}

		return e.complexity.PhoneType.Home(childComplexity), true

	case "PhoneType.mobile":
		if e.complexity.PhoneType.Mobile == nil {
			break
		}

		return e.complexity.PhoneType.Mobile(childComplexity), true

	case "PhoneType.work":
		if e.complexity.PhoneType.Work == nil {
			break
		}

		return e.complexity.PhoneType.Work(childComplexity), true

	case "Query.getBusinessAccount":
		if e.complexity.Query.GetBusinessAccount == nil {
			break
		}

		args, err := ec.field_Query_getBusinessAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessAccount(childComplexity, args["input"].(proto.GetBusinessAccountRequest)), true

	case "Query.getBusinessAccounts":
		if e.complexity.Query.GetBusinessAccounts == nil {
			break
		}

		args, err := ec.field_Query_getBusinessAccounts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessAccounts(childComplexity, args["limit"].(proto.GetBusinessAccountsRequest)), true

	case "ServicesManagedByBlackspace.Analytics":
		if e.complexity.ServicesManagedByBlackspace.Analytics == nil {
			break
		}

		return e.complexity.ServicesManagedByBlackspace.Analytics(childComplexity), true

	case "ServicesManagedByBlackspace.Discounts":
		if e.complexity.ServicesManagedByBlackspace.Discounts == nil {
			break
		}

		return e.complexity.ServicesManagedByBlackspace.Discounts(childComplexity), true

	case "ServicesManagedByBlackspace.FundingYourBusiness":
		if e.complexity.ServicesManagedByBlackspace.FundingYourBusiness == nil {
			break
		}

		return e.complexity.ServicesManagedByBlackspace.FundingYourBusiness(childComplexity), true

	case "ServicesManagedByBlackspace.GiftCards":
		if e.complexity.ServicesManagedByBlackspace.GiftCards == nil {
			break
		}

		return e.complexity.ServicesManagedByBlackspace.GiftCards(childComplexity), true

	case "ServicesManagedByBlackspace.ItemCatalog":
		if e.complexity.ServicesManagedByBlackspace.ItemCatalog == nil {
			break
		}

		return e.complexity.ServicesManagedByBlackspace.ItemCatalog(childComplexity), true

	case "ServicesManagedByBlackspace.LoyaltyProgram":
		if e.complexity.ServicesManagedByBlackspace.LoyaltyProgram == nil {
			break
		}

		return e.complexity.ServicesManagedByBlackspace.LoyaltyProgram(childComplexity), true

	case "ServicesManagedByBlackspace.MarketingCampaigns":
		if e.complexity.ServicesManagedByBlackspace.MarketingCampaigns == nil {
			break
		}

		return e.complexity.ServicesManagedByBlackspace.MarketingCampaigns(childComplexity), true

	case "Topics.Art":
		if e.complexity.Topics.Art == nil {
			break
		}

		return e.complexity.Topics.Art(childComplexity), true

	case "Topics.Business":
		if e.complexity.Topics.Business == nil {
			break
		}

		return e.complexity.Topics.Business(childComplexity), true

	case "Topics.Cooking":
		if e.complexity.Topics.Cooking == nil {
			break
		}

		return e.complexity.Topics.Cooking(childComplexity), true

	case "Topics.Design":
		if e.complexity.Topics.Design == nil {
			break
		}

		return e.complexity.Topics.Design(childComplexity), true

	case "Topics.FashionAndStyle":
		if e.complexity.Topics.FashionAndStyle == nil {
			break
		}

		return e.complexity.Topics.FashionAndStyle(childComplexity), true

	case "Topics.Food":
		if e.complexity.Topics.Food == nil {
			break
		}

		return e.complexity.Topics.Food(childComplexity), true

	case "Topics.Health":
		if e.complexity.Topics.Health == nil {
			break
		}

		return e.complexity.Topics.Health(childComplexity), true

	case "Topics.id":
		if e.complexity.Topics.ID == nil {
			break
		}

		return e.complexity.Topics.ID(childComplexity), true

	case "Topics.Music":
		if e.complexity.Topics.Music == nil {
			break
		}

		return e.complexity.Topics.Music(childComplexity), true

	case "Topics.Science":
		if e.complexity.Topics.Science == nil {
			break
		}

		return e.complexity.Topics.Science(childComplexity), true

	case "Topics.Technology":
		if e.complexity.Topics.Technology == nil {
			break
		}

		return e.complexity.Topics.Technology(childComplexity), true

	case "Topics.Travel":
		if e.complexity.Topics.Travel == nil {
			break
		}

		return e.complexity.Topics.Travel(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "pkg/graphql_api/schema/input.graphql", Input: `input BusinessAccountInput {
	companyName: String
	companyAddress: String
	phoneNumber: PhoneNumberInput
	category: String
	media: MediaInput
	password: String
	email: String
	isActive: Boolean
	typeOfBusiness: BusinessTypeInput
	businessGoals: [String]
	businessStage: String
	merchantType: MerchantTypeInput
	paymentDetails: PaymentProcessingMethodsInput
	servicesManagedByBlackspace: ServicesManagedByBlackspaceInput
	founderAddress: AddressInput
	subscribedTopics: TopicsInput
}
input TopicsInput {
	Technology: Boolean
	Health: Boolean
	Food: Boolean
	Science: Boolean
	Music: Boolean
	Travel: Boolean
	Business: Boolean
	Cooking: Boolean
	FashionAndStyle: Boolean
	Design: Boolean
	Art: Boolean
}
input MediaInput {
	website: String
	instagram: String
	facebook: String
	linkedIn: String
	pinterest: String
}
input AddressInput {
	Address: String
	ApartmentUnit: String
	ZipCode: String
	City: String
	State: String
	birthdate: DateOfBirthInput
}
input DateOfBirthInput {
	Month: String
	Day: String
	Year: String
}
input ServicesManagedByBlackspaceInput {
	ItemCatalog: Boolean
	GiftCards: Boolean
	Discounts: Boolean
	MarketingCampaigns: Boolean
	LoyaltyProgram: Boolean
	FundingYourBusiness: Boolean
	Analytics: Boolean
}
input PaymentProcessingMethodsInput {
	paymentOptions: [PaymentOptionsInput]
	medium: [PaymentMediumInput]
}
input PaymentMediumInput {
	MobilePhone: Boolean
	Tablet: Boolean
	Computer: Boolean
}
input PaymentOptionsInput {
	BrickAndMortar: Boolean
	OnTheGo: Boolean
	Online: Boolean
	ThroughInvoices: Boolean
}
input BusinessTypeInput {
	category: BusinessCategoryInput
	subCategory: BusinessSubCategoryInput
}
input BusinessCategoryInput {
	Tech: Boolean
	CharitiesEducationMembership: Boolean
	FoodAndDrink: Boolean
	HealthCareAndFitness: Boolean
	HomeAndRepair: Boolean
	LeisureAndEntertainment: Boolean
	ProfessionalServices: Boolean
	Retail: Boolean
	Transportation: Boolean
	BeautyAndPersonalCare: Boolean
}
input BusinessSubCategoryInput {
	Marketing: Boolean
	Travel: Boolean
	Interior_Design: Boolean
	Music: Boolean
	Technology: Boolean
	Food: Boolean
	Restaurants: Boolean
	Polictics: Boolean
	Health_And_Beauty: Boolean
	Design: Boolean
	Non_Profit: Boolean
	Jewelry: Boolean
	Gaming: Boolean
	Magazine: Boolean
	Photography: Boolean
	Fitenss: Boolean
	Consulting: Boolean
	Fashion: Boolean
	Services: Boolean
	Art: Boolean
}
input MerchantTypeInput {
	SoleProprietor: Boolean
	SideProject: Boolean
	CasualUse: Boolean
	LLCCorporation: Boolean
	Partnership: Boolean
	Charity: Boolean
	ReligiousOrganization: Boolean
	OnePersonBusiness: Boolean
}
input PhoneNumberInput {
	number: String
	type: PhoneTypeInput
}
input PhoneTypeInput {
	home: Boolean
	work: Boolean
	mobile: Boolean
}
`, BuiltIn: false},
	{Name: "pkg/graphql_api/schema/mutation.graphql", Input: `input CreateBusinessAccountRequest {
	businessAccount: BusinessAccountInput
	authnId: Int
}

input UpdateBusinessAccountRequest {
	id: Int
	businessAccount: BusinessAccountInput
}

input DeleteBusinessAccountRequest {
	id: Int
}

input DeleteBusinessAccountsRequest{
	id: [Int]
}

type DeleteBusinessAccountResponse {
	result: Boolean
}

type Mutation {
	CreateBusinessAccount(input: CreateBusinessAccountRequest!): BusinessAccount!
	UpdateBusinessAccount(input: UpdateBusinessAccountRequest!): BusinessAccount!
	DeleteBusinessAccount(id: DeleteBusinessAccountRequest!): DeleteBusinessAccountResponse!
}
`, BuiltIn: false},
	{Name: "pkg/graphql_api/schema/query.graphql", Input: `input GetBusinessAccountRequest {
	id: Int
}

input GetBusinessAccountsRequest{
	limit: Int
}

type Query {
	getBusinessAccount(input: GetBusinessAccountRequest!): BusinessAccount!
	getBusinessAccounts(limit: GetBusinessAccountsRequest!): [BusinessAccount!]!
}
`, BuiltIn: false},
	{Name: "pkg/graphql_api/schema/schema.graphql", Input: `type BusinessAccount {
  id: Int
  companyName: String
  companyAddress: String
  phoneNumber: PhoneNumber
  category: String
  media: Media
  password: String
  email: String
  isActive: Boolean
  typeOfBusiness: BusinessType
  businessGoals: [String]
  businessStage: String
  merchantType: MerchantType
  paymentDetails: PaymentProcessingMethods
  servicesManagedByBlackspace: ServicesManagedByBlackspace
  founderAddress: Address
  subscribedTopics: Topics
  authnId: Int
}
type Topics {
  id: Int
  Technology: Boolean
  Health: Boolean
  Food: Boolean
  Science: Boolean
  Music: Boolean
  Travel: Boolean
  Business: Boolean
  Cooking: Boolean
  FashionAndStyle: Boolean
  Design: Boolean
  Art: Boolean
}
type Media {
  id: Int
  website: String
  instagram: String
  facebook: String
  linkedIn: String
  pinterest: String
}
type Address {
  Address: String
  ApartmentUnit: String
  ZipCode: String
  City: String
  State: String
  birthdate: DateOfBirth
}
type DateOfBirth {
  Month: String
  Day: String
  Year: String
}
type ServicesManagedByBlackspace {
  ItemCatalog: Boolean
  GiftCards: Boolean
  Discounts: Boolean
  MarketingCampaigns: Boolean
  LoyaltyProgram: Boolean
  FundingYourBusiness: Boolean
  Analytics: Boolean
}
type PaymentProcessingMethods {
  paymentOptions: [PaymentOptions]
  medium: [PaymentMedium]
}
type PaymentMedium {
  MobilePhone: Boolean
  Tablet: Boolean
  Computer: Boolean
}
type PaymentOptions {
  BrickAndMortar: Boolean
  OnTheGo: Boolean
  Online: Boolean
  ThroughInvoices: Boolean
}
type BusinessType {
  category: BusinessCategory
  subCategory: BusinessSubCategory
}
type BusinessCategory {
  Tech: Boolean
  CharitiesEducationMembership: Boolean
  FoodAndDrink: Boolean
  HealthCareAndFitness: Boolean
  HomeAndRepair: Boolean
  LeisureAndEntertainment: Boolean
  ProfessionalServices: Boolean
  Retail: Boolean
  Transportation: Boolean
  BeautyAndPersonalCare: Boolean
}
type BusinessSubCategory {
  Marketing: Boolean
  Travel: Boolean
  Interior_Design: Boolean
  Music: Boolean
  Technology: Boolean
  Food: Boolean
  Restaurants: Boolean
  Polictics: Boolean
  Health_And_Beauty: Boolean
  Design: Boolean
  Non_Profit: Boolean
  Jewelry: Boolean
  Gaming: Boolean
  Magazine: Boolean
  Photography: Boolean
  Fitenss: Boolean
  Consulting: Boolean
  Fashion: Boolean
  Services: Boolean
  Art: Boolean
}
type MerchantType {
  SoleProprietor: Boolean
  SideProject: Boolean
  CasualUse: Boolean
  LLCCorporation: Boolean
  Partnership: Boolean
  Charity: Boolean
  ReligiousOrganization: Boolean
  OnePersonBusiness: Boolean
}
type PhoneNumber {
  number: String
  type: PhoneType
}
type PhoneType {
  home: Boolean
  work: Boolean
  mobile: Boolean
}`, BuiltIn: false},
	{Name: "federation/directives.graphql", Input: `
scalar _Any
scalar _FieldSet

directive @external on FIELD_DEFINITION
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
directive @key(fields: _FieldSet!) on OBJECT | INTERFACE
directive @extends on OBJECT
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_CreateBusinessAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 proto.CreateBusinessAccountRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateBusinessAccountRequest2githubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐCreateBusinessAccountRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_DeleteBusinessAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 proto.DeleteBusinessAccountRequest
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNDeleteBusinessAccountRequest2githubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐDeleteBusinessAccountRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateBusinessAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 proto.UpdateBusinessAccountRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateBusinessAccountRequest2githubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐUpdateBusinessAccountRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 proto.GetBusinessAccountRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetBusinessAccountRequest2githubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐGetBusinessAccountRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessAccounts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 proto.GetBusinessAccountsRequest
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalNGetBusinessAccountsRequest2githubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐGetBusinessAccountsRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Address_Address(ctx context.Context, field graphql.CollectedField, obj *proto.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_ApartmentUnit(ctx context.Context, field graphql.CollectedField, obj *proto.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApartmentUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_ZipCode(ctx context.Context, field graphql.CollectedField, obj *proto.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZipCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_City(ctx context.Context, field graphql.CollectedField, obj *proto.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_State(ctx context.Context, field graphql.CollectedField, obj *proto.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Address_birthdate(ctx context.Context, field graphql.CollectedField, obj *proto.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Address",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthdate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*proto.DateOfBirth)
	fc.Result = res
	return ec.marshalODateOfBirth2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐDateOfBirth(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_id(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessAccount().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_companyName(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_companyAddress(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessAccount().PhoneNumber(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*proto.PhoneNumber)
	fc.Result = res
	return ec.marshalOPhoneNumber2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_category(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_media(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessAccount().Media(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*proto.Media)
	fc.Result = res
	return ec.marshalOMedia2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_password(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_email(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_isActive(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_typeOfBusiness(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessAccount().TypeOfBusiness(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*proto.BusinessType)
	fc.Result = res
	return ec.marshalOBusinessType2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐBusinessType(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_businessGoals(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessGoals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_businessStage(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessStage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_merchantType(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessAccount().MerchantType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*proto.MerchantType)
	fc.Result = res
	return ec.marshalOMerchantType2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐMerchantType(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_paymentDetails(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessAccount().PaymentDetails(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*proto.PaymentProcessingMethods)
	fc.Result = res
	return ec.marshalOPaymentProcessingMethods2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐPaymentProcessingMethods(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_servicesManagedByBlackspace(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessAccount().ServicesManagedByBlackspace(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*proto.ServicesManagedByBlackspace)
	fc.Result = res
	return ec.marshalOServicesManagedByBlackspace2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐServicesManagedByBlackspace(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_founderAddress(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessAccount().FounderAddress(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*proto.Address)
	fc.Result = res
	return ec.marshalOAddress2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_subscribedTopics(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessAccount().SubscribedTopics(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*proto.Topics)
	fc.Result = res
	return ec.marshalOTopics2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐTopics(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessAccount_authnId(ctx context.Context, field graphql.CollectedField, obj *model.BusinessAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessAccount().AuthnID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCategory_Tech(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tech, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCategory_CharitiesEducationMembership(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CharitiesEducationMembership, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCategory_FoodAndDrink(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FoodAndDrink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCategory_HealthCareAndFitness(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HealthCareAndFitness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCategory_HomeAndRepair(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HomeAndRepair, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCategory_LeisureAndEntertainment(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeisureAndEntertainment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCategory_ProfessionalServices(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfessionalServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCategory_Retail(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Retail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCategory_Transportation(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Transportation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCategory_BeautyAndPersonalCare(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeautyAndPersonalCare, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Marketing(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Marketing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Travel(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Travel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Interior_Design(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorDesign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Music(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Music, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Technology(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Technology, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Food(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Food, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Restaurants(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Restaurants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Polictics(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Polictics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Health_And_Beauty(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HealthAndBeauty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Design(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Design, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Non_Profit(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonProfit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Jewelry(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Jewelry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Gaming(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gaming, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Magazine(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Magazine, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Photography(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Photography, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Fitenss(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fitenss, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Consulting(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Consulting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Fashion(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fashion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Services(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Services, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_Art(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessSubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Art, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessType_category(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*proto.BusinessCategory)
	fc.Result = res
	return ec.marshalOBusinessCategory2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐBusinessCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessType_subCategory(ctx context.Context, field graphql.CollectedField, obj *proto.BusinessType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*proto.BusinessSubCategory)
	fc.Result = res
	return ec.marshalOBusinessSubCategory2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐBusinessSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _DateOfBirth_Month(ctx context.Context, field graphql.CollectedField, obj *proto.DateOfBirth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DateOfBirth",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DateOfBirth_Day(ctx context.Context, field graphql.CollectedField, obj *proto.DateOfBirth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DateOfBirth",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DateOfBirth_Year(ctx context.Context, field graphql.CollectedField, obj *proto.DateOfBirth) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DateOfBirth",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteBusinessAccountResponse_result(ctx context.Context, field graphql.CollectedField, obj *proto.DeleteBusinessAccountResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeleteBusinessAccountResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_id(ctx context.Context, field graphql.CollectedField, obj *proto.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_website(ctx context.Context, field graphql.CollectedField, obj *proto.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Website, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_instagram(ctx context.Context, field graphql.CollectedField, obj *proto.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Instagram, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_facebook(ctx context.Context, field graphql.CollectedField, obj *proto.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facebook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_linkedIn(ctx context.Context, field graphql.CollectedField, obj *proto.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkedIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_pinterest(ctx context.Context, field graphql.CollectedField, obj *proto.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pinterest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MerchantType_SoleProprietor(ctx context.Context, field graphql.CollectedField, obj *proto.MerchantType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MerchantType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SoleProprietor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MerchantType_SideProject(ctx context.Context, field graphql.CollectedField, obj *proto.MerchantType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MerchantType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SideProject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MerchantType_CasualUse(ctx context.Context, field graphql.CollectedField, obj *proto.MerchantType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MerchantType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CasualUse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MerchantType_LLCCorporation(ctx context.Context, field graphql.CollectedField, obj *proto.MerchantType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MerchantType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LLCCorporation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MerchantType_Partnership(ctx context.Context, field graphql.CollectedField, obj *proto.MerchantType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MerchantType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Partnership, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MerchantType_Charity(ctx context.Context, field graphql.CollectedField, obj *proto.MerchantType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MerchantType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Charity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MerchantType_ReligiousOrganization(ctx context.Context, field graphql.CollectedField, obj *proto.MerchantType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MerchantType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReligiousOrganization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MerchantType_OnePersonBusiness(ctx context.Context, field graphql.CollectedField, obj *proto.MerchantType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MerchantType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnePersonBusiness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CreateBusinessAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CreateBusinessAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBusinessAccount(rctx, args["input"].(proto.CreateBusinessAccountRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessAccount)
	fc.Result = res
	return ec.marshalNBusinessAccount2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_UpdateBusinessAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_UpdateBusinessAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBusinessAccount(rctx, args["input"].(proto.UpdateBusinessAccountRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessAccount)
	fc.Result = res
	return ec.marshalNBusinessAccount2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DeleteBusinessAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DeleteBusinessAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBusinessAccount(rctx, args["id"].(proto.DeleteBusinessAccountRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*proto.DeleteBusinessAccountResponse)
	fc.Result = res
	return ec.marshalNDeleteBusinessAccountResponse2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐDeleteBusinessAccountResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMedium_MobilePhone(ctx context.Context, field graphql.CollectedField, obj *proto.PaymentMedium) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMedium",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MobilePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMedium_Tablet(ctx context.Context, field graphql.CollectedField, obj *proto.PaymentMedium) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMedium",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tablet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentMedium_Computer(ctx context.Context, field graphql.CollectedField, obj *proto.PaymentMedium) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentMedium",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Computer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentOptions_BrickAndMortar(ctx context.Context, field graphql.CollectedField, obj *proto.PaymentOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrickAndMortar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentOptions_OnTheGo(ctx context.Context, field graphql.CollectedField, obj *proto.PaymentOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnTheGo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentOptions_Online(ctx context.Context, field graphql.CollectedField, obj *proto.PaymentOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Online, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentOptions_ThroughInvoices(ctx context.Context, field graphql.CollectedField, obj *proto.PaymentOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThroughInvoices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentProcessingMethods_paymentOptions(ctx context.Context, field graphql.CollectedField, obj *proto.PaymentProcessingMethods) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentProcessingMethods",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentOptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*proto.PaymentOptions)
	fc.Result = res
	return ec.marshalOPaymentOptions2ᚕᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐPaymentOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _PaymentProcessingMethods_medium(ctx context.Context, field graphql.CollectedField, obj *proto.PaymentProcessingMethods) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PaymentProcessingMethods",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Medium, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*proto.PaymentMedium)
	fc.Result = res
	return ec.marshalOPaymentMedium2ᚕᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐPaymentMedium(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneNumber_number(ctx context.Context, field graphql.CollectedField, obj *proto.PhoneNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneNumber_type(ctx context.Context, field graphql.CollectedField, obj *proto.PhoneNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*proto.PhoneType)
	fc.Result = res
	return ec.marshalOPhoneType2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐPhoneType(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneType_home(ctx context.Context, field graphql.CollectedField, obj *proto.PhoneType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhoneType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Home, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneType_work(ctx context.Context, field graphql.CollectedField, obj *proto.PhoneType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhoneType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Work, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneType_mobile(ctx context.Context, field graphql.CollectedField, obj *proto.PhoneType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhoneType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessAccount(rctx, args["input"].(proto.GetBusinessAccountRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessAccount)
	fc.Result = res
	return ec.marshalNBusinessAccount2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessAccounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessAccounts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessAccounts(rctx, args["limit"].(proto.GetBusinessAccountsRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.BusinessAccount)
	fc.Result = res
	return ec.marshalNBusinessAccount2ᚕᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessAccountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _ServicesManagedByBlackspace_ItemCatalog(ctx context.Context, field graphql.CollectedField, obj *proto.ServicesManagedByBlackspace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServicesManagedByBlackspace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemCatalog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ServicesManagedByBlackspace_GiftCards(ctx context.Context, field graphql.CollectedField, obj *proto.ServicesManagedByBlackspace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServicesManagedByBlackspace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GiftCards, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ServicesManagedByBlackspace_Discounts(ctx context.Context, field graphql.CollectedField, obj *proto.ServicesManagedByBlackspace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServicesManagedByBlackspace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ServicesManagedByBlackspace_MarketingCampaigns(ctx context.Context, field graphql.CollectedField, obj *proto.ServicesManagedByBlackspace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServicesManagedByBlackspace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketingCampaigns, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ServicesManagedByBlackspace_LoyaltyProgram(ctx context.Context, field graphql.CollectedField, obj *proto.ServicesManagedByBlackspace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServicesManagedByBlackspace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoyaltyProgram, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ServicesManagedByBlackspace_FundingYourBusiness(ctx context.Context, field graphql.CollectedField, obj *proto.ServicesManagedByBlackspace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServicesManagedByBlackspace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingYourBusiness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ServicesManagedByBlackspace_Analytics(ctx context.Context, field graphql.CollectedField, obj *proto.ServicesManagedByBlackspace) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServicesManagedByBlackspace",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Analytics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Topics_id(ctx context.Context, field graphql.CollectedField, obj *proto.Topics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Topics_Technology(ctx context.Context, field graphql.CollectedField, obj *proto.Topics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Technology, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Topics_Health(ctx context.Context, field graphql.CollectedField, obj *proto.Topics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Health, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Topics_Food(ctx context.Context, field graphql.CollectedField, obj *proto.Topics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Food, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Topics_Science(ctx context.Context, field graphql.CollectedField, obj *proto.Topics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Science, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Topics_Music(ctx context.Context, field graphql.CollectedField, obj *proto.Topics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Music, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Topics_Travel(ctx context.Context, field graphql.CollectedField, obj *proto.Topics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Travel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Topics_Business(ctx context.Context, field graphql.CollectedField, obj *proto.Topics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Business, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Topics_Cooking(ctx context.Context, field graphql.CollectedField, obj *proto.Topics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooking, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Topics_FashionAndStyle(ctx context.Context, field graphql.CollectedField, obj *proto.Topics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FashionAndStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Topics_Design(ctx context.Context, field graphql.CollectedField, obj *proto.Topics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Design, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Topics_Art(ctx context.Context, field graphql.CollectedField, obj *proto.Topics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Topics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Art, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddressInput(ctx context.Context, obj interface{}) (model.Address, error) {
	var it model.Address
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
			it.Address, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ApartmentUnit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ApartmentUnit"))
			it.ApartmentUnit, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ZipCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ZipCode"))
			it.ZipCode, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "City":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("City"))
			it.City, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "State":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("State"))
			it.State, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthdate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdate"))
			it.Birthdate, err = ec.unmarshalODateOfBirthInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐDateOfBirth(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBusinessAccountInput(ctx context.Context, obj interface{}) (model.BusinessAccount, error) {
	var it model.BusinessAccount
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "companyName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyName"))
			it.CompanyName, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyAddress"))
			it.CompanyAddress, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalOPhoneNumberInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐPhoneNumber(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "media":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("media"))
			it.Media, err = ec.unmarshalOMediaInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐMedia(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeOfBusiness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeOfBusiness"))
			it.TypeOfBusiness, err = ec.unmarshalOBusinessTypeInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessType(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessGoals":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("businessGoals"))
			it.BusinessGoals, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessStage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("businessStage"))
			it.BusinessStage, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "merchantType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merchantType"))
			it.MerchantType, err = ec.unmarshalOMerchantTypeInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐMerchantType(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentDetails":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentDetails"))
			it.PaymentDetails, err = ec.unmarshalOPaymentProcessingMethodsInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐPaymentProcessingMethods(ctx, v)
			if err != nil {
				return it, err
			}
		case "servicesManagedByBlackspace":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("servicesManagedByBlackspace"))
			it.ServicesManagedByBlackspace, err = ec.unmarshalOServicesManagedByBlackspaceInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐServicesManagedByBlackspace(ctx, v)
			if err != nil {
				return it, err
			}
		case "founderAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("founderAddress"))
			it.FounderAddress, err = ec.unmarshalOAddressInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐAddress(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscribedTopics":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscribedTopics"))
			it.SubscribedTopics, err = ec.unmarshalOTopicsInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐTopics(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBusinessCategoryInput(ctx context.Context, obj interface{}) (model.BusinessCategory, error) {
	var it model.BusinessCategory
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Tech":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tech"))
			it.Tech, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "CharitiesEducationMembership":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CharitiesEducationMembership"))
			it.CharitiesEducationMembership, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "FoodAndDrink":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FoodAndDrink"))
			it.FoodAndDrink, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "HealthCareAndFitness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HealthCareAndFitness"))
			it.HealthCareAndFitness, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "HomeAndRepair":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HomeAndRepair"))
			it.HomeAndRepair, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "LeisureAndEntertainment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LeisureAndEntertainment"))
			it.LeisureAndEntertainment, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ProfessionalServices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ProfessionalServices"))
			it.ProfessionalServices, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Retail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Retail"))
			it.Retail, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Transportation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Transportation"))
			it.Transportation, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeautyAndPersonalCare":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BeautyAndPersonalCare"))
			it.BeautyAndPersonalCare, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBusinessSubCategoryInput(ctx context.Context, obj interface{}) (model.BusinessSubCategory, error) {
	var it model.BusinessSubCategory
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Marketing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Marketing"))
			it.Marketing, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Travel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Travel"))
			it.Travel, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Interior_Design":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Interior_Design"))
			it.Interior_Design, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Music":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Music"))
			it.Music, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Technology":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Technology"))
			it.Technology, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Food":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Food"))
			it.Food, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Restaurants":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Restaurants"))
			it.Restaurants, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Polictics":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Polictics"))
			it.Polictics, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Health_And_Beauty":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Health_And_Beauty"))
			it.Health_And_Beauty, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Design":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Design"))
			it.Design, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Non_Profit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Non_Profit"))
			it.Non_Profit, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Jewelry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Jewelry"))
			it.Jewelry, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Gaming":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Gaming"))
			it.Gaming, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Magazine":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Magazine"))
			it.Magazine, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Photography":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Photography"))
			it.Photography, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Fitenss":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Fitenss"))
			it.Fitenss, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Consulting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Consulting"))
			it.Consulting, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Fashion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Fashion"))
			it.Fashion, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Services":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Services"))
			it.Services, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Art":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Art"))
			it.Art, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBusinessTypeInput(ctx context.Context, obj interface{}) (model.BusinessType, error) {
	var it model.BusinessType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalOBusinessCategoryInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessCategory(ctx, v)
			if err != nil {
				return it, err
			}
		case "subCategory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subCategory"))
			it.SubCategory, err = ec.unmarshalOBusinessSubCategoryInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessSubCategory(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateBusinessAccountRequest(ctx context.Context, obj interface{}) (proto.CreateBusinessAccountRequest, error) {
	var it proto.CreateBusinessAccountRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessAccount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("businessAccount"))
			it.BusinessAccount, err = ec.unmarshalOBusinessAccountInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessAccount(ctx, v)
			if err != nil {
				return it, err
			}
		case "authnId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authnId"))
			it.AuthnID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDateOfBirthInput(ctx context.Context, obj interface{}) (model.DateOfBirth, error) {
	var it model.DateOfBirth
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Month"))
			it.Month, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Day"))
			it.Day, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Year"))
			it.Year, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteBusinessAccountRequest(ctx context.Context, obj interface{}) (proto.DeleteBusinessAccountRequest, error) {
	var it proto.DeleteBusinessAccountRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteBusinessAccountsRequest(ctx context.Context, obj interface{}) (proto.DeleteBusinessAccountsRequest, error) {
	var it proto.DeleteBusinessAccountsRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetBusinessAccountRequest(ctx context.Context, obj interface{}) (proto.GetBusinessAccountRequest, error) {
	var it proto.GetBusinessAccountRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetBusinessAccountsRequest(ctx context.Context, obj interface{}) (proto.GetBusinessAccountsRequest, error) {
	var it proto.GetBusinessAccountsRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMediaInput(ctx context.Context, obj interface{}) (model.Media, error) {
	var it model.Media
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "website":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			it.Website, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "instagram":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instagram"))
			it.Instagram, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "facebook":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facebook"))
			it.Facebook, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "linkedIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linkedIn"))
			it.LinkedIn, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "pinterest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinterest"))
			it.Pinterest, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMerchantTypeInput(ctx context.Context, obj interface{}) (model.MerchantType, error) {
	var it model.MerchantType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "SoleProprietor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SoleProprietor"))
			it.SoleProprietor, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "SideProject":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SideProject"))
			it.SideProject, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "CasualUse":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CasualUse"))
			it.CasualUse, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "LLCCorporation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LLCCorporation"))
			it.LLCCorporation, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Partnership":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Partnership"))
			it.Partnership, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Charity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Charity"))
			it.Charity, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReligiousOrganization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReligiousOrganization"))
			it.ReligiousOrganization, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "OnePersonBusiness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OnePersonBusiness"))
			it.OnePersonBusiness, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentMediumInput(ctx context.Context, obj interface{}) (model.PaymentMedium, error) {
	var it model.PaymentMedium
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "MobilePhone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MobilePhone"))
			it.MobilePhone, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Tablet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tablet"))
			it.Tablet, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Computer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Computer"))
			it.Computer, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentOptionsInput(ctx context.Context, obj interface{}) (model.PaymentOptions, error) {
	var it model.PaymentOptions
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "BrickAndMortar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BrickAndMortar"))
			it.BrickAndMortar, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "OnTheGo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OnTheGo"))
			it.OnTheGo, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Online"))
			it.Online, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ThroughInvoices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ThroughInvoices"))
			it.ThroughInvoices, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaymentProcessingMethodsInput(ctx context.Context, obj interface{}) (model.PaymentProcessingMethods, error) {
	var it model.PaymentProcessingMethods
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "paymentOptions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentOptions"))
			it.PaymentOptions, err = ec.unmarshalOPaymentOptionsInput2ᚕᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐPaymentOptions(ctx, v)
			if err != nil {
				return it, err
			}
		case "medium":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("medium"))
			it.Medium, err = ec.unmarshalOPaymentMediumInput2ᚕᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐPaymentMedium(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhoneNumberInput(ctx context.Context, obj interface{}) (model.PhoneNumber, error) {
	var it model.PhoneNumber
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
			it.Number, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOPhoneTypeInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐPhoneType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhoneTypeInput(ctx context.Context, obj interface{}) (model.PhoneType, error) {
	var it model.PhoneType
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "home":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("home"))
			it.Home, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "work":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("work"))
			it.Work, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputServicesManagedByBlackspaceInput(ctx context.Context, obj interface{}) (model.ServicesManagedByBlackspace, error) {
	var it model.ServicesManagedByBlackspace
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ItemCatalog":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ItemCatalog"))
			it.ItemCatalog, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "GiftCards":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GiftCards"))
			it.GiftCards, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Discounts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Discounts"))
			it.Discounts, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "MarketingCampaigns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MarketingCampaigns"))
			it.MarketingCampaigns, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "LoyaltyProgram":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LoyaltyProgram"))
			it.LoyaltyProgram, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "FundingYourBusiness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FundingYourBusiness"))
			it.FundingYourBusiness, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Analytics":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Analytics"))
			it.Analytics, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTopicsInput(ctx context.Context, obj interface{}) (model.Topics, error) {
	var it model.Topics
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Technology":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Technology"))
			it.Technology, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Health":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Health"))
			it.Health, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Food":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Food"))
			it.Food, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Science":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Science"))
			it.Science, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Music":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Music"))
			it.Music, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Travel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Travel"))
			it.Travel, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Business":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Business"))
			it.Business, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Cooking":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Cooking"))
			it.Cooking, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "FashionAndStyle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FashionAndStyle"))
			it.FashionAndStyle, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Design":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Design"))
			it.Design, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Art":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Art"))
			it.Art, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateBusinessAccountRequest(ctx context.Context, obj interface{}) (proto.UpdateBusinessAccountRequest, error) {
	var it proto.UpdateBusinessAccountRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessAccount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("businessAccount"))
			it.BusinessAccount, err = ec.unmarshalOBusinessAccountInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessAccount(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var addressImplementors = []string{"Address"}

func (ec *executionContext) _Address(ctx context.Context, sel ast.SelectionSet, obj *proto.Address) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addressImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Address")
		case "Address":
			out.Values[i] = ec._Address_Address(ctx, field, obj)
		case "ApartmentUnit":
			out.Values[i] = ec._Address_ApartmentUnit(ctx, field, obj)
		case "ZipCode":
			out.Values[i] = ec._Address_ZipCode(ctx, field, obj)
		case "City":
			out.Values[i] = ec._Address_City(ctx, field, obj)
		case "State":
			out.Values[i] = ec._Address_State(ctx, field, obj)
		case "birthdate":
			out.Values[i] = ec._Address_birthdate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessAccountImplementors = []string{"BusinessAccount"}

func (ec *executionContext) _BusinessAccount(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessAccountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessAccount")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessAccount_id(ctx, field, obj)
				return res
			})
		case "companyName":
			out.Values[i] = ec._BusinessAccount_companyName(ctx, field, obj)
		case "companyAddress":
			out.Values[i] = ec._BusinessAccount_companyAddress(ctx, field, obj)
		case "phoneNumber":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessAccount_phoneNumber(ctx, field, obj)
				return res
			})
		case "category":
			out.Values[i] = ec._BusinessAccount_category(ctx, field, obj)
		case "media":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessAccount_media(ctx, field, obj)
				return res
			})
		case "password":
			out.Values[i] = ec._BusinessAccount_password(ctx, field, obj)
		case "email":
			out.Values[i] = ec._BusinessAccount_email(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._BusinessAccount_isActive(ctx, field, obj)
		case "typeOfBusiness":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessAccount_typeOfBusiness(ctx, field, obj)
				return res
			})
		case "businessGoals":
			out.Values[i] = ec._BusinessAccount_businessGoals(ctx, field, obj)
		case "businessStage":
			out.Values[i] = ec._BusinessAccount_businessStage(ctx, field, obj)
		case "merchantType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessAccount_merchantType(ctx, field, obj)
				return res
			})
		case "paymentDetails":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessAccount_paymentDetails(ctx, field, obj)
				return res
			})
		case "servicesManagedByBlackspace":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessAccount_servicesManagedByBlackspace(ctx, field, obj)
				return res
			})
		case "founderAddress":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessAccount_founderAddress(ctx, field, obj)
				return res
			})
		case "subscribedTopics":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessAccount_subscribedTopics(ctx, field, obj)
				return res
			})
		case "authnId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessAccount_authnId(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessCategoryImplementors = []string{"BusinessCategory"}

func (ec *executionContext) _BusinessCategory(ctx context.Context, sel ast.SelectionSet, obj *proto.BusinessCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessCategory")
		case "Tech":
			out.Values[i] = ec._BusinessCategory_Tech(ctx, field, obj)
		case "CharitiesEducationMembership":
			out.Values[i] = ec._BusinessCategory_CharitiesEducationMembership(ctx, field, obj)
		case "FoodAndDrink":
			out.Values[i] = ec._BusinessCategory_FoodAndDrink(ctx, field, obj)
		case "HealthCareAndFitness":
			out.Values[i] = ec._BusinessCategory_HealthCareAndFitness(ctx, field, obj)
		case "HomeAndRepair":
			out.Values[i] = ec._BusinessCategory_HomeAndRepair(ctx, field, obj)
		case "LeisureAndEntertainment":
			out.Values[i] = ec._BusinessCategory_LeisureAndEntertainment(ctx, field, obj)
		case "ProfessionalServices":
			out.Values[i] = ec._BusinessCategory_ProfessionalServices(ctx, field, obj)
		case "Retail":
			out.Values[i] = ec._BusinessCategory_Retail(ctx, field, obj)
		case "Transportation":
			out.Values[i] = ec._BusinessCategory_Transportation(ctx, field, obj)
		case "BeautyAndPersonalCare":
			out.Values[i] = ec._BusinessCategory_BeautyAndPersonalCare(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessSubCategoryImplementors = []string{"BusinessSubCategory"}

func (ec *executionContext) _BusinessSubCategory(ctx context.Context, sel ast.SelectionSet, obj *proto.BusinessSubCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessSubCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessSubCategory")
		case "Marketing":
			out.Values[i] = ec._BusinessSubCategory_Marketing(ctx, field, obj)
		case "Travel":
			out.Values[i] = ec._BusinessSubCategory_Travel(ctx, field, obj)
		case "Interior_Design":
			out.Values[i] = ec._BusinessSubCategory_Interior_Design(ctx, field, obj)
		case "Music":
			out.Values[i] = ec._BusinessSubCategory_Music(ctx, field, obj)
		case "Technology":
			out.Values[i] = ec._BusinessSubCategory_Technology(ctx, field, obj)
		case "Food":
			out.Values[i] = ec._BusinessSubCategory_Food(ctx, field, obj)
		case "Restaurants":
			out.Values[i] = ec._BusinessSubCategory_Restaurants(ctx, field, obj)
		case "Polictics":
			out.Values[i] = ec._BusinessSubCategory_Polictics(ctx, field, obj)
		case "Health_And_Beauty":
			out.Values[i] = ec._BusinessSubCategory_Health_And_Beauty(ctx, field, obj)
		case "Design":
			out.Values[i] = ec._BusinessSubCategory_Design(ctx, field, obj)
		case "Non_Profit":
			out.Values[i] = ec._BusinessSubCategory_Non_Profit(ctx, field, obj)
		case "Jewelry":
			out.Values[i] = ec._BusinessSubCategory_Jewelry(ctx, field, obj)
		case "Gaming":
			out.Values[i] = ec._BusinessSubCategory_Gaming(ctx, field, obj)
		case "Magazine":
			out.Values[i] = ec._BusinessSubCategory_Magazine(ctx, field, obj)
		case "Photography":
			out.Values[i] = ec._BusinessSubCategory_Photography(ctx, field, obj)
		case "Fitenss":
			out.Values[i] = ec._BusinessSubCategory_Fitenss(ctx, field, obj)
		case "Consulting":
			out.Values[i] = ec._BusinessSubCategory_Consulting(ctx, field, obj)
		case "Fashion":
			out.Values[i] = ec._BusinessSubCategory_Fashion(ctx, field, obj)
		case "Services":
			out.Values[i] = ec._BusinessSubCategory_Services(ctx, field, obj)
		case "Art":
			out.Values[i] = ec._BusinessSubCategory_Art(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessTypeImplementors = []string{"BusinessType"}

func (ec *executionContext) _BusinessType(ctx context.Context, sel ast.SelectionSet, obj *proto.BusinessType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessType")
		case "category":
			out.Values[i] = ec._BusinessType_category(ctx, field, obj)
		case "subCategory":
			out.Values[i] = ec._BusinessType_subCategory(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dateOfBirthImplementors = []string{"DateOfBirth"}

func (ec *executionContext) _DateOfBirth(ctx context.Context, sel ast.SelectionSet, obj *proto.DateOfBirth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dateOfBirthImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DateOfBirth")
		case "Month":
			out.Values[i] = ec._DateOfBirth_Month(ctx, field, obj)
		case "Day":
			out.Values[i] = ec._DateOfBirth_Day(ctx, field, obj)
		case "Year":
			out.Values[i] = ec._DateOfBirth_Year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteBusinessAccountResponseImplementors = []string{"DeleteBusinessAccountResponse"}

func (ec *executionContext) _DeleteBusinessAccountResponse(ctx context.Context, sel ast.SelectionSet, obj *proto.DeleteBusinessAccountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteBusinessAccountResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteBusinessAccountResponse")
		case "result":
			out.Values[i] = ec._DeleteBusinessAccountResponse_result(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mediaImplementors = []string{"Media"}

func (ec *executionContext) _Media(ctx context.Context, sel ast.SelectionSet, obj *proto.Media) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Media")
		case "id":
			out.Values[i] = ec._Media_id(ctx, field, obj)
		case "website":
			out.Values[i] = ec._Media_website(ctx, field, obj)
		case "instagram":
			out.Values[i] = ec._Media_instagram(ctx, field, obj)
		case "facebook":
			out.Values[i] = ec._Media_facebook(ctx, field, obj)
		case "linkedIn":
			out.Values[i] = ec._Media_linkedIn(ctx, field, obj)
		case "pinterest":
			out.Values[i] = ec._Media_pinterest(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var merchantTypeImplementors = []string{"MerchantType"}

func (ec *executionContext) _MerchantType(ctx context.Context, sel ast.SelectionSet, obj *proto.MerchantType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, merchantTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MerchantType")
		case "SoleProprietor":
			out.Values[i] = ec._MerchantType_SoleProprietor(ctx, field, obj)
		case "SideProject":
			out.Values[i] = ec._MerchantType_SideProject(ctx, field, obj)
		case "CasualUse":
			out.Values[i] = ec._MerchantType_CasualUse(ctx, field, obj)
		case "LLCCorporation":
			out.Values[i] = ec._MerchantType_LLCCorporation(ctx, field, obj)
		case "Partnership":
			out.Values[i] = ec._MerchantType_Partnership(ctx, field, obj)
		case "Charity":
			out.Values[i] = ec._MerchantType_Charity(ctx, field, obj)
		case "ReligiousOrganization":
			out.Values[i] = ec._MerchantType_ReligiousOrganization(ctx, field, obj)
		case "OnePersonBusiness":
			out.Values[i] = ec._MerchantType_OnePersonBusiness(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "CreateBusinessAccount":
			out.Values[i] = ec._Mutation_CreateBusinessAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateBusinessAccount":
			out.Values[i] = ec._Mutation_UpdateBusinessAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "DeleteBusinessAccount":
			out.Values[i] = ec._Mutation_DeleteBusinessAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentMediumImplementors = []string{"PaymentMedium"}

func (ec *executionContext) _PaymentMedium(ctx context.Context, sel ast.SelectionSet, obj *proto.PaymentMedium) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentMediumImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentMedium")
		case "MobilePhone":
			out.Values[i] = ec._PaymentMedium_MobilePhone(ctx, field, obj)
		case "Tablet":
			out.Values[i] = ec._PaymentMedium_Tablet(ctx, field, obj)
		case "Computer":
			out.Values[i] = ec._PaymentMedium_Computer(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentOptionsImplementors = []string{"PaymentOptions"}

func (ec *executionContext) _PaymentOptions(ctx context.Context, sel ast.SelectionSet, obj *proto.PaymentOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentOptionsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentOptions")
		case "BrickAndMortar":
			out.Values[i] = ec._PaymentOptions_BrickAndMortar(ctx, field, obj)
		case "OnTheGo":
			out.Values[i] = ec._PaymentOptions_OnTheGo(ctx, field, obj)
		case "Online":
			out.Values[i] = ec._PaymentOptions_Online(ctx, field, obj)
		case "ThroughInvoices":
			out.Values[i] = ec._PaymentOptions_ThroughInvoices(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentProcessingMethodsImplementors = []string{"PaymentProcessingMethods"}

func (ec *executionContext) _PaymentProcessingMethods(ctx context.Context, sel ast.SelectionSet, obj *proto.PaymentProcessingMethods) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentProcessingMethodsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymentProcessingMethods")
		case "paymentOptions":
			out.Values[i] = ec._PaymentProcessingMethods_paymentOptions(ctx, field, obj)
		case "medium":
			out.Values[i] = ec._PaymentProcessingMethods_medium(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var phoneNumberImplementors = []string{"PhoneNumber"}

func (ec *executionContext) _PhoneNumber(ctx context.Context, sel ast.SelectionSet, obj *proto.PhoneNumber) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, phoneNumberImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PhoneNumber")
		case "number":
			out.Values[i] = ec._PhoneNumber_number(ctx, field, obj)
		case "type":
			out.Values[i] = ec._PhoneNumber_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var phoneTypeImplementors = []string{"PhoneType"}

func (ec *executionContext) _PhoneType(ctx context.Context, sel ast.SelectionSet, obj *proto.PhoneType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, phoneTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PhoneType")
		case "home":
			out.Values[i] = ec._PhoneType_home(ctx, field, obj)
		case "work":
			out.Values[i] = ec._PhoneType_work(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._PhoneType_mobile(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getBusinessAccount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessAccount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessAccounts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessAccounts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var servicesManagedByBlackspaceImplementors = []string{"ServicesManagedByBlackspace"}

func (ec *executionContext) _ServicesManagedByBlackspace(ctx context.Context, sel ast.SelectionSet, obj *proto.ServicesManagedByBlackspace) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, servicesManagedByBlackspaceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServicesManagedByBlackspace")
		case "ItemCatalog":
			out.Values[i] = ec._ServicesManagedByBlackspace_ItemCatalog(ctx, field, obj)
		case "GiftCards":
			out.Values[i] = ec._ServicesManagedByBlackspace_GiftCards(ctx, field, obj)
		case "Discounts":
			out.Values[i] = ec._ServicesManagedByBlackspace_Discounts(ctx, field, obj)
		case "MarketingCampaigns":
			out.Values[i] = ec._ServicesManagedByBlackspace_MarketingCampaigns(ctx, field, obj)
		case "LoyaltyProgram":
			out.Values[i] = ec._ServicesManagedByBlackspace_LoyaltyProgram(ctx, field, obj)
		case "FundingYourBusiness":
			out.Values[i] = ec._ServicesManagedByBlackspace_FundingYourBusiness(ctx, field, obj)
		case "Analytics":
			out.Values[i] = ec._ServicesManagedByBlackspace_Analytics(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var topicsImplementors = []string{"Topics"}

func (ec *executionContext) _Topics(ctx context.Context, sel ast.SelectionSet, obj *proto.Topics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Topics")
		case "id":
			out.Values[i] = ec._Topics_id(ctx, field, obj)
		case "Technology":
			out.Values[i] = ec._Topics_Technology(ctx, field, obj)
		case "Health":
			out.Values[i] = ec._Topics_Health(ctx, field, obj)
		case "Food":
			out.Values[i] = ec._Topics_Food(ctx, field, obj)
		case "Science":
			out.Values[i] = ec._Topics_Science(ctx, field, obj)
		case "Music":
			out.Values[i] = ec._Topics_Music(ctx, field, obj)
		case "Travel":
			out.Values[i] = ec._Topics_Travel(ctx, field, obj)
		case "Business":
			out.Values[i] = ec._Topics_Business(ctx, field, obj)
		case "Cooking":
			out.Values[i] = ec._Topics_Cooking(ctx, field, obj)
		case "FashionAndStyle":
			out.Values[i] = ec._Topics_FashionAndStyle(ctx, field, obj)
		case "Design":
			out.Values[i] = ec._Topics_Design(ctx, field, obj)
		case "Art":
			out.Values[i] = ec._Topics_Art(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNBusinessAccount2githubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessAccount(ctx context.Context, sel ast.SelectionSet, v model.BusinessAccount) graphql.Marshaler {
	return ec._BusinessAccount(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessAccount2ᚕᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessAccountᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.BusinessAccount) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBusinessAccount2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBusinessAccount2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessAccount(ctx context.Context, sel ast.SelectionSet, v *model.BusinessAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessAccount(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateBusinessAccountRequest2githubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐCreateBusinessAccountRequest(ctx context.Context, v interface{}) (proto.CreateBusinessAccountRequest, error) {
	res, err := ec.unmarshalInputCreateBusinessAccountRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteBusinessAccountRequest2githubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐDeleteBusinessAccountRequest(ctx context.Context, v interface{}) (proto.DeleteBusinessAccountRequest, error) {
	res, err := ec.unmarshalInputDeleteBusinessAccountRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteBusinessAccountResponse2githubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐDeleteBusinessAccountResponse(ctx context.Context, sel ast.SelectionSet, v proto.DeleteBusinessAccountResponse) graphql.Marshaler {
	return ec._DeleteBusinessAccountResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteBusinessAccountResponse2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐDeleteBusinessAccountResponse(ctx context.Context, sel ast.SelectionSet, v *proto.DeleteBusinessAccountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteBusinessAccountResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetBusinessAccountRequest2githubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐGetBusinessAccountRequest(ctx context.Context, v interface{}) (proto.GetBusinessAccountRequest, error) {
	res, err := ec.unmarshalInputGetBusinessAccountRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGetBusinessAccountsRequest2githubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐGetBusinessAccountsRequest(ctx context.Context, v interface{}) (proto.GetBusinessAccountsRequest, error) {
	res, err := ec.unmarshalInputGetBusinessAccountsRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpdateBusinessAccountRequest2githubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐUpdateBusinessAccountRequest(ctx context.Context, v interface{}) (proto.UpdateBusinessAccountRequest, error) {
	res, err := ec.unmarshalInputUpdateBusinessAccountRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOAddress2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐAddress(ctx context.Context, sel ast.SelectionSet, v *proto.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Address(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAddressInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐAddress(ctx context.Context, v interface{}) (*model.Address, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAddressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBusinessAccountInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessAccount(ctx context.Context, v interface{}) (*model.BusinessAccount, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBusinessAccountInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBusinessCategory2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐBusinessCategory(ctx context.Context, sel ast.SelectionSet, v *proto.BusinessCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BusinessCategory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBusinessCategoryInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessCategory(ctx context.Context, v interface{}) (*model.BusinessCategory, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBusinessCategoryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBusinessSubCategory2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐBusinessSubCategory(ctx context.Context, sel ast.SelectionSet, v *proto.BusinessSubCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BusinessSubCategory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBusinessSubCategoryInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessSubCategory(ctx context.Context, v interface{}) (*model.BusinessSubCategory, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBusinessSubCategoryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBusinessType2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐBusinessType(ctx context.Context, sel ast.SelectionSet, v *proto.BusinessType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BusinessType(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBusinessTypeInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐBusinessType(ctx context.Context, v interface{}) (*model.BusinessType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBusinessTypeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateOfBirth2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐDateOfBirth(ctx context.Context, sel ast.SelectionSet, v *proto.DateOfBirth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DateOfBirth(ctx, sel, v)
}

func (ec *executionContext) unmarshalODateOfBirthInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐDateOfBirth(ctx context.Context, v interface{}) (*model.DateOfBirth, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDateOfBirthInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint(ctx context.Context, v interface{}) ([]*int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint(ctx context.Context, sel ast.SelectionSet, v []*int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) marshalOMedia2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐMedia(ctx context.Context, sel ast.SelectionSet, v *proto.Media) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Media(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMediaInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐMedia(ctx context.Context, v interface{}) (*model.Media, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMediaInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMerchantType2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐMerchantType(ctx context.Context, sel ast.SelectionSet, v *proto.MerchantType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MerchantType(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMerchantTypeInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐMerchantType(ctx context.Context, v interface{}) (*model.MerchantType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMerchantTypeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPaymentMedium2ᚕᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐPaymentMedium(ctx context.Context, sel ast.SelectionSet, v []*proto.PaymentMedium) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPaymentMedium2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐPaymentMedium(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPaymentMedium2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐPaymentMedium(ctx context.Context, sel ast.SelectionSet, v *proto.PaymentMedium) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymentMedium(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPaymentMediumInput2ᚕᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐPaymentMedium(ctx context.Context, v interface{}) ([]*model.PaymentMedium, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.PaymentMedium, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPaymentMediumInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐPaymentMedium(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPaymentMediumInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐPaymentMedium(ctx context.Context, v interface{}) (*model.PaymentMedium, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaymentMediumInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPaymentOptions2ᚕᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐPaymentOptions(ctx context.Context, sel ast.SelectionSet, v []*proto.PaymentOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPaymentOptions2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐPaymentOptions(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPaymentOptions2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐPaymentOptions(ctx context.Context, sel ast.SelectionSet, v *proto.PaymentOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymentOptions(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPaymentOptionsInput2ᚕᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐPaymentOptions(ctx context.Context, v interface{}) ([]*model.PaymentOptions, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.PaymentOptions, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPaymentOptionsInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐPaymentOptions(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPaymentOptionsInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐPaymentOptions(ctx context.Context, v interface{}) (*model.PaymentOptions, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaymentOptionsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPaymentProcessingMethods2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐPaymentProcessingMethods(ctx context.Context, sel ast.SelectionSet, v *proto.PaymentProcessingMethods) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymentProcessingMethods(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPaymentProcessingMethodsInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐPaymentProcessingMethods(ctx context.Context, v interface{}) (*model.PaymentProcessingMethods, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaymentProcessingMethodsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPhoneNumber2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐPhoneNumber(ctx context.Context, sel ast.SelectionSet, v *proto.PhoneNumber) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PhoneNumber(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPhoneNumberInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐPhoneNumber(ctx context.Context, v interface{}) (*model.PhoneNumber, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPhoneNumberInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPhoneType2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐPhoneType(ctx context.Context, sel ast.SelectionSet, v *proto.PhoneType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PhoneType(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPhoneTypeInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐPhoneType(ctx context.Context, v interface{}) (*model.PhoneType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPhoneTypeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOServicesManagedByBlackspace2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐServicesManagedByBlackspace(ctx context.Context, sel ast.SelectionSet, v *proto.ServicesManagedByBlackspace) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ServicesManagedByBlackspace(ctx, sel, v)
}

func (ec *executionContext) unmarshalOServicesManagedByBlackspaceInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐServicesManagedByBlackspace(ctx context.Context, v interface{}) (*model.ServicesManagedByBlackspace, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputServicesManagedByBlackspaceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOTopics2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋprotoᚐTopics(ctx context.Context, sel ast.SelectionSet, v *proto.Topics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Topics(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTopicsInput2ᚖgithubᚗcomᚋBlackspaceIncᚋBlackspacePlatformᚋsrcᚋservicesᚋbusiness_account_serviceᚋpkgᚋgraphql_apiᚋmodelᚐTopics(ctx context.Context, v interface{}) (*model.Topics, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTopicsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
