// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BusinessAccountServiceClient is the client API for BusinessAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessAccountServiceClient interface {
	// Creates a business account
	CreateBusinessAccount(ctx context.Context, in *CreateBusinessAccountRequest, opts ...grpc.CallOption) (*BusinessAccount, error)
	// Updates a business account
	UpdateBusinessAccount(ctx context.Context, in *UpdateBusinessAccountRequest, opts ...grpc.CallOption) (*BusinessAccount, error)
	// Deletes a given business account
	DeleteBusinessAccount(ctx context.Context, in *DeleteBusinessAccountRequest, opts ...grpc.CallOption) (*ResponseStatus, error)
	// Gets a business account
	GetBusinessAccount(ctx context.Context, in *GetBusinessAccountRequest, opts ...grpc.CallOption) (*BusinessAccount, error)
	// Gets multiple business accounts
	GetBusinessAccounts(ctx context.Context, in *GetBusinessAccountsRequest, opts ...grpc.CallOption) (*BusinessAccount, error)
}

type businessAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessAccountServiceClient(cc grpc.ClientConnInterface) BusinessAccountServiceClient {
	return &businessAccountServiceClient{cc}
}

func (c *businessAccountServiceClient) CreateBusinessAccount(ctx context.Context, in *CreateBusinessAccountRequest, opts ...grpc.CallOption) (*BusinessAccount, error) {
	out := new(BusinessAccount)
	err := c.cc.Invoke(ctx, "/BusinessAccountService/CreateBusinessAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessAccountServiceClient) UpdateBusinessAccount(ctx context.Context, in *UpdateBusinessAccountRequest, opts ...grpc.CallOption) (*BusinessAccount, error) {
	out := new(BusinessAccount)
	err := c.cc.Invoke(ctx, "/BusinessAccountService/UpdateBusinessAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessAccountServiceClient) DeleteBusinessAccount(ctx context.Context, in *DeleteBusinessAccountRequest, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/BusinessAccountService/DeleteBusinessAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessAccountServiceClient) GetBusinessAccount(ctx context.Context, in *GetBusinessAccountRequest, opts ...grpc.CallOption) (*BusinessAccount, error) {
	out := new(BusinessAccount)
	err := c.cc.Invoke(ctx, "/BusinessAccountService/GetBusinessAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessAccountServiceClient) GetBusinessAccounts(ctx context.Context, in *GetBusinessAccountsRequest, opts ...grpc.CallOption) (*BusinessAccount, error) {
	out := new(BusinessAccount)
	err := c.cc.Invoke(ctx, "/BusinessAccountService/GetBusinessAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessAccountServiceServer is the server API for BusinessAccountService service.
// All implementations must embed UnimplementedBusinessAccountServiceServer
// for forward compatibility
type BusinessAccountServiceServer interface {
	// Creates a business account
	CreateBusinessAccount(context.Context, *CreateBusinessAccountRequest) (*BusinessAccount, error)
	// Updates a business account
	UpdateBusinessAccount(context.Context, *UpdateBusinessAccountRequest) (*BusinessAccount, error)
	// Deletes a given business account
	DeleteBusinessAccount(context.Context, *DeleteBusinessAccountRequest) (*ResponseStatus, error)
	// Gets a business account
	GetBusinessAccount(context.Context, *GetBusinessAccountRequest) (*BusinessAccount, error)
	// Gets multiple business accounts
	GetBusinessAccounts(context.Context, *GetBusinessAccountsRequest) (*BusinessAccount, error)
	mustEmbedUnimplementedBusinessAccountServiceServer()
}

// UnimplementedBusinessAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessAccountServiceServer struct {
}

func (UnimplementedBusinessAccountServiceServer) CreateBusinessAccount(context.Context, *CreateBusinessAccountRequest) (*BusinessAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessAccount not implemented")
}
func (UnimplementedBusinessAccountServiceServer) UpdateBusinessAccount(context.Context, *UpdateBusinessAccountRequest) (*BusinessAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessAccount not implemented")
}
func (UnimplementedBusinessAccountServiceServer) DeleteBusinessAccount(context.Context, *DeleteBusinessAccountRequest) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessAccount not implemented")
}
func (UnimplementedBusinessAccountServiceServer) GetBusinessAccount(context.Context, *GetBusinessAccountRequest) (*BusinessAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessAccount not implemented")
}
func (UnimplementedBusinessAccountServiceServer) GetBusinessAccounts(context.Context, *GetBusinessAccountsRequest) (*BusinessAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessAccounts not implemented")
}
func (UnimplementedBusinessAccountServiceServer) mustEmbedUnimplementedBusinessAccountServiceServer() {
}

// UnsafeBusinessAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessAccountServiceServer will
// result in compilation errors.
type UnsafeBusinessAccountServiceServer interface {
	mustEmbedUnimplementedBusinessAccountServiceServer()
}

func RegisterBusinessAccountServiceServer(s grpc.ServiceRegistrar, srv BusinessAccountServiceServer) {
	s.RegisterService(&_BusinessAccountService_serviceDesc, srv)
}

func _BusinessAccountService_CreateBusinessAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessAccountServiceServer).CreateBusinessAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BusinessAccountService/CreateBusinessAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessAccountServiceServer).CreateBusinessAccount(ctx, req.(*CreateBusinessAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessAccountService_UpdateBusinessAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessAccountServiceServer).UpdateBusinessAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BusinessAccountService/UpdateBusinessAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessAccountServiceServer).UpdateBusinessAccount(ctx, req.(*UpdateBusinessAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessAccountService_DeleteBusinessAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessAccountServiceServer).DeleteBusinessAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BusinessAccountService/DeleteBusinessAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessAccountServiceServer).DeleteBusinessAccount(ctx, req.(*DeleteBusinessAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessAccountService_GetBusinessAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessAccountServiceServer).GetBusinessAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BusinessAccountService/GetBusinessAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessAccountServiceServer).GetBusinessAccount(ctx, req.(*GetBusinessAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessAccountService_GetBusinessAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessAccountServiceServer).GetBusinessAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BusinessAccountService/GetBusinessAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessAccountServiceServer).GetBusinessAccounts(ctx, req.(*GetBusinessAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BusinessAccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BusinessAccountService",
	HandlerType: (*BusinessAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBusinessAccount",
			Handler:    _BusinessAccountService_CreateBusinessAccount_Handler,
		},
		{
			MethodName: "UpdateBusinessAccount",
			Handler:    _BusinessAccountService_UpdateBusinessAccount_Handler,
		},
		{
			MethodName: "DeleteBusinessAccount",
			Handler:    _BusinessAccountService_DeleteBusinessAccount_Handler,
		},
		{
			MethodName: "GetBusinessAccount",
			Handler:    _BusinessAccountService_GetBusinessAccount_Handler,
		},
		{
			MethodName: "GetBusinessAccounts",
			Handler:    _BusinessAccountService_GetBusinessAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
