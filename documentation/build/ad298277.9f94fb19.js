(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{183:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return u}));var a=n(2),s=(n(0),n(243));const r={title:"Speeding up InfluxDB line protocol",author:"Tancrede Collard",author_title:"QuestDB Team",author_url:"https://github.com/TheTanc",author_image_url:"https://avatars.githubusercontent.com/TheTanc",tags:["influxdb","influxdb line protocol","performance"],description:"Comparison between InfluxDB and QuestDB regarding the performance of the line protocol when ingesting data."},o={permalink:"/blog/2019/12/19/lineprot",source:"@site/blog/2019-12-19-lineprot.md",description:"Comparison between InfluxDB and QuestDB regarding the performance of the line protocol when ingesting data.",date:"2019-12-19T00:00:00.000Z",tags:[{label:"influxdb",permalink:"/blog/tags/influxdb"},{label:"influxdb line protocol",permalink:"/blog/tags/influxdb-line-protocol"},{label:"performance",permalink:"/blog/tags/performance"}],title:"Speeding up InfluxDB line protocol",readingTime:4.66,truncated:!0,prevItem:{title:"The art of thread messaging",permalink:"/blog/2020/03/15/interthread"}},i=[{value:"Why ILP?",id:"why-ilp",children:[]},{value:"Data loss over UDP",id:"data-loss-over-udp",children:[]},{value:"It comes down to ingestion speed",id:"it-comes-down-to-ingestion-speed",children:[]},{value:"Why is the sender\u2019s rate slower for InfluxDB compared to QuestDB?",id:"why-is-the-senders-rate-slower-for-influxdb-compared-to-questdb",children:[]},{value:"QuestDB\u2019s secret sauce",id:"questdbs-secret-sauce",children:[]},{value:"Get started",id:"get-started",children:[]}],l={rightToc:i};function u({components:e,...t}){return Object(s.b)("wrapper",Object(a.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(s.b)("p",null,"InfluxDB is the current market leader in time series, and we thought it would\nonly be fair if we had a stab at their ingestion format called ",Object(s.b)("strong",{parentName:"p"},"InfluxDB line\nprotocol (\u201cILP\u201d)")," to compare data ingestion performance between QuestDB and\nInfluxDB."),Object(s.b)("p",null,"It would not be an overstatement to say that InfluxDB uses a lot of CPU. We set\nourselves to build a receiver for ILP, which stores data faster than InfluxDB\nwhile being hardware efficient."),Object(s.b)("h2",{id:"why-ilp"},"Why ILP?"),Object(s.b)("p",null,"Starting with QuestDB 4.0.4, users can ingest data through ILP to ",Object(s.b)("strong",{parentName:"p"},"leverage SQL\nto query InfluxDB data alongside other tables in a relational database while\nkeeping the flexibility of ILP"),"."),Object(s.b)("p",null,Object(s.b)("img",{alt:"QuestDB's architecture and its API integration",src:n(375).default})),Object(s.b)("h2",{id:"data-loss-over-udp"},"Data loss over UDP"),Object(s.b)("p",null,"We have conducted our testing over UDP, thus expecting some level of data loss.\nHowever, we did not anticipate that InfluxDB would lose so much."),Object(s.b)("p",null,"We have built a sender, which caches outgoing messages in a small buffer before\nsending them to a UDP socket. It sends data as fast as possible to eventually\noverpower the consumers and introduce packet loss. To test for different use\ncases, we have throttled the sender by varying the size of its buffer. A smaller\nbuffer results in more frequent network calls and results in lower sending\nrates."),Object(s.b)("p",null,"The benchmark publishes 50 million messages at various speeds. We then measure\nthe number of entries in each DB after the fact to calculate the implied capture\nrate."),Object(s.b)("p",null,"We use the Dell XPS 15 7590, 64Gb RAM, 6-core i9 CPU, 1TB SSD drive. In this\nexperiment, both the sender and QuestDB/InfluxDB instance run on the same\nmachine. UDP publishing is over loopback. OS is Fedora 31, OS UDP buffer size\n(net.core.rmem_max) is 104_857_600."),Object(s.b)("h2",{id:"it-comes-down-to-ingestion-speed"},"It comes down to ingestion speed"),Object(s.b)("p",null,"Database performance is the bottleneck that results in packet loss. Messages are\ndenied entry, and the loss rate is a direct function of the underlying database\nspeed."),Object(s.b)("p",null,"By sending 50m messages at different speeds, we get the following outcome."),Object(s.b)("p",null,Object(s.b)("img",{alt:"Table showing a comparison of the capture rate between QuestDB and InfluxDB",src:n(376).default})),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Capture rate as a function of sender speed")),Object(s.b)("p",null,"InfluxDB\u2019s capture rate rapidly drops below 50%, eventually converging toward\nsingle-digit rates."),Object(s.b)("p",null,Object(s.b)("img",{alt:"Chart showing a comparison of the capture rate between QuestDB and InfluxDB",src:n(377).default})),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Capture rate as a function of sending speed.")),Object(s.b)("p",null,Object(s.b)("img",{alt:"Chart showing a comparison of the ingestion rate between QuestDB and InfluxDB",src:n(378).default})),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Implied ingestion speed in function of Sender speed")),Object(s.b)("p",null,"QuestDB\u2019s ingestion speed results are obtained through ILP. Our ingestion speed\nis considerably higher while using our native input formats instead."),Object(s.b)("h2",{id:"why-is-the-senders-rate-slower-for-influxdb-compared-to-questdb"},"Why is the sender\u2019s rate slower for InfluxDB compared to QuestDB?"),Object(s.b)("p",null,"In this test, we run the sender and the DB on the same machine, and it turns out\nthat ",Object(s.b)("strong",{parentName:"p"},"InfluxDB slows down our UDP sender by cannibalizing the CPU"),". Here is\nwhat happens to your CPUs while using InfluxDB:"),Object(s.b)("p",null,Object(s.b)("img",{alt:"Bar chart showing the CPU usage of InfluxDB, idle vs on load",src:n(379).default})),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"InfluxDB\u2019s CPU usage when serving requests")),Object(s.b)("p",null,"When in use, InfluxDB saturates all of the CPU. As a consequence, it slows down\nany other program running on the same machine."),Object(s.b)("h2",{id:"questdbs-secret-sauce"},"QuestDB\u2019s secret sauce"),Object(s.b)("p",null,"We maximise the utilization of each CPU, from which we extract as much\nperformance as possible. For the example below, we compared InfluxDB\u2019s ingestion\nspeed using 12 cores to QuestDB using one CPU core only. Despite utilizing one\ncore instead of 12, QuestDB still outperforms InfluxDB significantly."),Object(s.b)("p",null,"If spare CPU capacity arises, QuestDB will execute multiple data ingestion in\nparallel, leveraging multiple CPUs at the same time, but with one key\ndifference; QuestDB uses work-stealing algorithms to ensure every last bit of\nCPU capacity is used while never being idle. Let us illustrate why this is the\ncase."),Object(s.b)("p",null,"Modern network cards have much superior throughput than the single receiver.\nBeing limited to one receiver by design, InfluxDB considerably under-utilizes\nthe network card, which is the limiting factor in the pipeline.\n",Object(s.b)("img",{alt:"Chart showing InfluxDB's queuing mechanism",src:n(380).default})),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"All CPU cores open one single receiver that under-utilizes the network card")),Object(s.b)("p",null,"Conversely, QuestDB can open parallel receivers (requiring one core each), fully\nutilizing the network card capabilities. The following illustration assumes that\nthere would be spare CPU capacity in other cores to be filled. In such a\nscenario we would get QuestDB utilizing 12 cores, with each one of those being\nconsiderably faster than InfluxDB\u2019s combined 12 cores!"),Object(s.b)("p",null,Object(s.b)("img",{alt:"Chart showing QuestDB's queuing mechanism",src:n(381).default})),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Each CPU core opens an independent receiver working in parallel that fully\nleverages the network card")),Object(s.b)("p",null,"Besides ingestion, InfluxDB also saturates the CPU on queries. The current user\ncannibalizes the whole CPU, while other users have to wait for their turn.\n",Object(s.b)("img",{alt:"How the CPU is shared under InfluxDB's load",src:n(382).default})),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Users monopolize all CPU cores one after the other")),Object(s.b)("p",null,"By contrast, QuestDB uses each core separately, allowing multiple users to query\nor write concurrently without delay. The performance gap between QuestDB and\nInfluxDB grows significantly as the number of simultaneous users increases.\n",Object(s.b)("img",{alt:"How the CPU is shared under QuestDB's load",src:n(383).default})),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Users share CPU cores and are served concurrently, fast. They also use cores\nto the maximum.")),Object(s.b)("h2",{id:"get-started"},"Get started"),Object(s.b)("p",null,"QuestDB supports ILP over UDP multicast and unicast sockets. TCP support will\nfollow shortly. You don\u2019t need to change anything in your application. For\nTelegraf, you can configure the UDP sender for QuestDB\u2019s address and port."),Object(s.b)("p",null,"Follow this link to ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"/getstarted"}),"download QuestDB"),". You can also use our\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/BlackspaceInc//blob/master/benchmarks/src/main/java/org/questdb/LineUDPSenderMain.java"}),"sender"),"\nagainst QuestDB and InfluxDB to reproduce the experiment."),Object(s.b)("p",null,"You can use JOINs while modifying your data structure on the fly and querying it\nall in SQL."))}u.isMDXComponent=!0},375:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/storeAsMany-41c18ba43a035ee1c2c92bb1c614ce19.png"},376:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/captureRate-3f4f16e459569e4047fba98338c6fd50.png"},377:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/captureRateChart-fdf3be31e8d63d78cd114f8da92ae17b.png"},378:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/impliedSpeed-edd0d02a9fa8ac2f6279fcdd5a33055d.png"},379:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/cpuInflux-14acc7769ebd99efac13773a6613e15d.png"},380:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/queueInflux-a19c5be6a27e8f33304c325b6523d302.png"},381:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/queueQuest-426a1ac18c2eec9a8d49e3ee02c15a3e.png"},382:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/userInflux-2f53a8bc60f060b857c81c14313db9de.png"},383:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/userQuest-064f3f01e83c01a3a0630656092aa526.png"}}]);